(()=>{var n,e,o={124:(n,e,o)=>{"use strict";o.r(e),o.d(e,{ExtensionBase:()=>ExtensionBase});class ExtensionBase{constructor(){this.active=!1,this.verbose=!1,this.callbacks={}}init(){}start(){this.active=!0}pause(){this.stop()}stop(){this.active=!1}subscribe(n,e){this.callbacks[n]||(this.callbacks[n]=[]),this.callbacks[n].push(e)}unsubscribe(n,e){this.callbacks[n]&&(this.callbacks[n]=this.callbacks[n].filter((n=>n!==e)))}emit(n,e){this.callbacks[n]&&this.callbacks[n].forEach((n=>n(e)))}destroy(){this.disable()}}},312:(n,e,o)=>{"use strict";function asyncGeneratorStep(n,e,o,t,r,i,a){try{var s=n[i](a),l=s.value}catch(n){return void o(n)}s.done?e(l):Promise.resolve(l).then(t,r)}o.r(e),o.d(e,{Extensions:()=>Extensions});var t=["PoseEngine"];class Extensions{constructor(){this.plugins={},this.verbose=!1}init(n,e,o){var t=arguments.length>3&&void 0!==arguments[3]&&arguments[3];!this.plugins[n]||t?this.load(n,((n,t)=>{n?o?o(n):this.verbose&&console.error(n):e&&e(t)})):(this.verbose&&console.log("Extension ".concat(n," already booted, skipping...")),e&&e(this.plugins[n]))}load(n,e){var r=this;return function _asyncToGenerator(n){return function(){var e=this,o=arguments;return new Promise((function(t,r){var i=n.apply(e,o);function _next(n){asyncGeneratorStep(i,t,r,_next,_throw,"next",n)}function _throw(n){asyncGeneratorStep(i,t,r,_next,_throw,"throw",n)}_next(void 0)}))}}((function*(){if(t.includes(n))try{var i=new((yield o(50)("./".concat(n,".js"))).default);try{r.boot(n,i)}catch(e){console.error("Error (2) Booting extension '".concat(n,"':"),e)}e&&e(null,i)}catch(o){console.error("Error (1) Importing / Parsing extension '".concat(n,"':"),o),e&&e(err,null)}else{var a=new Error("Extension ".concat(n," not found"));console.error(a),e&&e(a,null)}}))()}start(n){var e=this.get(n);e&&e.start()}pause(n){var e=this.get(n);e&&e.pause()}stop(n){var e=this.get(n);e&&e.stop()}status(n){var e=this.get(n);return!!e&&e.active}boot(n,e){this.plugins[n]=e,e.init()}get(n){return this.plugins[n]?this.plugins[n]:(console.warn("Extension ".concat(n," not found")),null)}unload(n){var e=this.get(n);e&&(e.destroy(),delete this.plugins[n])}}},944:(n,e,o)=>{"use strict";o.r(e),o.d(e,{default:()=>Networking});var t=o(124);class Networking extends t.ExtensionBase{constructor(n){this.status=!1,this.accessToken="",this.jwtToken="",this.socket=io("https://www.www.com",{transports:["websocket"]})}init(){socket.on("event",(n=>{console.log(n)})),socket.on("connect",onConnect),socket.on("disconnect",onDisconnect),socket.on("authenticated",onAuthenticated),socket.on("unauthorized",console.error)}onConnect(){console.log("Successfully connected to the websocket"),socket.emit("authenticate",{method:"jwt",token:this.jwtToken})}onDisconnect(){console.log("Disconnected from websocket"),this.status=!1,onConnect()}onAuthenticated(n){var{channelId:e}=n;console.log("Successfully connected to channel ".concat(e)),this.status=!0}}},153:(n,e,o)=>{"use strict";o.r(e),o.d(e,{PoseEngine:()=>PoseEngine});var t=o(124);function asyncGeneratorStep(n,e,o,t,r,i,a){try{var s=n[i](a),l=s.value}catch(n){return void o(n)}s.done?e(l):Promise.resolve(l).then(t,r)}class PoseEngine extends t.ExtensionBase{constructor(n){if(this.active=!1,this.verbose=!1,"MediaPipe"!==n)throw new Error("Unknown pose estimation '"+n+"' model");this.model=new MediaPipePose}estimatePose(n){var e=this;return function _asyncToGenerator(n){return function(){var e=this,o=arguments;return new Promise((function(t,r){var i=n.apply(e,o);function _next(n){asyncGeneratorStep(i,t,r,_next,_throw,"next",n)}function _throw(n){asyncGeneratorStep(i,t,r,_next,_throw,"throw",n)}_next(void 0)}))}}((function*(){return yield e.model.estimate(n)}))()}}},26:(n,e,o)=>{"use strict";function asyncGeneratorStep(n,e,o,t,r,i,a){try{var s=n[i](a),l=s.value}catch(n){return void o(n)}s.done?e(l):Promise.resolve(l).then(t,r)}function _asyncToGenerator(n){return function(){var e=this,o=arguments;return new Promise((function(t,r){var i=n.apply(e,o);function _next(n){asyncGeneratorStep(i,t,r,_next,_throw,"next",n)}function _throw(n){asyncGeneratorStep(i,t,r,_next,_throw,"throw",n)}_next(void 0)}))}}o.r(e),o.d(e,{MediaPipePlugin:()=>MediaPipePlugin});class MediaPipePlugin{constructor(){this.workerScriptUrl="./PoseEngine_worker.js",this.worker=null,this.booted=!1}static loadScriptWithProgress(n,e){return _asyncToGenerator((function*(){return new Promise(((o,t)=>{var r=new XMLHttpRequest;r.open("GET",n,!0),r.responseType="text",r.onprogress=n=>{if(n.lengthComputable&&"function"==typeof e){var o=Math.round(n.loaded/n.total*100);e(o)}},r.onload=()=>{if(200===r.status){var e=document.createElement("script");e.textContent=r.responseText,document.head.appendChild(e),o()}else t(new Error("Failed to load script: ".concat(n)))},r.onerror=()=>t(new Error("Network error while loading: ".concat(n))),r.send()}))}))()}init(n){var e=this;return _asyncToGenerator((function*(){try{console.log("Loading MediaPipe..."),yield MediaPipePlugin.loadScriptWithProgress("https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/face_mesh.js",n),e.worker=new Worker(e.workerScriptUrl),e.booted=!0,console.log("MediaPipe Plugin Initialized")}catch(n){console.error("Error initializing MediaPipePlugin:",n)}}))()}sendMessage(n){this.booted?this.worker.postMessage(n):console.warn("MediaPipePlugin is not initialized.")}onMessage(n){this.worker?this.worker.onmessage=e=>n(e.data):console.warn("WebWorker not initialized.")}terminateWorker(){this.worker&&(this.worker.terminate(),this.worker=null,console.log("WebWorker terminated."))}}},852:()=>{function asyncGeneratorStep(n,e,o,t,r,i,a){try{var s=n[i](a),l=s.value}catch(n){return void o(n)}s.done?e(l):Promise.resolve(l).then(t,r)}self.onmessage=function(){var n=function _asyncToGenerator(n){return function(){var e=this,o=arguments;return new Promise((function(t,r){var i=n.apply(e,o);function _next(n){asyncGeneratorStep(i,t,r,_next,_throw,"next",n)}function _throw(n){asyncGeneratorStep(i,t,r,_next,_throw,"throw",n)}_next(void 0)}))}}((function*(n){var{type:e,data:o}=n.data;if("processFrame"===e){var t=yield poseModel.estimate(imageData);self.postMessage({type:"result",pose:t})}else console.warn("Unknown message type:",e)}));return function(e){return n.apply(this,arguments)}}()},703:(n,e,o)=>{"use strict";o.r(e),o.d(e,{WebCamera:()=>WebCamera});var t=o(124);class WebCamera extends t.ExtensionBase{constructor(){this.video=document.createElement("video"),this.stream=null,this.isInitialized=!1,this.active=!1}init(n){navigator.mediaDevices.getUserMedia({video:!0,audio:!1}).then((e=>{this.stream=e,this.video.srcObject=this.stream,this.video.play(),this.isInitialized=!0,console.log("WebCamera Initialized"),n&&n(null)})).catch((e=>{console.error("Error initializing WebCamera:",e),n&&n(e)}))}start(n){this.isInitialized?(this.active=!0,console.log("WebCamera Started"),n&&n(null)):(console.error("WebCamera is not initialized"),n&&n(new Error("WebCamera is not initialized")))}pause(n){this.stop(n)}stop(n){this.stream?(this.stream.getTracks().forEach((n=>n.stop())),this.video.srcObject=null,this.isInitialized=!1,console.log("WebCamera Stopped"),this.active=!1,n&&n(null)):n&&n(new Error("WebCamera is not initialized"))}}},50:(n,e,o)=>{var t={"./ExtensionBase.js":[124,9,226],"./Extensions.js":[312,9],"./Networking.js":[944,9,226],"./PoseEngine.js":[153,9,226],"./PoseEngine/MediaPipe.js":[26,9,226],"./PoseEngine/PoseEngine_worker.js":[852,7,226],"./WebCam.js":[703,9,226]};function webpackAsyncContext(n){if(!o.o(t,n))return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}));var e=t[n],r=e[0];return Promise.all(e.slice(2).map(o.e)).then((()=>o.t(r,16|e[1])))}webpackAsyncContext.keys=()=>Object.keys(t),webpackAsyncContext.id=50,n.exports=webpackAsyncContext},541:n=>{function webpackEmptyAsyncContext(n){return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}))}webpackEmptyAsyncContext.keys=()=>[],webpackEmptyAsyncContext.resolve=webpackEmptyAsyncContext,webpackEmptyAsyncContext.id=541,n.exports=webpackEmptyAsyncContext}},t={};function __webpack_require__(n){var e=t[n];if(void 0!==e)return e.exports;var r=t[n]={exports:{}};return o[n](r,r.exports,__webpack_require__),r.exports}e=Object.getPrototypeOf?n=>Object.getPrototypeOf(n):n=>n.__proto__,__webpack_require__.t=function(o,t){if(1&t&&(o=this(o)),8&t)return o;if("object"==typeof o&&o){if(4&t&&o.__esModule)return o;if(16&t&&"function"==typeof o.then)return o}var r=Object.create(null);__webpack_require__.r(r);var i={};n=n||[null,e({}),e([]),e(e)];for(var a=2&t&&o;"object"==typeof a&&!~n.indexOf(a);a=e(a))Object.getOwnPropertyNames(a).forEach((n=>i[n]=()=>o[n]));return i.default=()=>o,__webpack_require__.d(r,i),r},__webpack_require__.d=(n,e)=>{for(var o in e)__webpack_require__.o(e,o)&&!__webpack_require__.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},__webpack_require__.e=()=>Promise.resolve(),__webpack_require__.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),__webpack_require__.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};(()=>{"use strict";var n={};__webpack_require__.r(n),__webpack_require__.d(n,{camPosVert:()=>camPosVert,defaultShiftVert:()=>defaultShiftVert,defaultVert:()=>defaultVert,discardFrag:()=>discardFrag,shaderHeader:()=>ShaderHeader_shaderHeader});var e={};__webpack_require__.r(e),__webpack_require__.d(e,{animTextureFrag:()=>animTextureFrag,animTextureVert:()=>animTextureVert,clickableBevelFrag:()=>clickableBevelFrag,clickableBevelVert:()=>clickableBevelVert,portalBaseFrag:()=>portalBaseFrag,portalBaseVert:()=>portalBaseVert});var o={};__webpack_require__.r(o),__webpack_require__.d(o,{itemBaseFrag:()=>itemBaseFrag,itemBaseVert:()=>itemBaseVert,itemFrag:()=>itemFrag,itemVert:()=>itemVert,itemZoomFrag:()=>itemZoomFrag,pxlPrincipledFrag:()=>PxlPrincipled_pxlPrincipledFrag,pxlPrincipledVert:()=>PxlPrincipled_pxlPrincipledVert});var t={};__webpack_require__.r(t),__webpack_require__.d(t,{dustFrag:()=>dustFrag,dustVert:()=>dustVert,emberWispsFrag:()=>emberWispsFrag,emberWispsVert:()=>emberWispsVert,heightMapFrag:()=>heightMapFrag,heightMapVert:()=>heightMapVert,smokeFrag:()=>smokeFrag,smokeVert:()=>smokeVert,snowFallFrag:()=>snowFallFrag,snowFallVert:()=>snowFallVert});var r={};__webpack_require__.r(r),__webpack_require__.d(r,{boxAntiAliasPass:()=>boxAntiAliasPass,chroAberPostProcess:()=>chroAberPostProcess,compLayersPostProcess:()=>compLayersPostProcess,crossAntiAliasPass:()=>crossAntiAliasPass,directionalBlurPass:()=>directionalBlurPass,finalOverlayHeavyShader:()=>finalOverlayHeavyShader,finalOverlayShader:()=>finalOverlayShader,finalOverlaySlimShader:()=>finalOverlaySlimShader,glowPassPostProcess:()=>glowPassPostProcess,iZoomPostProcess:()=>iZoomPostProcess,lKingPostProcess:()=>lKingPostProcess,mixBlurShaderPass:()=>mixBlurShaderPass,motionBlurPostProcess:()=>motionBlurPostProcess,sFieldPostProcessFrag:()=>sFieldPostProcessFrag,sFieldPostProcessVert:()=>sFieldPostProcessVert,textureStorePass:()=>textureStorePass,warpPostProcess:()=>warpPostProcess,worldPositionFrag:()=>worldPositionFrag,worldPositionVert:()=>worldPositionVert});var i={};__webpack_require__.r(i),__webpack_require__.d(i,{bgScreenFrag:()=>bgScreenFrag,bgScreenVert:()=>bgScreenVert,skyObjectFrag:()=>skyObjectFrag,skyObjectVert:()=>skyObjectVert});const a=require("./libs/three/three.module.min.js");require("./libs/three/FBXLoader.js");var s={NONE:0,ERROR:1,WARN:2,INFO:3,DEBUG:4},l={OFF:0,LOW:1,MEDIUM:2,HIGH:3},c={OFF:0,VAPOR:1},d=s,v=l,f=c,u={OFF:0,BASIC:1,SOFT:2};d.NONE,Object.assign({},{height:{standing:1.75,stepSize:5},movement:{scalar:1,max:10,easing:.55},headBounce:{height:.3,rate:.025,easeIn:.03,easeOut:.95},jump:{impulse:.75,holdMax:2.85,repeatDelay:.08},gravity:{UPS:.3,Max:15.5}}),v.LOW,u.BASIC,f.OFF;require("./libs/three/EffectComposer.js"),require("./libs/three/RenderPass.js"),require("./libs/three/ShaderPass.js"),require("./libs/three/CopyShader.js"),require("./libs/three/UnrealBloomPass.js");var p=__webpack_require__(312);p.Extensions;function ShaderHeader_shaderHeader(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        "}function defaultVert(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n  varying vec2 vUv;\n  void main(){\n    vUv=uv;\n    vec4 modelViewPosition=modelViewMatrix * vec4(position, 1.0);\n    gl_Position = projectionMatrix*modelViewPosition;\n  }"}function defaultShiftVert(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n  varying vec2 vUv;\n  varying vec2 vUvShift;\n  void main(){\n    vUv=uv;\n        vUvShift=uv-.5;\n    vec4 modelViewPosition=modelViewMatrix * vec4(position, 1.0);\n    gl_Position = projectionMatrix*modelViewPosition;\n  }"}function camPosVert(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n  varying vec3 camPos;\n  varying vec2 vUv;\n  void main(){\n    vUv=uv;\n    vec4 modelViewPosition=modelViewMatrix * vec4(position, 1.0);\n    gl_Position = projectionMatrix*modelViewPosition;\n    camPos=(modelViewMatrix*vec4(0.0,0.0,1.0,1.0)).xyz;\n  }"}function discardFrag(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n  void main(){\n    discard;\n    gl_FragColor=vec4(.0,.0,.0,0.0);\n  }"}function animTextureVert(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n  varying vec2 vUv;\n  void main(){\n    vUv=uv;\n    vec4 modelViewPosition=modelViewMatrix * vec4(position, 1.0);\n    gl_Position = projectionMatrix*modelViewPosition;\n  }"}function animTextureFrag(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n  uniform vec2 time;\n  uniform float rate;\n  uniform float freq;\n  uniform float intensity;\n  uniform vec3 glowColor;\n  uniform sampler2D glowTexture;\n  varying vec2 vUv;\n  float pi=3.14159265358979;\n  \n  void main(){\n    vec4 glowCd=texture2D(glowTexture, vUv);\n    vec4 Cd=vec4(glowColor,1.0);\n    Cd.rgb*=(cos(glowCd.g*pi*freq+time.x*rate)*.5+.5)*(1.0-glowCd.b)*intensity+glowCd.b;\n    Cd.rgb*=glowCd.r*glowCd.a;\n    gl_FragColor=Cd;\n  }"}function clickableBevelVert(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform vec2 time;\n    uniform float rate;\n    varying vec3 pos;\n    varying float nDot;\n    varying vec2 vUv;\n    \n    void main(){\n      vUv=uv+vec2(rate*time.x, 0.0);\n      vec3 camDir=normalize( (projectionMatrix*viewMatrix*vec4(0.0,0.0,-1.0,1.0)).xyz );\n      nDot=dot( normal, camDir );\n      \n      pos=position;\n      vec4 modelViewPosition=modelViewMatrix * vec4(pos, 1.0);\n      gl_Position = projectionMatrix*modelViewPosition;\n      \n    }"}function clickableBevelFrag(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D alphaMap;\n    uniform sampler2D cloudNoise;\n    uniform vec2 time;\n    uniform vec2 intensity;\n    uniform float rate;\n    varying vec3 pos;\n    varying float nDot;\n    varying vec2 vUv;\n    \n    void main() {\n      vec4 Cd=vec4( 1.0 );\n      Cd.rgb= mix( vec3(.05,.1,.5), vec3(.3,.5,1.0), intensity.x);\n      \n      vec2 nUV=pos.xy*.01+vec2(time.x*rate*.1, time.x*rate*.1);\n      vec4 noiseCd=texture2D(cloudNoise,nUV);\n      noiseCd.xyz=noiseCd.xyz*2.0-1.0;\n      nUV=vUv+noiseCd.xy*.05;\n      \n      float alpha=texture2D(alphaMap,nUV).r;\n      float blender=(nDot*.5+.5);\n      Cd.rgb=Cd.rgb*(1.0+alpha);//mix( vec3(0.5,0.5,1.0), vec3(0.0,0.2,0.8), blender); // Center Color, Edge Color\n      alpha=1.0-(1.0-alpha)*(1.0-alpha);\n      alpha*=alpha;\n      Cd.a=alpha+alpha;\n      gl_FragColor = Cd;\n    }"}function portalBaseVert(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        uniform vec2 time;\n        uniform float rate;\n        varying vec2 shiftUv;\n        varying vec2 wUv;\n        \n        void main(){\n            shiftUv=(uv-.5);\n            \n            float t=time.x*rate;\n            vec2 rot=vec2( sin(t), cos(t) );\n            vec2 rotUV=vec2(0.0);\n            rotUV.x=rot.y*(uv.x-.5) + rot.x*(uv.y-.5);\n            rotUV.y=rot.y*(uv.y-.5) - rot.x*(uv.x-.5);\n            wUv=rotUV+.5;\n            \n            vec4 modelViewPosition=modelViewMatrix * vec4(position, 1.0);\n            gl_Position = projectionMatrix*modelViewPosition;\n            \n        }"}function portalBaseFrag(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        uniform vec3 color;\n        uniform sampler2D alphaMap;\n        uniform sampler2D cloudNoise;\n        uniform vec2 intensity;\n        varying vec2 shiftUv;\n        varying vec2 wUv;\n        \n        #define TAU 6.28318530717958\n        void main() {\n            float suvLength=length(shiftUv)+.1;\n            vec2 suvSign=sign(shiftUv);\n            \n            vec2 rUv=sin( (suvLength+wUv*10.*shiftUv)*.5 );\n            rUv *= suvLength ;\n            \n            vec4 noiseCd=texture2D(cloudNoise,rUv);\n            vec2 aUv=wUv*(noiseCd.xy*.5+wUv);\n            \n            float alpha=texture2D(alphaMap,aUv).r;\n            \n            vec4 Cd=vec4( color*intensity.x*(1.0+alpha)*mix( noiseCd.rgb, vec3(1.0), alpha), 1.);\n            alpha*=max(0.0, alpha-noiseCd.r*noiseCd.g*noiseCd.b );\n            Cd.a=min(1.0, alpha);\n            \n            gl_FragColor = Cd;\n        }"}function itemBaseVert(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform vec2 time;\n    uniform float intensity;\n    uniform float rate;\n    varying vec3 pos;\n    varying float nDot;\n    varying vec2 vUv;\n    \n    void main(){\n      vUv=uv+vec2(rate*time.x, 0.0);\n      vec3 camDir=normalize( (projectionMatrix*viewMatrix*vec4(0.0,0.0,-1.0,1.0)).xyz );\n      nDot=dot( normal, camDir );\n      \n      pos=position;\n      vec4 modelViewPosition=modelViewMatrix * vec4(pos, 1.0);\n      gl_Position = projectionMatrix*modelViewPosition;\n      \n    }"}function itemBaseFrag(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform vec3 color;\n    uniform sampler2D alphaMap;\n    uniform sampler2D cloudNoise;\n    uniform vec2 time;\n    uniform float intensity;\n    uniform float rate;\n    varying vec3 pos;\n    varying float nDot;\n    varying vec2 vUv;\n    \n    void main() {\n      vec4 Cd=vec4( color, 1.0);\n      \n      \n      vec2 nUV=pos.xy*.01+vec2(time.x*rate*.1, time.x*rate*.1);\n      vec4 noiseCd=texture2D(cloudNoise,nUV);\n      noiseCd.xyz=noiseCd.xyz*2.0-1.0;\n      nUV=vUv+noiseCd.xy*.05;\n      \n      float alpha=texture2D(alphaMap,nUV).r;\n      float blender=(nDot*.5+.5);\n      Cd.rgb=color*intensity*(1.0+alpha);//mix( vec3(0.5,0.5,1.0), vec3(0.0,0.2,0.8), blender); // Center Color, Edge Color\n      alpha=1.0-(1.0-alpha)*(1.0-alpha);\n      alpha*=alpha;\n      Cd.a=alpha+alpha;\n      gl_FragColor = Cd;\n    }"}function itemVert(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform vec2 time;\n    uniform float intensity;\n    uniform float rate;\n    varying vec3 pos;\n    varying float nDot;\n    varying vec2 vUv;\n    varying vec2 nUv;\n    \n    void main(){\n      vUv=uv;\n      nUv=uv*.5+vec2(rate*time.x*-.1, 0.0);\n      nUv.x=sin(nUv.x)*.5+.5;\n      vec3 camDir=normalize( (projectionMatrix*viewMatrix*vec4(0.0,0.0,-1.0,1.0)).xyz );\n      nDot=dot( normal, camDir );\n      \n      vec2 nUV=position.xy*.01+vec2(time.x*rate*.1, time.x*rate*.1);\n      vec3 pos=position;\n      vec4 modelViewPosition=modelViewMatrix * vec4(pos, 1.0);\n      gl_Position = projectionMatrix*modelViewPosition;\n      \n    }"}function itemFrag(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform vec3 color;\n    uniform sampler2D alphaMap;\n    uniform vec2 time;\n    uniform float intensity;\n    uniform float rate;\n    uniform sampler2D cloudNoise;\n    varying vec3 pos;\n    varying float nDot;\n    varying vec2 vUv;\n    varying vec2 nUv;\n    \n    void main() {\n      vec4 Cd=vec4( color, 1.0);\n      float alpha=texture2D(alphaMap,vUv).r;\n      float noise=length(texture2D(cloudNoise,nUv).rgb)*.5;\n      float blender=(nDot*.5+.5);\n      Cd.rgb=color*blender;\n      Cd.rgb*=intensity*alpha;\n      Cd.a=blender*alpha+noise*alpha;\n      gl_FragColor = Cd;\n    }"}function itemZoomFrag(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D color;\n    uniform vec2 time;\n    uniform float intensity;\n    uniform sampler2D cloudNoise;\n    varying vec2 vUv;\n    \n    void main() {\n      vec4 Cd=texture2D(color,vUv);\n      Cd.a=Cd.b;\n      Cd.rgb=vec3( Cd.rg*Cd.a, 0.0 );\n      Cd.rgb*=Cd.a* mix(.7, 1.0, gl_FrontFacing);\n      gl_FragColor = Cd;\n    }"}function PxlPrincipled_pxlPrincipledVert(){var n=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e="\n    attribute vec3 color;\n    attribute vec3 shading;\n\n    varying float vFlicker;\n    varying vec2 vUv;\n    varying vec3 vCd;\n    varying vec3 vPos;\n    varying vec3 vLocalPos;\n    varying vec3 vN;\n    varying vec3 vLocalN;\n    varying vec3 vShading;\n    ";return n&&(e+="\n        ".concat(a.ShaderChunk.common,"\n        ").concat(a.ShaderChunk.shadowmap_pars_vertex,"\n      ")),e+="\n    \n    void main(){\n        vUv=uv;\n        \n        vShading=shading;\n        \n        vCd=color;\n        \n        vec3 transformed = vec3( position );\n        vec3 objectNormal = vec3( normal );\n        vec3 transformedNormal = objectNormal;\n        \n        \n        vLocalPos = position;\n        vN = (modelViewMatrix * vec4(normal, 0.0)).xyz;\n        vLocalN = ( modelMatrix * vec4(normal, 0.0)).xyz;\n        vec4 mvPos=modelViewMatrix * vec4(position, 1.0);\n        gl_Position = projectionMatrix*mvPos;\n        vPos = mvPos.xyz;\n        \n        ",n&&(e+="\n            ".concat(a.ShaderChunk.worldpos_vertex,"\n            ").concat(a.ShaderChunk.shadowmap_vertex,"\n          ")),e+="\n    }"}function PxlPrincipled_pxlPrincipledFrag(n,e,o,t,r,i){var s=!1,l=1;n.hasOwnProperty("Specular")&&n.Specular>0&&(s=!0,l=n.Specular);var c=!1;n.PointColor&&(c=!0);var d=!0,v="1.0";n.hasOwnProperty("SurfaceNoise")&&(n.SurfaceNoise%1==0&&(v=n.SurfaceNoise+".0"),"0.0"==v&&(d=!1));var f="\n        ";if(e||(f+="uniform sampler2D dTexture;"),f+="\n    \n    uniform sampler2D noiseTexture;\n    uniform sampler2D detailTexture;\n        \n    uniform vec2 time;\n    uniform float cdMult;\n    uniform vec3 fogColor;\n    \n    varying vec2 vUv;\n    varying vec3 vCd;\n    varying vec3 vPos;\n    varying vec3 vLocalPos;\n    varying vec3 vN;\n    varying vec3 vLocalN;\n    varying vec3 vShading;\n    \n    varying float vFlicker;\n    \n    #define PI 3.14159265358979\n    \n    struct PointLight {\n      vec3 color;\n      float decay;\n      float distance;\n      vec3 position;\n    };\n    struct DirLight {\n      vec3 color;\n      vec3 direction;\n    };\n    ",t&&(f+="\n    #if NUM_POINT_LIGHTS > 0\n      uniform PointLight pointLights[NUM_POINT_LIGHTS];\n    #endif\n    #if NUM_DIR_LIGHTS > 0\n      uniform DirLight directionalLights[NUM_DIR_LIGHTS];\n    #endif\n      "),r&&(f+="\n      \n      ".concat(a.ShaderChunk.packing,"\n      \n      #if NUM_POINT_LIGHT_SHADOWS > 0\n          uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n          varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n          struct PointLightShadow {\n              float shadowBias;\n              float shadowNormalBias;\n              float shadowRadius;\n              vec2 shadowMapSize;\n              float shadowCameraNear;\n              float shadowCameraFar;\n          };\n          uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n      #endif\n      float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n          return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n      }\n      vec2 cubeToUV( vec3 v, float texelSizeY ) {\n          vec3 absV = abs( v );\n          float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n          absV *= scaleToCube;\n          v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n          vec2 planar = v.xy;\n          float almostATexel = 1.5 * texelSizeY;\n          float almostOne = 1.0 - almostATexel;\n          if ( absV.z >= almostOne ) {\n              if ( v.z > 0.0 )\n                  planar.x = 4.0 - v.x;\n          } else if ( absV.x >= almostOne ) {\n              float signX = sign( v.x );\n              planar.x = v.z * signX + 2.0 * signX;\n          } else if ( absV.y >= almostOne ) {\n              float signY = sign( v.y );\n              planar.x = v.x + 2.0 * signY + 2.0;\n              planar.y = v.z * signY - 2.0;\n          }\n          return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n      }\n      float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n          vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n          vec3 lightToPosition = shadowCoord.xyz;\n          float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\n           dp += shadowBias;\n          vec3 bd3D = normalize( lightToPosition );\n          #if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n              vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n              return (\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n              ) * ( .11111111111 ) * (1.0-dp);\n          #else\n              return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) * (1.0-dp);\n          #endif\n      }\n    \n      vec3 directionToLight( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar  ){\n          vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n          vec3 lightToPosition = shadowCoord.xyz;\n          float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\n          dp += shadowBias;\n          vec3 bd3D = normalize( lightToPosition );\n          vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n          return texture2D( pointShadowMap[0], cubeToUV( bd3D, texelSize.y )).rgb;\n      }\n      ")),f+="\n    void main(){\n      ",c)f+="vec3 vertCd = vCd;";else if(e){var toFloatStr=n=>n%1==0?n+".0":n+"",u=toFloatStr(e.r),p=toFloatStr(e.g),m=toFloatStr(e.b);f+="vec3 vertCd = vec3( ".concat(u,", ").concat(p,", ").concat(m," ) ;")}else f+="vec3 vertCd = texture2D(dTexture,vUv).rgb ;";f+="\n        \n        vec4 Cd=vec4( vertCd, 1.0 );\n        float specular = 0.0;\n        ",o&&(f+="\n          float depth = gl_FragCoord.z / gl_FragCoord.w *.0004;\n          Cd.rgb=  mix( Cd.rgb, fogColor, depth );\n          ");var g="",x="",h="";if(d&&("1.0"!=v&&(g="*"+v),f+="\n            float detailMult = (texture2D(detailTexture,vUv*4.0).r)*.5+.5;\n            ",x="+detailMult * (shadowInf*.5+.5) ".concat(g),h="(detailMult+.5) ".concat(g)),t&&(f+="\n          #if NUM_POINT_LIGHTS > 0 || NUM_DIR_LIGHTS > 0\n            vec4 lights = vec4(0.0, 0.0, 0.0, 1.0);\n          #endif\n          \n          #if NUM_POINT_LIGHTS > 0\n            for(int i = 0; i < NUM_POINT_LIGHTS; i++) {\n                vec3 lightVector = normalize(vPos - pointLights[i].position);\n                vec3 lightInf= clamp(dot(-lightVector, vN), 0.0, 1.0) * pointLights[i].color;\n                //lightInf = mix( lightInf, 1.0-(1.0-lightInf)*(1.0-lightInf), .2);\n                float distFalloff =  1.0-min(1.0, length(vPos - pointLights[i].position) * pointLights[i].decay*.008 );\n                lightInf *=  distFalloff;\n                lights.rgb += lightInf;\n                ",s&&(f+="\n                  distFalloff = (dot(vN, normalize(-vPos)) )*distFalloff;\n                  specular += distFalloff;\n                  "),f+="\n            }\n          #endif\n            \n          #if NUM_DIR_LIGHTS > 0\n            for(int i = 0; i < NUM_DIR_LIGHTS; i++) {\n                vec3 lightInf= max(0.0, dot(directionalLights[i].direction, vN)*.65+.35) * directionalLights[i].color;\n                lights.rgb += lightInf;\n            }\n          #endif\n            \n            \n          #if NUM_POINT_LIGHTS > 0 || NUM_DIR_LIGHTS > 0\n            Cd.rgb *= lights.rgb;\n          #endif\n          ",s&&(f+="\n            Cd.rgb += vertCd * specular * ".concat(l,";\n            "))),r){f+="\n          #if NUM_POINT_LIGHT_SHADOWS > 0\n            \n            float shadowInf = 0.0;\n            float detailInf = 0.0;\n            float lShadow = 0.0;\n            int i = 0;\n            ";for(var C=0;C<i;++C)f+="\n                i=".concat(C,";\n                lShadow = getPointShadow( pointShadowMap[").concat(C,"], pointLightShadows[i].shadowMapSize, pointLightShadows[i].shadowBias*.75, pointLightShadows[i].shadowRadius*1.65, vPointShadowCoord[i], pointLightShadows[i].shadowCameraNear, pointLightShadows[i].shadowCameraFar );\n                shadowInf = max( lShadow, shadowInf);\n                ");f+="\n            shadowInf = shadowInf;\n            Cd.rgb*=shadowInf ".concat(x," ;\n            "),d&&(f+="\n              #else\n                Cd.rgb*=".concat(h,";\n              ")),f+="\n          #endif\n          "}else d&&(f+="\n            Cd.rgb*=".concat(h,";\n            "));return f+="\n        Cd*=cdMult;\n        \n        // Convert to sRGB\n        Cd.rgb = mix( 12.92 * Cd.rgb, 1.055 * pow(Cd.rgb, vec3(1.0 / 2.4)) - 0.055, step(0.0031308, Cd.rgb) );\n\n        gl_FragColor=Cd;\n    }"}function emberWispsVert(n){return"\n// Ember Settings\n  const vec3 EmberEarlyCd = vec3( 0.8, 0.5, .1 );\n  const vec3 EmberOldCd = vec3( 0.634, 0.20, 0.20 );\n  const float BaseSpeed = 0.77;\n  const float SpeadInf = 0.7;\n  const float EmberSpread = 5.0;\n  const float EmberFadeDistance = 0.04;\n\n// -- -- --\n  \n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n// -- -- --\n\nuniform sampler2D noiseTexture;\nuniform vec2 time;\nuniform vec3 windDir;\nuniform vec3 offsetPos;\nuniform float rate;\nuniform float pointScale;\nuniform vec3 sliders;  \n\nattribute vec4 seeds;\nattribute vec2 atlas;\n\nvarying vec3 vCd;\nvarying vec2 vAtlas;\nvarying vec2 vRot;\nvarying float vAlpha;\nvarying float vBrightness;\n\n\n\nfloat colDetect( vec2 pos, vec2 pt, vec2 n1, vec2 n2 ){\n    vec2 ref=pos-pt;\n    float ret = step( dot( ref, n1 ), 0.0 );\n    ret *= step( dot( ref, n2 ), 0.0 );\n    \n    return ret;\n}\n\n\nvoid main(){\n    vAtlas=atlas;\n    \n    float rot=seeds.z+time.x*seeds.z*3.;\n    vRot=vec2( sin(rot), cos(rot) );\n    \n    vec3 pOff=vec3(seeds.z, seeds.y, seeds.w) ;\n    \n    vec2 sinUV=abs(sin(pOff.xz*.5+seeds.zw+time.x*.1)*.5+.5);\n    vec3 noiseCd=texture2D(noiseTexture, sinUV ).rgb*4.5 + 0.50;\n    \n    float rateShift = (BaseSpeed*(seeds.x*.4+.6));\n    float t=time.x*rate*rateShift;\n    \n    // Random shift to a cycle y movement\n    float shiftY= mod( t+t*seeds.x+seeds.z*8.0+noiseCd.r*10.20*(seeds.y*2.0-1.0)+noiseCd.b+(-seeds.x+seeds.y)*4.0, 10.0);\n    \n    // Change up ages of embers\n    float lifeFade = shiftY*.1;\n    float fadeDrop = min(1.0, lifeFade*lifeFade*4. ); \n    //\n    float life = 1.0-max(0.0,abs(shiftY-seeds.x*.1)*(1.0-(seeds.x*1.0)) );\n    life = 1.0-((shiftY*.001-seeds.x*.2) );\n    \n    pOff.y=shiftY*seeds.y;\n    \n    pOff.y=(pOff.y)+shiftY; \n    vec3 pos= pOff ;\n    \n\n    float spreadPerc = SpeadInf  * min(1.0, life*1.);\n    pos.xz=(noiseCd.rg*noiseCd.r)*(seeds.x)*(life*seeds.zy*(seeds.w*4.0+1.)) * spreadPerc;\n    pos.xz = mix( pos.xz, normalize( pos.xz ), step(1.0, length(pos.xz)) ) * EmberSpread;\n    \n    \n    // Directional push\n    float yPush = ( life * (life*.5+.5))  * min(1.0,pos.y*.12) * 2.8;\n    pos.xz += windDir.xz * yPush * pos.y*(.5+life*.5);\n    pos.y += yPush;\n    \n    float pToCamLen = length(pos-cameraPosition);\n    float pScalar = max( 0., (1.-pToCamLen *  0.0806 )); // 0.0385\n    pScalar += max(0.0,pToCamLen - 0.4) * 0.005;\n    \n    vAlpha = min(1.0, (seeds.x*.15+.7) * pScalar*3.0 );\n\n    \n    vAlpha=max(0.0, life*life-seeds.z-seeds.z);\n    float distMult = ( length( pos )*EmberFadeDistance );\n    distMult = 1.0 - ( distMult * distMult );\n    vAlpha *= distMult;\n    \n    \n    float pScale = pointScale * seeds.w * pScalar + 2.0;\n    \n    gl_PointSize =  pScale*fadeDrop ;\n    \n    \n    float tightenBase = min( 1.0, pos.y*.2 );\n    pos.xz *= tightenBase*tightenBase;\n    \n    pos += modelMatrix[3].xyz + vec3( -1.76, -0.2269, -0.25);\n    vec4 mvPos=viewMatrix * vec4(pos, 1.0);\n    gl_Position = projectionMatrix*mvPos;\n    \n    float cdAge = clamp( 1.0 - life, 0.0, 1.0);\n    \n    vCd = mix( EmberEarlyCd, EmberOldCd, cdAge )  ;\n    \n    vBrightness = 1.045 + fadeDrop*2.;\n}"}function emberWispsFrag(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D atlasTexture;\n    uniform vec2 time;\n    uniform float rate;\n    \n    varying vec3 vCd;\n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vAlpha;\n    varying float vBrightness;\n    \n    \n    \n    // -- -- --\n    \n    // Human Eye Adjusted Luminance\n    //   https://en.wikipedia.org/wiki/Grayscale\n    float luma(vec3 color) {\n      return dot( color, vec3(0.2126, 0.7152, 0.0722) );\n    }\n      \n    // -- -- --\n    \n    \n    void main(){\n        vec2 uv=gl_PointCoord;\n\n        vec2 pos = (uv-.5)*.85;\n\n        vec2 rotUV;\n        rotUV.x = vRot.y * pos.x - vRot.x * pos.y;\n        rotUV.y = vRot.x * pos.x + vRot.y * pos.y;\n        rotUV=(rotUV+.5)*.25+vAtlas;\n        \n        \n        vec4 dustCd=texture2D(atlasTexture,rotUV);\n        float alpha= clamp( dustCd.a*vAlpha, 0.0, 1.0) ;\n        \n        dustCd.rgb *= vBrightness;\n        \n        float dirtLuma = luma( dustCd.rgb );\n        vec4 Cd=vec4( dirtLuma * vCd * vBrightness, alpha );\n        \n        gl_FragColor=Cd;\n    }"}function dustVert(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e={pOpacity:1,proxDist:200,hasLights:!1,fadeOutScalar:1.59,wanderInf:1,wanderRate:1,wanderFrequency:2.85};if(n&&"object"==typeof n){var o=Object.keys(n);Object.keys(e).forEach((t=>{o.includes(t)||(n[t]=e[t])}))}var toFloatStr=n=>(n+"").includes(".")?n:n+".0",t="\n    // Fade-Out Influence multiplier\n        const float ParticleOpacity = ".concat(toFloatStr(n.pOpacity),";\n        const float FadeOutScalar = ").concat(toFloatStr(n.fadeOutScalar),";\n        const float WanderInf = ").concat(toFloatStr(n.wanderInf),";\n        const float WanderRate = ").concat(toFloatStr(n.wanderRate),";\n        const float WanderFrequency = ").concat(toFloatStr(n.wanderFrequency),";\n\n        #define PROX ").concat(n.proxDist.toFixed(3),"\n        #define PROX_INV 1.0/").concat((.8*n.proxDist).toFixed(3),"\n\n    // -- -- --\n  ");return t+="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ",t+="\n    // -- -- --\n\n    uniform sampler2D noiseTexture;\n    uniform vec2 time;\n    uniform float rate;\n    uniform vec2 pointScale;\n    uniform vec3 positionOffset;\n    uniform vec3 windDir;\n  ",n.hasLights&&(t+="\n  #if NUM_POINT_LIGHTS > 0\n    struct PointLight {\n      vec3 color;\n      float decay;\n      float distance;\n      vec3 position;\n    };\n    uniform PointLight pointLights[NUM_POINT_LIGHTS];\n  #endif\n    "),t+="\n    \n    attribute vec4 seeds;\n    attribute vec2 atlas;\n    \n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vScalar;\n    varying float vAlpha;\n    \n    \n    // -- -- --\n\n    float colDetect( vec2 pos, vec2 pt, vec2 n1, vec2 n2 ){\n        vec2 ref=pos-pt;\n        float ret = step( dot( ref, n1 ), 0.0 );\n        ret *= step( dot( ref, n2 ), 0.0 );\n        \n        return ret;\n    }\n    \n    vec3 randomVec( vec3 seed ) {\n      return vec3(\n        fract( dot(seed,vec3(12.9898, 78.233, 45.164)) * 43758.5453 ),\n        fract( dot(seed,vec3(93.9898, 67.345, 12.345)) * 43758.5453 ),\n        fract( dot(seed,vec3(54.123, 98.765, 32.123)) * 43758.5453 )\n      );\n    }\n\n    // -- -- --\n    \n    void main(){\n        vAtlas=atlas;\n        \n        float rot=seeds.z+time.x*(seeds.z*2.);\n        vRot=vec2( sin(rot), cos(rot) );\n        \n        float t=time.x*rate*0.;\n        \n        vec3 pOff=seeds.xyz * vec3(PROX);\n        \n        // Loop point positions based on camera location\n        float yFract=fract(t+seeds.x);\n        pOff.xyz += time.x * windDir.xyz; \n        vec3 pos= pOff ;\n        \n        vec3 noiseCd=texture2D(noiseTexture, sin(pos.xz*.05+seeds.xz+time.x*2.1) ).rgb-.5;\n        vec3 noiseCdb=texture2D(noiseTexture, sin((1.0-pos.xz)*.05+seeds.yw+time.x*.1) ).rgb-.5;\n        \n        // -- -- --\n        \n        // Meandering points\n        \n        \n        vec3 randDirA = randomVec( seeds.xyz );\n        vec3 randDirB = randomVec( seeds.wyz );\n        vec3 randDirC = randomVec( seeds.zxy );\n        vec3 randDirBlend = mix( randDirA, randDirB, sin( randDirC * time.x * WanderFrequency ) ) * WanderInf;\n        \n        // -- -- --\n        \n        pos += randDirBlend * sin( seeds.x+seeds.z+noiseCd.r*noiseCd.g*seeds.y+noiseCdb.b + (time.x+seeds.y*10.) * WanderRate * seeds.w*noiseCdb.g ) * WanderRate * ( 5. + seeds.z );\n\n        pos += (noiseCd * noiseCdb ) * 50. * ( (seeds.w+.75)*4.);\n\n        pos = mod( pos-cameraPosition, PROX) + cameraPosition - PROX*.5;\n        pos+=positionOffset;\n        \n        \n        float pScalar = clamp( (1.-length(pos-cameraPosition )*PROX_INV) * FadeOutScalar, 0.0, 1.0  );\n        float aMult = min(1.0, pScalar*3.0);\n        vAlpha = (seeds.x*.5+.7) * aMult;\n\n  ",n.hasLights&&(t+="\n      #if NUM_POINT_LIGHTS > 0\n        float lightInf = 1.0;\n        for(int x = 0; x < NUM_POINT_LIGHTS; ++x ){\n            vec3 lightVector = normalize(pos - pointLights[i]);\n            lightInf = min(lightInf, length(pos - pointLights[i]) *.05 );\n        }\n        vAlpha*=(1.0-lightInf)*.8+.2;\n      #endif\n    "),t+="\n        vScalar = pScalar * ParticleOpacity ;\n        float pScale = pointScale.x * (seeds.w*.5+.5)*pScalar + 1.0;\n        pScale *= 1.0 - clamp( ((1.0-pScalar)-.5)*10.0 * FadeOutScalar, 0.0, 1.0 );\n        pScale *= step( .5, atlas.x )*.5+1.;\n\n        gl_PointSize = pScale;\n        \n        vec4 mvPos=viewMatrix * vec4(pos, 1.0);\n        gl_Position = projectionMatrix*mvPos;\n    }"}function dustFrag(){var n="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return n+="\n    uniform sampler2D atlasTexture;\n    uniform sampler2D atlasAlphaTexture;\n    uniform vec2 time;\n    uniform float rate;\n    \n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vScalar;\n    varying float vAlpha;\n    \n    void main(){\n\n        if( vAlpha < .01 ){\n          discard;\n        }\n\n\n        vec2 uv=gl_PointCoord;\n\n        vec2 pos = (uv-.5)*.85;\n\n        vec2 rotUV;\n        rotUV.x = vRot.y * pos.x - vRot.x * pos.y;\n        rotUV.y = vRot.x * pos.x + vRot.y * pos.y;\n        rotUV=(rotUV+.5)*.25+vAtlas;\n\n      ",n+=arguments.length>0&&void 0!==arguments[0]&&arguments[0]?"\n        vec4 dustCd=vec4(\n                        texture2D(atlasTexture,rotUV).rgb, // rgb\n                        texture2D(atlasAlphaTexture,rotUV).r // alpha\n                      ); \n\n    ":"\n        vec4 dustCd= texture2D(atlasTexture,rotUV);\n\n    ",n+="\n        float alpha = dustCd.a * vAlpha * vScalar;\n        vec4 Cd=vec4( dustCd.rgb, alpha );\n\n        gl_FragColor=Cd;\n    }"}function heightMapVert(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e={pOpacity:1,proxDist:200,hasLights:!1,fadeOutScalar:1.59,wanderInf:1,wanderRate:1,wanderFrequency:2.85,jumpHeightMult:15};if(n&&"object"==typeof n){var o=Object.keys(n);Object.keys(e).forEach((t=>{o.includes(t)||(n[t]=e[t])}))}var toFloatStr=n=>(n+"").includes(".")?n:n+".0",t="\n    // Fade-Out Influence multiplier\n        const float ParticleOpacity = ".concat(toFloatStr(n.pOpacity),";\n        const float FadeOutScalar = ").concat(toFloatStr(n.fadeOutScalar),";\n        const float WanderInf = ").concat(toFloatStr(n.wanderInf),";\n        const float WanderRate = ").concat(toFloatStr(n.wanderRate),";\n        const float WanderFrequency = ").concat(toFloatStr(n.wanderFrequency),";\n        const float JumpHeightMult = ").concat(toFloatStr(n.jumpHeightMult),";\n\n        #define PROX ").concat(n.proxDist.toFixed(3),"\n        #define PROX_INV 1.0/").concat((.95*n.proxDist).toFixed(3),"\n\n    // -- -- --\n  ");return t+="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ",t+="\n    // -- -- --\n\n    uniform sampler2D heightMap;\n    uniform sampler2D spawnMap;\n    uniform vec3 tankSize;\n    \n    uniform sampler2D noiseTexture;\n    uniform vec2 time;\n    uniform float rate;\n    uniform vec2 pointScale;\n    uniform vec3 positionOffset;\n    uniform vec3 windDir;\n  ",n.hasLights&&(t+="\n  #if NUM_POINT_LIGHTS > 0\n    struct PointLight {\n      vec3 color;\n      float decay;\n      float distance;\n      vec3 position;\n    };\n    uniform PointLight pointLights[NUM_POINT_LIGHTS];\n  #endif\n    "),t+="\n    \n    attribute vec4 seeds;\n    attribute vec2 atlas;\n    \n    varying vec3 vCd;\n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vAlpha;\n    \n    \n    // -- -- --\n\n    float colDetect( vec2 pos, vec2 pt, vec2 n1, vec2 n2 ){\n        vec2 ref=pos-pt;\n        float ret = step( dot( ref, n1 ), 0.0 );\n        ret *= step( dot( ref, n2 ), 0.0 );\n        \n        return ret;\n    }\n    \n    vec3 randomVec( vec3 seed ) {\n      return vec3(\n        fract( dot(seed,vec3(12.9898, 78.233, 45.164)) * 43758.5453 ),\n        fract( dot(seed,vec3(93.9898, 67.345, 12.345)) * 43758.5453 ),\n        fract( dot(seed,vec3(54.123, 98.765, 32.123)) * 43758.5453 )\n      );\n    }\n\n    // -- -- --\n    \n    #define oneThird 0.3333333333333333\n    #define srgbLow 1.0 / 12.92\n    #define srgbHigh 1.0 / 1.055\n\n    vec3 sRGBToLinear(vec3 srgb) {\n      return vec3(\n        mix( srgb.r * srgbLow,  pow((srgb.r + 0.055) * srgbHigh, 2.4), step(0.04045, srgb.r) ),\n        mix( srgb.g * srgbLow,  pow((srgb.g + 0.055) * srgbHigh, 2.4), step(0.04045, srgb.g) ),\n        mix( srgb.b * srgbLow,  pow((srgb.b + 0.055) * srgbHigh, 2.4), step(0.04045, srgb.b) )\n      );\n    }\n\n    void main(){\n      vAtlas=atlas;\n      \n      float rot=seeds.z+time.x*(seeds.z*2.);\n      vRot=vec2( sin(rot), cos(rot) );\n      \n      float t=time.x*rate;\n      vec2 sizeXZ = tankSize.xz;\n      vec2 scaleXZ = 1.0 / (sizeXZ);\n      \n      vec3 pOff= (seeds.xyz - vec3(0.5,0.0,0.5)) * vec3(PROX);\n      \n      \n      // Loop point positions based on camera location\n      float yFract=fract(t+seeds.x);\n      pOff.xyz += time.x * windDir.xyz; \n      vec3 pos= pOff ;\n      \n      vec3 noiseCd=texture2D(noiseTexture, sin(pos.xz*.05+seeds.xz+(time.x + seeds.y)*2.1) ).rgb-.5;\n      vec3 noiseCdb=texture2D(noiseTexture, sin((1.0-pos.xz)*.05+seeds.yw+time.x*.1) ).rgb-.5;\n      \n      // -- -- --\n      \n      // Meandering points\n      \n      \n      vec3 randDirA = randomVec( seeds.xyz );\n      vec3 randDirB = randomVec( seeds.wyz );\n      vec3 randDirC = randomVec( seeds.zxy );\n      vec3 randDirBlend = mix( randDirA, randDirB, sin( randDirC * (time.x + seeds.w) * WanderFrequency ) ) * WanderInf;\n      \n      float jumpHeight = randDirBlend.y * abs(max(noiseCd.x,noiseCd.y));\n      \n      // -- -- --\n      \n\n      pos += randDirBlend * sin( seeds.x+seeds.z+noiseCd.r*noiseCd.g*seeds.y+noiseCdb.b + (time.x+seeds.y*10.) * WanderRate * seeds.w*noiseCdb.g ) * WanderRate * ( 5. + seeds.z );\n      pos += (noiseCd * noiseCdb ) * 50. * ( (seeds.w+.75)*4.);\n\n      vec3 mPos = modelMatrix[3].xyz;\n      pos.xz = mod( pos.xz - cameraPosition.xz , PROX) + cameraPosition.xz - PROX*.5 + positionOffset.xz;\n      \n      \n      vec2 fitPos = clamp( ( pos.xz - mPos.xz  ) * scaleXZ + .5, vec2(0.0), vec2(1.0));\n\n      \n      vec3 heightCd=texture2D(heightMap, fitPos ).rgb;\n      vec2 spawnOffset = vec2( 0.0161 );\n      float spawnInf= min(1.0, texture2D(spawnMap, fitPos ).r +\n                      texture2D(spawnMap, fitPos + spawnOffset ).r +\n                      texture2D(spawnMap, fitPos - spawnOffset ).r );\n      heightCd = sRGBToLinear( heightCd );\n      float heightVal = heightCd[0] * oneThird + heightCd[1] * oneThird + heightCd[2] * oneThird;\n\n      pos.y = tankSize.y * heightVal + mPos.y;\n      pos.y += max(1.0, (jumpHeight + positionOffset.y) * JumpHeightMult * WanderInf);\n      \n      \n      float pScalar = clamp( (1.-length(pos-cameraPosition )*PROX_INV) * FadeOutScalar, 0.0, 1.0  );\n      float aMult = min(1.0, pScalar*3.0);\n      vAlpha = min( 1.0, (seeds.x*.5+.75) * aMult * spawnInf * 2.5 * ParticleOpacity );\n\n  ",n.hasLights&&(t+="\n      #if NUM_POINT_LIGHTS > 0\n        float lightInf = 1.0;\n        for(int x = 0; x < NUM_POINT_LIGHTS; ++x ){\n            vec3 lightVector = normalize(pos - pointLights[i]);\n            lightInf = min(lightInf, length(pos - pointLights[i]) *.05 );\n        }\n        vAlpha*=(1.0-lightInf)*.8+.2;\n      #endif\n\n    "),t+="\n        float pScale = pointScale.x * seeds.z * pScalar;\n        pScale *= 1.0 - clamp( ((1.0-pScalar)-.5)*10.0 * FadeOutScalar, 0.0, 1.0 );\n        pScale *= step( .5, atlas.x ) ;\n\n        gl_PointSize = pScale;\n        \n        vec4 mvPos=viewMatrix * vec4(pos, 1.0);\n        gl_Position = projectionMatrix*mvPos;\n    }"}function heightMapFrag(){var n="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return n+="\n    uniform sampler2D atlasTexture;\n    uniform sampler2D atlasAlphaTexture;\n    uniform vec2 time;\n    uniform float rate;\n    \n    varying vec3 vCd;\n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vAlpha;\n    \n    void main(){\n\n        if( vAlpha < .01 ){\n          discard;\n        }\n\n\n        vec2 uv=gl_PointCoord;\n\n        vec2 pos = uv*.25-.125;\n        float vis = max(0.0, 1.0-max(0.0,length(pos)-.09)*20.);\n\n        vec2 rotUV;\n        rotUV.x = vRot.y * pos.x - vRot.x * pos.y;\n        rotUV.y = vRot.x * pos.x + vRot.y * pos.y;\n        rotUV=(rotUV+.125) + vAtlas;\n\n      ",n+=arguments.length>0&&void 0!==arguments[0]&&arguments[0]?"\n        vec4 dustCd=vec4(\n                        texture2D(atlasTexture,rotUV).rgb, // rgb\n                        texture2D(atlasAlphaTexture,rotUV).r // alpha\n                      ); \n\n    ":"\n        vec4 dustCd= texture2D(atlasTexture,rotUV);\n\n    ",n+="\n        float alpha = min(1.0, dustCd.a*1.5) * vAlpha * vis;\n        vec4 Cd=vec4( dustCd.rgb, alpha );\n\n        gl_FragColor=Cd;\n    }"}function smokeVert(){return"\n// Billowy goodness!\n  const float BaseSpread = 200.0;\n  const float SmokeBrightness = 0.65;\n  const float InnerBulster = -0.05;\n  const float SmokeDensity = 0.12;\n  const float WindInfluenceBoost = .45;\n\n  const float TightenBaseSpread = 1.0;\n  const float TightenMidSpread = 0.08;\n  const float TightenTipSpread = 0.20;\n\n  // -- -- --\n  \n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n         \n\n  // -- -- --\n         \n    uniform sampler2D noiseTexture;\n    uniform vec2 time;\n    uniform float rate;\n    uniform vec3 windDir;\n    uniform vec3 offsetPos;\n    uniform vec2 pointScale;\n    uniform vec3 sliders;\n    \n    attribute vec4 seeds;\n    attribute vec2 atlas;\n    \n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vAlpha;\n    varying float vBrightness;\n    \n    \n    #define PROX 6.0\n    \n    \n    float colDetect( vec2 pos, vec2 pt, vec2 n1, vec2 n2 ){\n      vec2 ref=pos-pt;\n      float ret = step( dot( ref, n1 ), 0.0 );\n      ret *= step( dot( ref, n2 ), 0.0 );\n      \n      return ret;\n    }\n     \n        \n    void main(){\n      vAtlas=atlas;\n      \n      float rot=seeds.z+time.x*(seeds.z*2.);\n      vRot=vec2( sin(rot), cos(rot) );\n      \n      vec3 pOff=vec3(seeds.z, seeds.y, seeds.w) ;\n      \n      vec2 sinUV=abs(sin(pOff.xz*.5+seeds.zw+time.x*.1)*.5+.5);\n      vec3 noiseCd=texture2D(noiseTexture, sinUV ).rgb*4.5 + 0.50;\n      \n      float t=time.x*rate;\n      float shiftY= mod( t+t*seeds.x+seeds.z*24.0+noiseCd.r+noiseCd.b+(seeds.x+seeds.y)*2.0, 14.0);\n      float life = max(0.0,(shiftY-seeds.x)*0.07142857142857142)*.9+.2;\n      float alphaMult = (1.0-(1.0-life)*(1.0-life))*SmokeDensity;\n      \n      pOff.y=shiftY*seeds.y*life - (1.0-life);\n      \n      pOff.y=(pOff.y)+shiftY; \n      vec3 pos= pOff ;\n      \n      \n      // Magic numbers!  Boo!!\n      float tightenTip = max(0.0,life-.73);\n      tightenTip = 1.0 - (1.0-tightenTip) * (1.0-tightenTip);\n      //tightenTip *= tightenTip;\n      float tightenBase = max(0.0, (1.0-life)*InnerBulster);\n      float tightenMid = max(0.0, TightenBaseSpread - tightenTip - tightenBase - seeds.x*.2);\n      \n      float curBaseSpread = BaseSpread * tightenBase +\n                            BaseSpread * tightenMid * TightenMidSpread +\n                            BaseSpread * tightenTip * TightenTipSpread ;\n      \n      //pos.xz=clamp((noiseCd.rg*noiseCd.b)*seeds.w, vec2(0.0), vec2(1.0))*curBaseSpread*(life*(seeds.zy*.6));\n      pos.xz=(noiseCd.rg*noiseCd.b)*seeds.w*curBaseSpread*life;\n      \n      // Wind -- Forces\n      //   Magic numbers, yarb!\n      float windInf = life * life * (life*.5+.5);\n      vec2 curWindDir = windInf * windDir.xz ;\n      \n      float yPush = ( life * (life*.5+.5))* min(1.0,pos.y*.12) * .08;\n      pos.xz += curWindDir*life + curWindDir * WindInfluenceBoost + offsetPos.xz ;\n      \n      \n      // Alpha with cam distance inf\n      float pScalar = 1.0-min( 1.0, (length(pos-cameraPosition )*0.004) );\n      pScalar=1.0-(pScalar*pScalar);\n      float aMult = min(1.0, pScalar*2.0);\n      vAlpha = (seeds.x*.5+.7) * aMult;\n\n      \n      // Alpha from gettin' old\n      vAlpha=(1.0-life)*min(1.0,alphaMult);\n      vec3 doubleCd=texture2D(noiseTexture, sinUV+pos.xz*.5+vec2(seeds.y,pos.y)).rgb ;\n      pos.xz=(pos.xz*(0.9+seeds.xy*.2)+doubleCd.rb*10.0)*min(1.0,life+seeds.y);\n      \n      \n      // Draw size, particle scale\n      pScalar = 1.0-(1.0-pScalar)*.75*(1.0-pScalar);\n      float pScale = pointScale.x * seeds.w * 0.6 * pScalar + (175.0+125.0*life*pScalar)*(1.0-pScalar);\n      pScale += 150.0*(clamp(-(pScalar-.45)*10.0,0.0,1.0));\n\n      gl_PointSize = pScale;\n      \n      // Brightness multiplier\n      vBrightness = 1.0-tightenMid*.1 - tightenTip + tightenBase;\n      float originDelta = length(pos)*(-InnerBulster);\n      vBrightness *= max(0.0, 1.0-originDelta * life * 0.807) * SmokeBrightness;\n      \n      \n      // Add Particle System position\n      pos += modelMatrix[3].xyz + vec3( -1.1, 0.0, 0.67);\n      \n      vec4 mvPos=viewMatrix * vec4(pos, 1.0);\n      gl_Position = projectionMatrix*mvPos;\n    }"}function smokeFrag(){var n="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return n+="\n    // -- -- --\n    \n    uniform sampler2D atlasTexture;\n    uniform sampler2D atlasAlphaTexture;\n    uniform vec2 time;\n    uniform float rate;\n    \n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vAlpha;\n    varying float vBrightness;\n    \n\n    // -- -- --\n    \n    // Human Eye Adjusted Luminance\n    //   https://en.wikipedia.org/wiki/Grayscale\n    float luma(vec3 color) {\n      return dot( color, vec3(0.2126, 0.7152, 0.0722) );\n    }\n      \n    // -- -- --\n      \n\n    void main(){\n        vec2 uv=gl_PointCoord;\n\n        vec2 pos = (uv-.5)*.85;\n\n        vec2 rotUV;\n        rotUV.x = vRot.y * pos.x - vRot.x * pos.y;\n        rotUV.y = vRot.x * pos.x + vRot.y * pos.y;\n        rotUV=(rotUV+.5)*.25+vAtlas;\n        \n      ",n+=arguments.length>0&&void 0!==arguments[0]&&arguments[0]?"\n        vec4 dustCd=vec4(\n                        texture2D(atlasTexture,rotUV).rgb, // rgb\n                        texture2D(atlasAlphaTexture,rotUV).r // alpha\n                      ); \n\n    ":"\n        vec4 dustCd= texture2D(atlasTexture,rotUV);\n\n    ",n+="\n        float alpha=dustCd.a*vAlpha;\n        vec4 Cd=vec4( dustCd.rgb, alpha );\n\n        float lumaCd = luma( Cd.rgb );\n\n        Cd.rgb = mix( vec3( lumaCd ), Cd.rgb, vBrightness*.2 );\n\n        Cd.rgb *= vec3(vBrightness);\n        //Cd.rgb *= Cd.rgb*.5+.5;\n        \n        gl_FragColor=Cd;\n    }"}function snowFallVert(){var n="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return n+="\n    uniform vec2 time;\n    uniform float rate;\n    uniform float pointScale;\n    \n    attribute vec4 seeds;\n    attribute vec2 atlas;\n    \n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vScalar;\n    \n    #define PROX 1000.0\n    #define LAND 50.0\n    \n    float colDetect( vec2 pos, vec2 pt, vec2 n1, vec2 n2 ){\n        vec2 ref=pos-pt;\n        float ret = step( dot( ref, n1 ), 0.0 );\n        ret *= step( dot( ref, n2 ), 0.0 );\n        \n        return ret;\n    }\n    \n    \n    void main(){\n        vAtlas=atlas;\n        \n        float rot=seeds.z+time.x*(seeds.z*2.);\n        vRot=vec2( sin(rot), cos(rot) );\n        \n        float t=time.x*rate;\n        \n        vec3 pOff=vec3( seeds.x, 0, seeds.y)* vec3(PROX);\n        \n        // Loop point positions based on camera location\n        float yFract=fract(t+seeds.z);\n        pOff.y=PROX-yFract*(PROX+LAND); \n        vec3 pos= pOff ;\n        vec2 camXZ=cameraPosition.xz;\n        pos.xz= mod( pos.xz-camXZ, PROX) + camXZ - PROX*.5;\n        \n        \n        // Get some roof tops working\n        //   Using opposing points and 2 normals in xz space to determin y floor position\n        // Find rooves from xz pos + dot products\n        float floor=0.0;\n    ",!(arguments.length>0&&void 0!==arguments[0]&&arguments[0])&&(n+="\n        // -- --\n        vec2 lp1=vec2( -186.0, -1002.0 ); // Point 1\n        vec2 l1n1=vec2(-.1,1.); // Normal 1\n        vec2 l1n2=vec2(1.,-.1); // Normal 2\n        vec2 lp2=vec2( -1101.0, -1720.0 ); // Point 2\n        vec2 l2n1=vec2(.1,-1.1);\n        vec2 l2n2=vec2(-1.,.1);\n        floor = max( floor, 170.0*colDetect( pos.xz, lp1,l1n1,l1n2 ) * colDetect( pos.xz, lp2,l2n1,l2n2 ) ); // Lobby roof\n\n        lp1=vec2( -217.0, 786.0 ); // Point 1\n        l1n1=vec2(.2,-1.); // Normal 1\n        l1n2=vec2(1.,.1); // Normal 2\n        lp2=vec2( -940.0, 1293.0 ); // Point 2\n        l2n1=vec2(-.2,1.);\n        l2n2=vec2(-1.,-.1);\n        floor = max( floor, 500.0*colDetect( pos.xz, lp1,l1n1,l1n2 ) * colDetect( pos.xz, lp2,l2n1,l2n2 ) ); // sunflower roof\n\n        lp1=vec2( 204.028, 56.7629 ); // Point 1\n        l1n1=vec2( 0.152344, -0.988327 ); // Normal 1\n        l1n2=vec2( -0.999862, 0.0165819 ); // Normal 2\n        lp2=vec2( 755.264, 754.843 ); // Point 2\n        l2n1=vec2( -0.160366, 0.987058 );\n        l2n2=vec2( 0.999849, 0.0173488 );\n        floor = max( floor, 150.0*colDetect( pos.xz, lp1,l1n1,l1n2 ) * colDetect( pos.xz, lp2,l2n1,l2n2 ) ); // sunflower roof\n        "),n+="  \n        // Prevent snow drifting after hitting the ground\n        float yLimit=max( floor, pos.y ) * .08 * seeds.z;\n        pos.xz+=vec2( sin(pos.x+yLimit*seeds.x), sin(pos.z+pos.x+yLimit*seeds.y) )*10.; // Snow sway in the sky\n        \n        // Shift Y position per camera height\n        pos.y+=cameraPosition.y-yFract*(cameraPosition.y); \n        pos.y=max( floor+1.5, pos.y );\n        \n        float melt=min(1.0, (pOff.y+LAND-floor)*.02);\n        float pScalar = max( 0., (1.-length(pos-cameraPosition )*0.001) * melt );\n        \n        vScalar = pScalar;\n        float pScale = pointScale * seeds.w * pScalar ;\n        gl_PointSize = pScale;\n        \n        vec4 mvPos=viewMatrix * vec4(pos, 1.0);\n        gl_Position = projectionMatrix*mvPos;\n    }"}function snowFallFrag(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D snowTexture;\n    uniform vec2 time;\n    uniform float rate;\n    \n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vScalar;\n    \n    void main(){\n        vec2 uv=gl_PointCoord;\n\n        vec2 pos = uv-.5;\n\n        vec2 rotUV;\n        rotUV.x = vRot.y * pos.x - vRot.x * pos.y;\n        rotUV.y = vRot.x * pos.x + vRot.y * pos.y;\n        rotUV=(rotUV+.5)*.25+vAtlas;\n        \n        float alpha=texture2D(snowTexture,rotUV).r * vScalar;\n        vec4 Cd=vec4( vec3(1.), alpha );\n\n        gl_FragColor=Cd;\n    }"}function worldPositionVert(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n  varying vec3 pos;\n  \n  void main(){\n    vec3 transformed = vec3( position );\n      vec4 mvPosition = modelViewMatrix  * vec4( transformed, 1.0 );\n    pos=((projectionMatrix * modelMatrix * vec4( transformed-vec3(0.0,0.0,-500.0), 1.0 )).xyz*.0001)*.5+.5;\n    \n    gl_Position = projectionMatrix * mvPosition;\n  }"}function worldPositionFrag(){var n="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return n="#include <packing>\n  "+n,n+="\n    uniform sampler2D diffuse;\n    uniform sampler2D depth;\n    uniform float camNear;\n    uniform float camFar;\n    varying vec3 pos;\n    \n    void main() {\n      \n      vec4 Cd=vec4( pos, 1.0 );\n      gl_FragColor = Cd;\n    }"}function glowPassPostProcess(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform sampler2D gDiffuse;\n    uniform sampler2D rDiffuse;\n    uniform sampler2D sceneDepth;\n    uniform vec2 time;\n    uniform vec2 ratio;\n    varying vec2 vUv;\n\n        #define PI 3.14159265358979\n        \n    void main() {\n      vec4 Cd=texture2D( tDiffuse, vUv );\n      vec4 gCd=texture2D( gDiffuse, vUv );\n      vec4 rCd=texture2D( rDiffuse, vUv );\n      \n      Cd.rgb=gCd.rgb + gCd.rgb*length(gCd.rgb) + rCd.rgb  + Cd.rgb ;\n\n      Cd.a=1.0;\n      gl_FragColor = Cd;\n    }"}function textureStorePass(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform sampler2D tDiffusePrev;\n    uniform sampler2D tDiffusePrevRoom;\n    uniform float roomComposer;\n    varying vec2 vUv;\n        \n    void main() {\n      vec4 Cd = texture2D( tDiffusePrev, vUv );\n      vec3 prevRoomCd = texture2D( tDiffusePrevRoom, vUv ).rgb;\n      Cd.rgb=mix( Cd.rgb, prevRoomCd, roomComposer);\n      //Cd.rgb=Cd.rgb + prevRoomCd;\n      Cd.a=1.0;\n      gl_FragColor = Cd;\n    }"}function compLayersPostProcess(){return"\n    uniform sampler2D tDiffuse;\n    uniform sampler2D mtDiffuse;\n    uniform sampler2D sceneDepth;\n    uniform sampler2D noiseTexture;\n    uniform float exposure;\n    uniform vec2 camRotPitch;\n    uniform vec2 time;\n    varying vec2 vUv;\n\n    void main() {\n      vec4 Cd=texture2D(tDiffuse,vUv)*exposure;\n      vec4 mBlurCd=texture2D(mtDiffuse,vUv)*exposure;\n      vec4 depth=texture2D(sceneDepth,vUv);\n      \n  ////////////////////////\n  /*\n      vec2 uv=vUv;\n      float pi=3.14159265358979;\n      float t=-time.x*.007;\n      float pitch=camRotPitch.y;//depth.w*2.0-1.0;\n      float yaw=camRotPitch.x;\n      \n      float distMult=depth.x*2.0;\n      vec2 noiseUV=vec2(fract(uv.x*distMult+t+yaw), fract(uv.y*distMult+pitch));\n      vec3 noiseCd=texture2D(noiseTexture,noiseUV).rgb;\n      noiseUV=vec2(fract(uv.x*distMult+t*.5+yaw), fract(uv.y*.5*distMult+t*.25+pitch));\n      noiseCd.g=texture2D(noiseTexture,noiseUV).g;\n      noiseUV=vec2(fract(uv.x*.8*distMult+t*1.3+yaw), fract(uv.y*.3*distMult+t*.5+ pitch + depth.x*2.0));\n      noiseCd.b=texture2D(noiseTexture,noiseUV).b;\n      float mult=noiseCd.x*noiseCd.y*noiseCd.z*1.3;\n      mult*=max(0.0, 1.0-depth.x) + (1.0-depth.z*.6);\n      \n      float bg=length(depth.rgb)<.02 ? 0.0 : 1.0;\n      float bval=length(bloomCd.rgb);\n      mult= mult*(bg+bval) ;//*(1.0-depth.z);\n      Cd.rgb= mix( Cd.rgb, vec3(mult*.2), mult );\n      */\n      \n      Cd.rgb+=mBlurCd.rgb;\n      Cd.a=1.0;\n      gl_FragColor = Cd;\n    }"}function crossAntiAliasPass(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform vec2 resUV;\n    uniform float ratio;\n    uniform vec3 gamma;\n    varying vec2 vUv;\n\n    // 1/4 ==  0.25\n    //  + 2 center samples, 1/6 ==  0.166...\n    #define AADIV 0.1666666666666666\n    const int runCount = 4;\n    const vec2 runDir[4] = vec2[4](\n                              vec2( -1.0, -1.0 ),\n                              vec2( -1.0, 1.0 ),\n                              vec2( 1.0, -1.0 ),\n                              vec2( 1.0, 1.0 )\n                            );\n\n    void main() {\n      vec4 Cd=texture2D(tDiffuse,vUv)*2.0;\n            \n      float dist = 1.0;\n      vec2 baseUV=vUv;\n      vec2 curUV;\n      vec3 curCd;\n      for(int s=0; s<runCount; ++s){\n        curUV = baseUV+runDir[s]*(resUV);//*dist);\n        curCd = texture2D(tDiffuse,curUV).rgb;\n        Cd.rgb+=curCd;\n      }\n      Cd.rgb=Cd.rgb*AADIV;\n      Cd.a=1.0;\n      \n      //Cd.rgb = pow(Cd.rgb, vec3(gamma.x));\n      Cd.rgb = vec3(1.0)-(vec3(1.0)-Cd.rgb)*gamma.y + Cd.rgb*(1.0-min(1.0,length(Cd.rgb)))*gamma.z;\n      gl_FragColor = Cd;\n    }"}function boxAntiAliasPass(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform vec2 resUV;\n    uniform float ratio;\n    uniform vec3 gamma;\n    varying vec2 vUv;\n\n    // 1/8 ==  0.125\n    //  + 2 center samples, 1/10 ==  0.1\n    #define AADIV 0.1\n    const int runCount = 8;\n    const vec2 runDir[8] = vec2[8](\n                              vec2( -1.0, -1.0 ),\n                              vec2( -1.0, 1.0 ),\n                              vec2( 1.0, -1.0 ),\n                              vec2( 1.0, 1.0 ),\n\n                              vec2( -1.0, 0.0 ),\n                              vec2( 0.0, -1.0 ),\n                              vec2( 0.0, 1.0 ),\n                              vec2( 1.0, 0.0 )\n                            );\n\n    void main() {\n      vec4 Cd=texture2D(tDiffuse,vUv)*2.0;\n            \n      float dist = 1.0;\n      vec2 baseUV=vUv;\n      vec2 curUV;\n      vec3 curCd;\n      for(int s=0; s<runCount; ++s){\n        curUV = baseUV+runDir[s]*(resUV);//*dist);\n        curCd = texture2D(tDiffuse,curUV).rgb;\n                Cd.rgb+=curCd;\n      }\n      Cd.rgb=Cd.rgb*AADIV;\n      Cd.a=1.0;\n      \n      //Cd.rgb = pow(Cd.rgb, vec3(gamma.x));\n      Cd.rgb = vec3(1.0)-(vec3(1.0)-Cd.rgb)*gamma.y + Cd.rgb*(1.0-min(1.0,length(Cd.rgb)))*gamma.z;\n      gl_FragColor = Cd;\n    }"}function directionalBlurPass(n,e,o,t){var r="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return r+="\n        uniform sampler2D tDiffuse;\n        uniform sampler2D pDiffuse;\n        uniform vec2 resUV;\n        varying vec2 vUv;\n  \n        #define PI 3.14159265358979\n        \n        void main() {\n          \n          float dist = 2.0;\n          float fade = 1.0;\n          vec2 baseUV=vUv;\n            \n          const int blurCount=".concat(o,";\n          const int runCount=2;\n          vec2 runDir[runCount];\n          runDir[0]=vec2(").concat(e[0],".0, ").concat(e[1],".0);\n          runDir[1]=vec2(-").concat(e[0],".0, -").concat(e[1],".0);\n          vec2 curUV;\n          vec4 curCd;\n          vec4 blurCd=vec4(.0);\n          for(int b=0; b<blurCount; ++b){\n            dist = 1.0 + float(b)*").concat(t,";\n            fade = (1.0-float(b+1)/float(blurCount+2));\n            //fade = 1.- (1.-fade)*(1.-fade);\n            for(int s=0; s<runCount; ++s){\n              curUV = baseUV+runDir[s]*(resUV*dist);\n              curUV = min( vec2(1.), max( vec2(0.), curUV ));\n              curCd = texture2D(").concat(n,",curUV);\n              curCd.a *= fade*(length(curCd.rgb)*.6);\n              blurCd.r = max( blurCd.r, curCd.r );\n              blurCd.g = max( blurCd.g, curCd.g );\n              blurCd.b = max( blurCd.b, curCd.b );\n              //blurCd.rgb += curCd.rgb;\n              blurCd.a = max( blurCd.a, curCd.a );\n            }\n          }\n          vec4 Cd=blurCd;\n          //Cd.a=.01;\n          gl_FragColor = Cd;\n        }")}function mixBlurShaderPass(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        uniform sampler2D tDiffuse;\n        uniform sampler2D pDiffuse;\n        uniform vec2 resUV;\n        varying vec2 vUv;\n        \n        #define PI 3.14159265358979\n        \n        void main() {\n\n          float dist = 3.0;\n          float fade = 1.0;\n          vec2 baseUV=vUv;\n          const int blurCount=3;\n          const int runCount=8;\n          vec2 runDir[runCount];\n          runDir[0]=vec2(1.0, 0.0);\n          runDir[1]=vec2(1.0, 1.0);\n          runDir[2]=vec2(0.0, 1.0);\n          runDir[3]=vec2(-1.0, 1.0);\n          runDir[4]=vec2(-1.0, 0.0);\n          runDir[5]=vec2(-1.0, -1.0);\n          runDir[6]=vec2(0.0, -1.0);\n          runDir[7]=vec2(1.0, -1.0);\n          vec2 curUV;\n          vec4 curCd;\n          vec4 scatterCd=vec4(.0);\n          for(int b=0; b<blurCount; ++b){\n            dist = 1.5*(1.0+float(b));\n            fade = .1*(1.0-float(b)/float(blurCount));\n            for(int s=0; s<runCount; ++s){\n              curUV = baseUV+runDir[s]*(resUV*dist);\n              curCd = texture2D(pDiffuse,curUV);\n              curCd.a *= fade;\n              scatterCd.rgb += curCd.rgb;\n              scatterCd.a = max( scatterCd.a, curCd.a );\n            }\n          }\n          vec4 Cd=scatterCd;\n          \n          vec4 blurCd=texture2D(tDiffuse,vUv);\n          blurCd.rgb = normalize( blurCd.rgb );\n          \n          Cd = mix( blurCd, Cd, Cd.a);\n          Cd = texture2D(tDiffuse,vUv);\n          //Cd.a=.01;\n          gl_FragColor = Cd;\n        }"}function motionBlurPostProcess(n,e){var o="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return o+="\n    uniform sampler2D tDiffuse;\n    uniform sampler2D rDiffuse;\n    uniform sampler2D noiseTexture;\n    \n    uniform float exposure;\n    uniform vec2 time;\n    uniform vec3 camRotXYZ;\n    uniform vec2 blurDirCur;\n    uniform vec2 blurDirPrev;\n    varying vec2 vUv;\n\n    vec4 getTexture( sampler2D texelToLinearTexture ) {\n      return mapTexelToLinear( texture2D( texelToLinearTexture , vUv ) );\n    }\n    \n    vec3 directionalBlur(vec3 origCd, sampler2D tex, vec2 uv, vec2 dir, vec2 deltaDir, float dist, float thresh){\n      float perc;\n      float curPerc=1.0;\n      vec2 curUV;\n      float origLength=length(origCd.rgb);\n      vec3 curCd;\n      vec3 retCd=origCd;\n      float delta;\n      float threshTrigger=1.0;\n      float dropoff;\n      float percCurve;\n      float d=dot(dir,deltaDir)*.5+.5;\n      for(int r=0; r<10; ++r){\n        perc=(float(r)/10.0);\n        percCurve=perc*.5;\n        dropoff=(dist*float(r))*perc*d;\n        curUV=uv+normalize(deltaDir*percCurve+dir*(1.0-percCurve))*dropoff;\n        //curUV=uv+dir*dropoff;\n        curCd=texture2D(tex,curUV).rgb;\n        delta=length(curCd.rgb);\n        delta=origLength<delta?1.0-perc*perc:0.0;\n        //delta=1.0-perc*perc;\n        retCd+=curCd.rgb*delta;\n        curPerc+=delta;\n        \n        percCurve*=percCurve;\n        curUV=uv-normalize(-deltaDir*percCurve+dir*(1.0-percCurve))*dropoff*.4;\n        //curUV=uv-dir*dropoff*.4;\n        curCd=texture2D(tex,curUV).rgb;\n        delta=length(curCd.rgb);\n        delta=origLength<delta?1.0-perc*perc:0.0;\n        //delta=1.0-perc*perc;\n        retCd+=curCd.rgb*delta;\n        curPerc+=delta;\n        \n      }\n      return retCd /curPerc;\n    }\n\n    void main() {\n      \n      \n      vec4 bloomCd=getTexture( rDiffuse );\n      float noise=sin(time.x*1.8+vUv.x*length(bloomCd.rgb)*12.523+cos(time.x*.4+vUv.y*length(bloomCd.rgb)*2.352)*1.9)*.4+.8;\n      noise=1.0-min(1.0, max(0.0, noise*sin(time.x*.4+24.512)*3.0+1.0));\n      vec2 noiseUV=vUv*0.1;//+vec2(camRotXYZ.x+time.x*.05,-camRotXYZ.y);\n      vec4 noiseCd=texture2D(noiseTexture,noiseUV);\n      float blurDist=length(blurDirCur);\n      blurDist=min(1.0,blurDist*15.0);\n      //blurDist=(1.0-(1.0-blurDist)*(1.0-blurDist));\n      vec2 blurDir=normalize(blurDirCur);//+(vUv-.5)*2.0);",e||(o+="\n        blurDir=normalize( blurDir + (noiseCd.gb-.5)*(dot(blurDir,noiseCd.gb)*.5+.5) );\n      "),o+="\n      vec2 deltaDir=normalize(blurDirPrev);\n      deltaDir.x+=sin((blurDir.x-deltaDir.x));\n      deltaDir.y+=sin((blurDir.y-deltaDir.y));\n      \n      vec4 bloomAdd=vec4( directionalBlur(bloomCd.rgb, rDiffuse, vUv, blurDir, deltaDir, "+n.y+"*"+(e?"3.0":"5.0")+"*(1.5)*blurDist, .5)*(1.0+exposure*.4), 1.0);\n      vec4 Cd= bloomAdd* ( 0.50+bloomCd)*exposure;//getTexture( rDiffuse ) + bloomAdd;//+ vec4( 1.0 ) * bloomCd + bloomAdd;\n      //Cd.a=bloomAdd.a-bloomCd.a;\n      \n      Cd.a=1.0;\n      gl_FragColor = Cd;\n      \n    }"}function chroAberPostProcess(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform sampler2D chroAberUVTexture;\n    uniform sampler2D chroAberUVAlpha;\n    uniform vec2 ratio;\n\n    uniform vec2 warpMult;\n    uniform vec2 lKing;\n    \n    varying vec2 vUv;\n\n    void main() {\n      // I don't know, sRGB to Linear. Keeping it Linear doesn't work, PNG encoding to blame\n      vec4 caCd= vec4( \n        texture2D( chroAberUVTexture, vUv ).rgb - 0.7294118,\n        texture2D( chroAberUVAlpha, vUv ).r - 0.5019608\n      );\n      //caCd*=mix( .025, .018, length(caCd.rg)*4.0 );\n      caCd*=mix( lKing.x, lKing.y, length(caCd.rg)*4.0 )+warpMult.x;\n      \n      vec2 bUv=vUv+caCd.rg;\n      vec2 rUv=vUv+caCd.ba;\n      vec2 gUv=vUv+(caCd.rg+caCd.ba);\n      vec4 rCd=texture2D( tDiffuse, rUv );\n      vec4 Cd=texture2D( tDiffuse, gUv );\n      vec4 bCd=texture2D( tDiffuse, bUv );\n      \n      Cd.rgb=vec3( rCd.r, Cd.g, bCd.b );\n      Cd.a=1.0;\n      gl_FragColor = Cd;\n    }"}function lKingPostProcess(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform sampler2D noiseTexture;\n    uniform vec2 time;\n    uniform vec2 ratio;\n    varying vec2 vUv;\n\n        #define PI 3.14159265358979\n        \n    void main() {\n      vec4 Cd=texture2D( tDiffuse, vUv )*.2;\n      vec4 noiseCd= (texture2D( noiseTexture, vec2( fract(vUv.x*.2-time.x*.02+sin(time.x*.1+vUv.y*PI+Cd.r+Cd.g)),fract( vUv.y*.2+time.x*.01+cos(-time.x*.2+1.15+vUv.x*PI+Cd.g+Cd.b)) ) )-.5)*.025;\n      \n      vec2 bUv=vUv+noiseCd.rg;\n      vec2 rUv=vUv+noiseCd.gb;\n      vec2 gUv=vUv+noiseCd.br;\n      vec4 rCd=texture2D( tDiffuse, rUv );\n      vec4 gCd=texture2D( tDiffuse, gUv );\n      vec4 bCd=texture2D( tDiffuse, bUv );\n      \n      Cd.rgb=vec3( rCd.r, gCd.g, bCd.b );\n      Cd.a=1.0;\n      gl_FragColor = Cd;\n    }"}function iZoomPostProcess(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform sampler2D tDiffusePrev;\n    uniform sampler2D noiseTexture;\n    uniform vec2 time;\n    uniform vec2 ratio;\n    varying vec2 vUv;\n\n        #define PI 3.14159265358979\n        \n    void main() {\n      vec4 Cd=texture2D( tDiffuse, vUv );\n            vec4 pCd=texture2D( tDiffusePrev, vUv );\n            vec3 dCd=Cd.rgb-pCd.rgb;\n            vec3 b1Cd= texture2D( tDiffuse, vUv-vec2( dCd.rg*.1 ) ).rgb;\n            vec3 b2Cd= texture2D( tDiffusePrev, vUv+vec2( dCd.rg*.1 ) ).rgb;\n            b1Cd=mix( b1Cd, b2Cd, step( length(b1Cd), length(b2Cd) ) );\n            \n            vec4 outCd=vec4(1.0);\n            outCd.rgb= mix(  Cd.rgb, b1Cd, length(dCd) );\n            \n      vec3 noiseCd=texture2D( noiseTexture, fract( vUv*50.0+dCd.rg*.1 + length(Cd.rgb*30.0) + time.x) ).rgb;\n\n            outCd.rgb= mix( vec3(length(outCd.rgb)*.333-length(noiseCd)*.1), outCd.rgb, min(1.0,length(dCd))*.5+.5 );\n            outCd.rgb+= dCd.gbr;\n            \n            \n            \n      outCd.a=1.0;\n      gl_FragColor = outCd;\n    }"}function sFieldPostProcessVert(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform vec2 time;\n    varying vec2 vUv;\n    varying vec2 vUvShift;\n    varying vec2 starUv;\n    varying float vTimer;\n\n    void main(){\n        vUv=uv;\n        vUvShift=uv-.5;\n        \n        vec2 rUv=vUvShift*0.7071067811865476;\n        vec2 tmpUv=rUv;\n        float rot=time.x*.1;\n        vec2 sinCos=vec2( sin(rot), cos(rot) );\n        rUv.x=sinCos.x*tmpUv.x + sinCos.y*tmpUv.y;\n        rUv.y=sinCos.y*tmpUv.x - sinCos.x*tmpUv.y;\n        rUv=(rUv+.5);\n        \n        float starTimer=sin(time.x*.2)*.1+.1;\n        starUv=mix( vUv, rUv, starTimer);\n        \n        vTimer=time.x*.5;\n        \n        vec4 modelViewPosition=modelViewMatrix * vec4(position, 1.0);\n        gl_Position = projectionMatrix*modelViewPosition;\n    }"}function sFieldPostProcessFrag(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        uniform sampler2D tDiffuse;\n        uniform sampler2D starTexture;\n        varying vec2 vUv;\n        varying vec2 vUvShift;\n        varying vec2 starUv;\n        varying float vTimer;\n\n        #define PI 3.14159265358979\n        \n        void main() {\n            float uvDist=length(vUvShift);\n            \n            vec3 starCd=texture2D( starTexture, starUv ).rgb*uvDist;\n            \n            float blender=uvDist*starCd.b * abs((fract(starCd.b*PI+vTimer))*2.0-1.0)*.5;\n            vec2 starBlendUV=starCd.rg*blender;\n            \n            vec2 cdUv = vUv+starBlendUV;\n            vec4 Cd=texture2D( tDiffuse, cdUv );\n            \n            vec3 negCd= mix( Cd.brg, Cd.gbr, length(Cd.rgb-Cd.rgb) );\n            float cdBlender=step(.015,starBlendUV.x*uvDist)+starCd.b;\n            Cd.rgb= mix( Cd.rgb, negCd, cdBlender );\n            \n            gl_FragColor = Cd;\n        }"}function warpPostProcess(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform sampler2D noiseTexture;\n    uniform sampler2D animTexture;\n    uniform vec2 time;\n    uniform vec2 fader;\n    varying vec2 vUv;\n\n    void main() {\n      vec4 Cd=texture2D( tDiffuse, vUv );\n      vec4 animCd=texture2D( animTexture, vUv );\n      float timer=time.x*.2;\n      vec2 animUV=vec2( mod(animCd.r+Cd.r+Cd.g+timer, 1.0), mod(animCd.g+Cd.g+Cd.b+timer, 1.0) );\n      animCd=texture2D( animTexture, animUV );\n      \n      vec2 noiseUV=animUV+animCd.rg;\n      vec4 noiseCd=texture2D(noiseTexture,noiseUV);\n      noiseCd.rgb=vec3( length( noiseCd.rgb )*.5-.25 );\n      \n      float blend=fader.x*fader.y;\n      Cd=mix( Cd, noiseCd, blend);\n      \n      Cd.a=1.0;\n      Cd.r=1.0;\n      gl_FragColor = Cd;\n    }"}function finalOverlayHeavyShader(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        uniform sampler2D tDiffuse;\n        uniform sampler2D rDiffuse;\n        uniform sampler2D bloomTexture;\n        uniform sampler2D sceneDepth;\n        uniform sampler2D scenePos;\n        uniform sampler2D noiseTexture;\n        uniform vec3 camPos;\n        uniform vec2 time;\n        uniform vec2 fogMult;\n        uniform vec2 proximityMult;\n        uniform float ratio;\n        uniform float exposure;\n        varying vec2 vUv;\n\n        vec3 fogValue( vec3 worldPos, float time ){\n            float wpDist = worldPos.x+worldPos.z*2.0;\n            vec2 noiseUV = vec2( ((time*.5+wpDist*.60)), (worldPos.y*.7+time*.25 ));\n            vec3 noiseCd = texture2D(noiseTexture,noiseUV).rgb;\n            noiseUV=vec2( ((time*.3+wpDist*.55)), (worldPos.x*.5+time*.35 ));\n            noiseCd.g=texture2D(noiseTexture,noiseUV+vec2(0.0,time)).g;\n            noiseUV=vec2( ((time*1.2+wpDist*.83)), (worldPos.y+time*.15  ));\n            noiseCd.b=texture2D(noiseTexture,noiseUV).b;\n            \n            return noiseCd;\n        }\n\n        #define PROX_WARP 3.14159265358979*.45\n        \n        void main() {\n            vec4 Cd=texture2D(rDiffuse,vUv);\n            float depth=texture2D(sceneDepth,vUv).r;\n            \n            vec3 worldPos = texture2D(scenePos,vUv).rgb;\n            float t = -time.x*.003;\n            vec3 baseNoiseCd=fogValue( worldPos, t );\n            \n            float mult=0.0;\n            vec3 noiseCd;\n            vec3 curNoiseCd;\n            vec3 samplePos;\n            float samples=4.3;//+sin(time.x*.001);\n            float blender;\n            float blenderMax=0.0;\n            for( int x=0; x<=3; ++x){\n                blender=( float(x+1) / samples );\n                samplePos=worldPos*blender;\n                curNoiseCd=fogValue( samplePos, t );\n                noiseCd=max(noiseCd, curNoiseCd * blender );\n                blenderMax+=blender;\n            }\n            noiseCd += baseNoiseCd*.2;\n            mult= noiseCd.x*noiseCd.y*noiseCd.z*1.2;\n            //mult*=mult;\n            \n            // Distance Mapping\n            float proxWarp= cos(( vUv.x-.5 ) * PROX_WARP*ratio );\n            float mDepth= pow( depth, 28.*proxWarp );\n            \n            float fogDap= max(0.0, 1.0-mDepth);\n            fogDap=1.0-fogDap*fogDap;\n            mult*=max(0.0, (worldPos.y-0.04)*1.65) * fogMult.x * fogDap ;\n            \n            \n            Cd.rgb= mix( Cd.rgb, vec3(mult*.7), mult)-mult*.35;\n \n            vec3 bloomCd=texture2D(bloomTexture,vUv).rgb;\n            Cd.rgb+= bloomCd;\n            Cd.rgb*=exposure;\n            \n            // Proximity Draw Over\n            float dProx=  ((mDepth-.5)*-10.);\n            dProx= max(0.0, (1.0-dProx)*step( 0., dProx));\n            float yProxMult= 1.0-min(1.0, max(0.0, (worldPos.y-.5 )*1000.));\n            dProx*= dProx* yProxMult * proximityMult.x;\n            vec3 proxCd = (vec3(.5,.5,.2)*dProx)*.5;\n            Cd.rgb+=proxCd*mult;\n            \n            Cd.a=1.0;\n            gl_FragColor = Cd;\n    }"}function finalOverlayShader(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        uniform sampler2D tDiffuse;\n        uniform sampler2D rDiffuse;\n        uniform sampler2D bloomTexture;\n        uniform sampler2D sceneDepth;\n        uniform sampler2D scenePos;\n        uniform sampler2D noiseTexture;\n        uniform vec2 time;\n        uniform vec2 fogMult;\n        uniform vec2 proximityMult;\n        uniform vec2 lookAtPerc;\n        uniform vec2 resUV;\n        uniform float ratio;\n        uniform float exposure;\n        varying vec2 vUv;\n\n        #define PROX_WARP 3.14159265358979*.45\n\n        void main() {\n            vec4 Cd=texture2D(rDiffuse,vUv);\n            float depth=texture2D(sceneDepth,vUv).r;\n            \n            vec3 worldPos = texture2D(scenePos,vUv).rgb;\n            float wpDist = worldPos.x+worldPos.z*2.0;\n            float t = -time.x*.003;\n            \n            vec2 noiseUV = vec2( ((t*.5+wpDist*.60)), (worldPos.y*.7+t*.25 ));\n            vec3 noiseCd = texture2D(noiseTexture,noiseUV).rgb;\n            noiseUV=vec2( ((t*.3+wpDist*.55)), (worldPos.x*.5+t*.35 ));\n            noiseCd.g=texture2D(noiseTexture,noiseUV+vec2(0.0,t)).g;\n            noiseUV=vec2( ((t*1.2+wpDist*.83)), (worldPos.y+t*.15  ));\n            noiseCd.b=texture2D(noiseTexture,noiseUV).b;\n            \n            \n            // Distance Mapping\n            float proxWarp= cos(( vUv.x-.5 ) * PROX_WARP*ratio );\n            float mDepth= pow( depth, 28.*proxWarp );\n            \n            float fogDap= max(0.0, 1.0-mDepth);\n            fogDap=1.0-fogDap*fogDap;\n            float mult=noiseCd.x*noiseCd.y*noiseCd.z*1.3;\n            mult*=max(0.0, (worldPos.y-0.04)*1.65) * fogMult.x * fogDap;\n            \n            \n            Cd.rgb= mix( Cd.rgb, vec3(mult), mult)-mult*.4;\n \n            vec3 bloomCd=texture2D(bloomTexture,vUv).rgb;\n            Cd.rgb+= bloomCd;\n            Cd.rgb*=exposure;\n            \n            // Proximity Draw Over\n            float dProx=  ((mDepth-.5)*-10.);\n            dProx= max(0.0, (1.0-dProx)*step( 0., dProx));\n            float yProxMult= 1.0-min(1.0, max(0.0, (worldPos.y-.5 )*1000.));\n            dProx*= dProx* yProxMult * proximityMult.x;\n            vec3 proxCd = (vec3(.5,.5,.2)*dProx)*.5;\n            Cd.rgb+=proxCd*mult;\n            \n            Cd.a=1.0;\n            gl_FragColor = Cd;\n        }"}function finalOverlaySlimShader(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        uniform sampler2D tDiffuse;\n        uniform sampler2D rDiffuse;\n        uniform sampler2D bloomTexture;\n        uniform sampler2D sceneDepth;\n        uniform vec2 time;\n        uniform vec2 proximityMult;\n        uniform vec2 lookAtPerc;\n        uniform vec2 resUV;\n        uniform float ratio;\n        uniform float exposure;\n        varying vec2 vUv;\n\n        #define PROX_WARP 3.14159265358979*.4\n        #define PI 3.14159265358979\n        \n        vec3 boostHighs( vec3 Cd ){\n            float sat=max(max(Cd.r,Cd.g),Cd.b) - min(min(Cd.r,Cd.g),Cd.b);\n            sat=(1.0-sat);\n            sat=1.0-sat*sat;\n            Cd+=Cd*sat;\n            return Cd;\n        }\n        \n        vec3 boostMids( vec3 Cd ){\n            float sat=max(max(Cd.r,Cd.g),Cd.b) - min(min(Cd.r,Cd.g),Cd.b);\n            sat=sin( sat*PI );\n            Cd+=Cd*sat;\n            return Cd;\n        }\n        \n        void main() {\n            vec4 Cd=texture2D(rDiffuse,vUv);\n            vec2 uv=vUv;\n            \n            vec3 bloomCd=texture2D(bloomTexture,uv).rgb;\n            bloomCd= mix( boostHighs(Cd.rgb), bloomCd,  step( 0.01, length( bloomCd )) );\n            \n            Cd.rgb+= bloomCd;\n\n            // Proximity Draw Over\n            float depth=texture2D(sceneDepth,vUv).r;\n            \n            // Distance Mapping\n            float proxWarp= cos(( vUv.x-.5 ) * PROX_WARP*ratio );\n            float mDepth= pow( depth, 28.*proxWarp );\n            \n            // Proximity Draw Over\n            float dProx=  ((mDepth-.5)*-10.);\n            dProx= max(0.0, (1.0-dProx)*step( 0., dProx));\n            dProx*= dProx * proximityMult.x;\n            vec3 proxCd = (vec3(.5,.5,.2)*dProx)*.5;\n            Cd.rgb+=proxCd;\n            Cd.r=1.0;\n            Cd.a=1.0;\n            gl_FragColor = Cd;\n        }"}function bgScreenVert(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform vec2 time;\n    \n    varying vec2 vUv;\n    varying vec3 vCamNormal;\n    varying vec3 vWorldNormal;\n    varying vec3 vWorldCross;\n    varying vec3 vSunPos;\n    \n    void main(){\n        vUv=uv;\n        \n        mat4 pvMat=projectionMatrix * viewMatrix;\n        pvMat[3] = vec4(.0, .0, .0, 1.0);\n        mat3 pvRot = inverse( mat3( pvMat ) );\n        vCamNormal= pvRot * vec3( position*.2 + vec3(.0, .0, 1.0));\n        vWorldNormal= normalize( pvRot[2] *vec3(1.,0.,1.));\n        vWorldCross= normalize( pvRot[0]*vec3(1.,0.,1.));\n        \n        float timeRate = time.x * .1;\n        vec3 sunPos = normalize( vec3(.3, 1.0, 1.0) );\n        vec3 sunRef = sunPos;\n        sunPos.y= sin(timeRate) * sunRef.y + cos(timeRate)*sunRef.z;\n        sunPos.z= sin(timeRate) * sunRef.z - cos(timeRate)*sunRef.y;\n        sunPos.x = sin( timeRate ) * .1;\n        \n        vSunPos = normalize( sunPos );\n        \n        vec4 modelViewPosition= vec4(position*2.0 + vec3(.0, .0, 1.0), 1.0);\n        gl_Position = modelViewPosition;\n    }"}function bgScreenFrag(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D noiseTexture;\n    varying vec2 vUv;\n    varying vec3 vCamNormal;\n    varying vec3 vWorldNormal;\n    varying vec3 vWorldCross;\n    varying vec3 vSunPos;\n    \n    void main(){\n        vec4 Cd=vec4( vec3(1.0, .10, .10), 1.0);\n        \n        float sunDot = dot( vSunPos, vCamNormal )*.5 +.5;\n        sunDot *= max(0.0, dot( vSunPos, vec3(.0, 1.0, .0)) );\n        \n        vec2 xOffset = vec2( .0, .0);\n        vec3 nCd=texture2D(noiseTexture,vUv*.1+vSunPos.zy*vec2(.15,.22) + xOffset ).rgb;\n        nCd*=texture2D(noiseTexture,vUv*.1+vSunPos.yx*.2).rgb;\n        sunDot *= nCd.x*nCd.y*nCd.z;\n        nCd= vec3( length( nCd ) );\n        \n        float mixVal= min(1.0, sunDot+(1.-(vWorldNormal.y*.5+.5)));\n        Cd.rgb= mix(vec3(0.0, .20, 1.0)+nCd*vWorldNormal.y, vec3(.0, .0, .0), mixVal);\n        Cd.rgb=mix( vec3(.0), Cd.rgb, vWorldNormal.y );\n        Cd.rgb=vec3(mix( vWorldNormal, vWorldCross, step(.4, vUv.x)));\n        Cd.rgb=vec3(mix( vWorldCross, Cd.rgb, step(vUv.y,.9)));\n        gl_FragColor=Cd;\n    }"}function skyObjectVert(){return"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform float camFar;\n    uniform vec2 resUV;\n    \n    varying vec2 vUv;\n    varying vec3 vN;\n    varying vec3 vLocalPos;\n    varying vec4 vWorldPos;\n    \n    void main(){\n        vUv=uv;\n        vLocalPos=position;\n        vN = normal;\n        \n        vec3 pos = position;\n        vec4 modelViewPosition=projectionMatrix * vec4(mat3(viewMatrix)*normalize(pos)*camFar, 1.0);\n        gl_Position = modelViewPosition;\n        \n        vWorldPos = modelViewPosition;\n        \n    }"}function skyObjectFrag(){var n="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return n+="     \n    uniform sampler2D diffuse;\n    uniform sampler2D noiseTexture;\n    uniform vec2 time;\n    uniform float camNear;\n    uniform float camFar;\n    uniform vec2 resUV;\n\n    uniform float rate;\n    uniform vec3 fogColor;\n    \n    varying vec2 vUv;\n    varying vec3 vN;\n    varying vec3 vLocalPos;\n    varying vec4 vWorldPos;\n    \n    #define PI 3.14159265358979323\n    \n    void main(){\n        vec2 uv=vUv;\n        vec2 screenUV=(vec2(vWorldPos.xy/vWorldPos.w))*.5+.5;\n        vec4 Cd=texture2D(diffuse,uv);\n\n  ",(arguments.length>0&&void 0!==arguments[0]?arguments[0]:c.OFF)==c.VAPOR&&(n+="\n\n        // -- -- -- -- -- -- -- -- --\n        // -- Horizon Vapor Code - -- --\n        // -- -- -- -- -- -- -- -- -- -- --\n\n        vec3 lPos = vLocalPos;\n        lPos.y = abs(lPos.y)*0.05;\n\n        float t = time.x*.6;\n\n        // Duel noise texture sampling\n        //   Creates a flowing vapor effect flowing through the noise texture\n        vec2 nUv =  vec2(vUv.x*0.40, vUv.y*.5 - t*.0065  - vN.y );\n        vec3 noiseBaseCd = texture2D( noiseTexture, nUv ).rgb;\n        nUv = ( nUv*vec2(1.0,.5)+noiseBaseCd.rg*(noiseBaseCd.b) + t*.02);\n        vec3 noiseCd = texture2D( noiseTexture, nUv ).rgb;\n        noiseCd.rg = noiseCd.rg*2.0-1.0;\n        \n        \n        float reachDepth = 0.0 ;\n        \n        // Calculate mask based on the local position\n        //   Assuming for a sky-box / sky-sphere object\n        vec3 normPos = normalize(vLocalPos);\n        normPos.y = 1.0-min(1.0,(normPos.y)*3.0);\n        normPos.y = normPos.y*normPos.y*normPos.y;\n        \n        // Noise-influence of the normal vector to drive the vapoe mask\n        reachDepth =  min(1.0, (vN.y * 1. * noiseCd.x  * max(noiseCd.y, noiseCd.z))) ;\n\n        float vaporMask = clamp(reachDepth+normPos.y * max(.95, noiseBaseCd.x*noiseBaseCd.z+vN.y*.5), 0.0, 1.0)*.1;\n        \n        float fogMixer = (Cd.r+Cd.g+Cd.b) - (fogColor.r+fogColor.g+fogColor.b) ;\n        vec3 toFogColor = mix(  Cd.rgb, fogColor,  fogMixer );\n        float blender = (sin(noiseCd.r*PI+t+uv.x))*max(0.0,1.0-(vaporMask+fogMixer))*.1 ;\n        vec3 baseColor = (toFogColor-min(1.0,blender+ vaporMask*10.0)) ;\n\n        Cd.rgb = mix(Cd.rgb, baseColor, vaporMask * step( -0.10, vN.y ));\n\n        // -- -- -- -- -- -- -- -- -- -- --\n        // -- End of Horizon Vapor -- --\n        // -- -- -- -- -- -- -- -- --\n\n    "),n+="\n\n        gl_FragColor=Cd;\n    }"}window.innerWidth,window.innerHeight})(),module.exports={}.default})();