(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.pxlNav = {}));
})(this, (function (exports) { 'use strict';

    var _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;
    /**
     * @license
     * Copyright 2010-2024 Three.js Authors
     * SPDX-License-Identifier: MIT
     */
    const t="171",i$1=0,r=1,n=2,a=0,h$1=1,l$1=2,c$1=3,u$1=0,d$1=1,p$1=2,m$1=0,y$1=1,f$1=2,g$1=3,x$2=4,b$1=5,v$1=100,w$1=101,M$1=102,S$1=103,_$1=104,A$1=200,T$1=201,z$1=202,C$1=203,I$1=204,B$1=205,k$1=206,E$1=207,R$1=208,P$1=209,O$1=210,F$1=211,N$1=212,L$1=213,V$1=214,W$1=0,U$1=1,j$1=2,D$1=3,H$1=4,q=5,J=6,X=7,Y=0,Z=1,G$1=2,$=0,Q$1=1,K$1=2,tt=3,et$1=4,st=5,it=6,rt=7,nt="attached",ot="detached",at=300,ht=301,lt=302,ct=303,ut=304,dt=306,pt=1e3,mt=1001,yt=1002,ft=1003,gt=1004,bt=1005,wt=1006,Mt=1007,_t=1008,Tt=1009,zt=1010,Ct=1011,It=1012,Bt=1013,kt=1014,Et=1015,Rt=1016,Pt=1017,Ot=1018,Ft=1020,Nt=35902,Lt=1021,Vt=1022,Wt=1023,Ut=1024,jt=1025,Dt=1026,Ht=1027,qt=1028,Jt=1029,Xt=1030,Yt=1031,Gt=1033,$t=33776,Qt=33777,Kt=33778,te=33779,ee=35840,se=35841,ie=35842,re=35843,ne=36196,oe=37492,ae=37496,he=37808,le=37809,ce=37810,ue=37811,de=37812,pe=37813,me=37814,ye=37815,fe=37816,ge=37817,xe=37818,be=37819,ve=37820,we=37821,Me=36492,Se=36494,_e=36495,Ae=36283,Te=36284,ze=36285,Ce=36286,Ee=2300,Re=2301,Pe=2302,Oe=2400,Fe=2401,Ne=2402,Le=2500,Ve=2501,He=3201,Xe=0,Ye=1,Ze="",Ge="srgb",$e="srgb-linear",Qe="linear",Ke="srgb",es=7680,fs=512,gs=513,xs=514,bs=515,vs=516,ws=517,Ms=518,Ss=519,_s=35044,As=35048,Ps="300 es",Os=2e3,Fs=2001;class Ns{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const s=this._listeners;void 0===s[t]&&(s[t]=[]),-1===s[t].indexOf(e)&&s[t].push(e);}hasEventListener(t,e){if(void 0===this._listeners)return !1;const s=this._listeners;return void 0!==s[t]&&-1!==s[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const s=this._listeners[t];if(void 0!==s){const t=s.indexOf(e);-1!==t&&s.splice(t,1);}}dispatchEvent(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const s=e.slice(0);for(let e=0,i=s.length;e<i;e++)s[e].call(this,t);t.target=null;}}}const Ls=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let Vs=1234567;const Ws=Math.PI/180,Us=180/Math.PI;function js(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,s=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return (Ls[255&t]+Ls[t>>8&255]+Ls[t>>16&255]+Ls[t>>24&255]+"-"+Ls[255&e]+Ls[e>>8&255]+"-"+Ls[e>>16&15|64]+Ls[e>>24&255]+"-"+Ls[63&s|128]+Ls[s>>8&255]+"-"+Ls[s>>16&255]+Ls[s>>24&255]+Ls[255&i]+Ls[i>>8&255]+Ls[i>>16&255]+Ls[i>>24&255]).toLowerCase()}function Ds(t,e,s){return Math.max(e,Math.min(s,t))}function Hs(t,e){return (t%e+e)%e}function qs(t,e,s){return (1-s)*t+s*e}function Js(t,e){switch(e.constructor){case Float32Array:return t;case Uint32Array:return t/4294967295;case Uint16Array:return t/65535;case Uint8Array:return t/255;case Int32Array:return Math.max(t/2147483647,-1);case Int16Array:return Math.max(t/32767,-1);case Int8Array:return Math.max(t/127,-1);default:throw new Error("Invalid component type.")}}function Xs(t,e){switch(e.constructor){case Float32Array:return t;case Uint32Array:return Math.round(4294967295*t);case Uint16Array:return Math.round(65535*t);case Uint8Array:return Math.round(255*t);case Int32Array:return Math.round(2147483647*t);case Int16Array:return Math.round(32767*t);case Int8Array:return Math.round(127*t);default:throw new Error("Invalid component type.")}}const Ys={DEG2RAD:Ws,RAD2DEG:Us,generateUUID:js,clamp:Ds,euclideanModulo:Hs,mapLinear:function(t,e,s,i,r){return i+(t-e)*(r-i)/(s-e)},inverseLerp:function(t,e,s){return t!==e?(s-t)/(e-t):0},lerp:qs,damp:function(t,e,s,i){return qs(t,e,1-Math.exp(-s*i))},pingpong:function(t,e=1){return e-Math.abs(Hs(t,2*e)-e)},smoothstep:function(t,e,s){return t<=e?0:t>=s?1:(t=(t-e)/(s-e))*t*(3-2*t)},smootherstep:function(t,e,s){return t<=e?0:t>=s?1:(t=(t-e)/(s-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},seededRandom:function(t){void 0!==t&&(Vs=t);let e=Vs+=1831565813;return e=Math.imul(e^e>>>15,1|e),e^=e+Math.imul(e^e>>>7,61|e),((e^e>>>14)>>>0)/4294967296},degToRad:function(t){return t*Ws},radToDeg:function(t){return t*Us},isPowerOfTwo:function(t){return 0==(t&t-1)&&0!==t},ceilPowerOfTwo:function(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))},floorPowerOfTwo:function(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))},setQuaternionFromProperEuler:function(t,e,s,i,r){const n=Math.cos,o=Math.sin,a=n(s/2),h=o(s/2),l=n((e+i)/2),c=o((e+i)/2),u=n((e-i)/2),d=o((e-i)/2),p=n((i-e)/2),m=o((i-e)/2);switch(r){case"XYX":t.set(a*c,h*u,h*d,a*l);break;case"YZY":t.set(h*d,a*c,h*u,a*l);break;case"ZXZ":t.set(h*u,h*d,a*c,a*l);break;case"XZX":t.set(a*c,h*m,h*p,a*l);break;case"YXY":t.set(h*p,a*c,h*m,a*l);break;case"ZYZ":t.set(h*m,h*p,a*c,a*l);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+r);}},normalize:Xs,denormalize:Js};class Zs{constructor(t=0,e=0){Zs.prototype.isVector2=!0,this.x=t,this.y=e;}get width(){return this.x}set width(t){this.x=t;}get height(){return this.y}set height(t){this.y=t;}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,s=this.y,i=t.elements;return this.x=i[0]*e+i[3]*s+i[6],this.y=i[1]*e+i[4]*s+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Ds(this.x,t.x,e.x),this.y=Ds(this.y,t.y,e.y),this}clampScalar(t,e){return this.x=Ds(this.x,t,e),this.y=Ds(this.y,t,e),this}clampLength(t,e){const s=this.length();return this.divideScalar(s||1).multiplyScalar(Ds(s,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const s=this.dot(t)/e;return Math.acos(Ds(s,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,s=this.y-t.y;return e*e+s*s}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,s){return this.x=t.x+(e.x-t.x)*s,this.y=t.y+(e.y-t.y)*s,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const s=Math.cos(e),i=Math.sin(e),r=this.x-t.x,n=this.y-t.y;return this.x=r*s-n*i+t.x,this.y=r*i+n*s+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y;}}class Gs{constructor(t,e,s,i,r,n,o,a,h){Gs.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],void 0!==t&&this.set(t,e,s,i,r,n,o,a,h);}set(t,e,s,i,r,n,o,a,h){const l=this.elements;return l[0]=t,l[1]=i,l[2]=o,l[3]=e,l[4]=r,l[5]=a,l[6]=s,l[7]=n,l[8]=h,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,s=t.elements;return e[0]=s[0],e[1]=s[1],e[2]=s[2],e[3]=s[3],e[4]=s[4],e[5]=s[5],e[6]=s[6],e[7]=s[7],e[8]=s[8],this}extractBasis(t,e,s){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),s.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const s=t.elements,i=e.elements,r=this.elements,n=s[0],o=s[3],a=s[6],h=s[1],l=s[4],c=s[7],u=s[2],d=s[5],p=s[8],m=i[0],y=i[3],f=i[6],g=i[1],x=i[4],b=i[7],v=i[2],w=i[5],M=i[8];return r[0]=n*m+o*g+a*v,r[3]=n*y+o*x+a*w,r[6]=n*f+o*b+a*M,r[1]=h*m+l*g+c*v,r[4]=h*y+l*x+c*w,r[7]=h*f+l*b+c*M,r[2]=u*m+d*g+p*v,r[5]=u*y+d*x+p*w,r[8]=u*f+d*b+p*M,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],s=t[1],i=t[2],r=t[3],n=t[4],o=t[5],a=t[6],h=t[7],l=t[8];return e*n*l-e*o*h-s*r*l+s*o*a+i*r*h-i*n*a}invert(){const t=this.elements,e=t[0],s=t[1],i=t[2],r=t[3],n=t[4],o=t[5],a=t[6],h=t[7],l=t[8],c=l*n-o*h,u=o*a-l*r,d=h*r-n*a,p=e*c+s*u+i*d;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const m=1/p;return t[0]=c*m,t[1]=(i*h-l*s)*m,t[2]=(o*s-i*n)*m,t[3]=u*m,t[4]=(l*e-i*a)*m,t[5]=(i*r-o*e)*m,t[6]=d*m,t[7]=(s*a-h*e)*m,t[8]=(n*e-s*r)*m,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,s,i,r,n,o){const a=Math.cos(r),h=Math.sin(r);return this.set(s*a,s*h,-s*(a*n+h*o)+n+t,-i*h,i*a,-i*(-h*n+a*o)+o+e,0,0,1),this}scale(t,e){return this.premultiply($s.makeScale(t,e)),this}rotate(t){return this.premultiply($s.makeRotation(-t)),this}translate(t,e){return this.premultiply($s.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),s=Math.sin(t);return this.set(e,-s,0,s,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,s=t.elements;for(let t=0;t<9;t++)if(e[t]!==s[t])return !1;return !0}fromArray(t,e=0){for(let s=0;s<9;s++)this.elements[s]=t[s+e];return this}toArray(t=[],e=0){const s=this.elements;return t[e]=s[0],t[e+1]=s[1],t[e+2]=s[2],t[e+3]=s[3],t[e+4]=s[4],t[e+5]=s[5],t[e+6]=s[6],t[e+7]=s[7],t[e+8]=s[8],t}clone(){return (new this.constructor).fromArray(this.elements)}}const $s=new Gs;function Qs(t){for(let e=t.length-1;e>=0;--e)if(t[e]>=65535)return !0;return !1}function ei$1(t){return document.createElementNS("http://www.w3.org/1999/xhtml",t)}function si$1(){const t=ei$1("canvas");return t.style.display="block",t}const ii$1={};function ri$1(t){t in ii$1||(ii$1[t]=!0,console.warn(t));}function ni$1(t,e,s){return new Promise((function(i,r){setTimeout((function n(){switch(t.clientWaitSync(e,t.SYNC_FLUSH_COMMANDS_BIT,0)){case t.WAIT_FAILED:r();break;case t.TIMEOUT_EXPIRED:setTimeout(n,s);break;default:i();}}),s);}))}function oi$1(t){const e=t.elements;e[2]=.5*e[2]+.5*e[3],e[6]=.5*e[6]+.5*e[7],e[10]=.5*e[10]+.5*e[11],e[14]=.5*e[14]+.5*e[15];}function ai$1(t){const e=t.elements;-1===e[11]?(e[10]=-e[10]-1,e[14]=-e[14]):(e[10]=-e[10],e[14]=1-e[14]);}const hi$1=(new Gs).set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),li$1=(new Gs).set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function ci$1(){const t={enabled:!0,workingColorSpace:$e,spaces:{},convert:function(t,e,s){return !1!==this.enabled&&e!==s&&e&&s?(this.spaces[e].transfer===Ke&&(t.r=di$1(t.r),t.g=di$1(t.g),t.b=di$1(t.b)),this.spaces[e].primaries!==this.spaces[s].primaries&&(t.applyMatrix3(this.spaces[e].toXYZ),t.applyMatrix3(this.spaces[s].fromXYZ)),this.spaces[s].transfer===Ke&&(t.r=pi$2(t.r),t.g=pi$2(t.g),t.b=pi$2(t.b)),t):t},fromWorkingColorSpace:function(t,e){return this.convert(t,this.workingColorSpace,e)},toWorkingColorSpace:function(t,e){return this.convert(t,e,this.workingColorSpace)},getPrimaries:function(t){return this.spaces[t].primaries},getTransfer:function(t){return ""===t?Qe:this.spaces[t].transfer},getLuminanceCoefficients:function(t,e=this.workingColorSpace){return t.fromArray(this.spaces[e].luminanceCoefficients)},define:function(t){Object.assign(this.spaces,t);},_getMatrix:function(t,e,s){return t.copy(this.spaces[e].toXYZ).multiply(this.spaces[s].fromXYZ)},_getDrawingBufferColorSpace:function(t){return this.spaces[t].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(t=this.workingColorSpace){return this.spaces[t].workingColorSpaceConfig.unpackColorSpace}},e=[.64,.33,.3,.6,.15,.06],s=[.2126,.7152,.0722],i=[.3127,.329];return t.define({[$e]:{primaries:e,whitePoint:i,transfer:Qe,toXYZ:hi$1,fromXYZ:li$1,luminanceCoefficients:s,workingColorSpaceConfig:{unpackColorSpace:Ge},outputColorSpaceConfig:{drawingBufferColorSpace:Ge}},[Ge]:{primaries:e,whitePoint:i,transfer:Ke,toXYZ:hi$1,fromXYZ:li$1,luminanceCoefficients:s,outputColorSpaceConfig:{drawingBufferColorSpace:Ge}}}),t}const ui$1=ci$1();function di$1(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function pi$2(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}let mi$1;let yi$1 = class yi{static getDataURL(t){if(/^data:/i.test(t.src))return t.src;if("undefined"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else {void 0===mi$1&&(mi$1=ei$1("canvas")),mi$1.width=t.width,mi$1.height=t.height;const s=mi$1.getContext("2d");t instanceof ImageData?s.putImageData(t,0,0):s.drawImage(t,0,0,t.width,t.height),e=mi$1;}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const e=ei$1("canvas");e.width=t.width,e.height=t.height;const s=e.getContext("2d");s.drawImage(t,0,0,t.width,t.height);const i=s.getImageData(0,0,t.width,t.height),r=i.data;for(let t=0;t<r.length;t++)r[t]=255*di$1(r[t]/255);return s.putImageData(i,0,0),e}if(t.data){const e=t.data.slice(0);for(let t=0;t<e.length;t++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[t]=Math.floor(255*di$1(e[t]/255)):e[t]=di$1(e[t]);return {data:e,width:t.width,height:t.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}};let fi$1=0;let gi$1 = class gi{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:fi$1++}),this.uuid=js(),this.data=t,this.dataReady=!0,this.version=0;}set needsUpdate(t){!0===t&&this.version++;}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.images[this.uuid])return t.images[this.uuid];const s={uuid:this.uuid,url:""},i=this.data;if(null!==i){let t;if(Array.isArray(i)){t=[];for(let e=0,s=i.length;e<s;e++)i[e].isDataTexture?t.push(xi$1(i[e].image)):t.push(xi$1(i[e]));}else t=xi$1(i);s.url=t;}return e||(t.images[this.uuid]=s),s}};function xi$1(t){return "undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap?yi$1.getDataURL(t):t.data?{data:Array.from(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let bi$1=0;let vi$1 = class vi extends Ns{constructor(t=vi.DEFAULT_IMAGE,e=vi.DEFAULT_MAPPING,s=1001,i=1001,r=1006,n=1008,o=1023,a=Tt,h=vi.DEFAULT_ANISOTROPY,l=""){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:bi$1++}),this.uuid=js(),this.name="",this.source=new gi$1(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=s,this.wrapT=i,this.magFilter=r,this.minFilter=n,this.anisotropy=h,this.format=o,this.internalFormat=null,this.type=a,this.offset=new Zs(0,0),this.repeat=new Zs(1,1),this.center=new Zs(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Gs,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=l,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0;}get image(){return this.source.data}set image(t=null){this.source.data=t;}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y);}clone(){return (new this.constructor).copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const s={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(s.userData=this.userData),e||(t.textures[this.uuid]=s),s}dispose(){this.dispatchEvent({type:"dispose"});}transformUv(t){if(this.mapping!==at)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case pt:t.x=t.x-Math.floor(t.x);break;case mt:t.x=t.x<0?0:1;break;case yt:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);}if(t.y<0||t.y>1)switch(this.wrapT){case pt:t.y=t.y-Math.floor(t.y);break;case mt:t.y=t.y<0?0:1;break;case yt:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&(this.version++,this.source.needsUpdate=!0);}set needsPMREMUpdate(t){!0===t&&this.pmremVersion++;}};vi$1.DEFAULT_IMAGE=null,vi$1.DEFAULT_MAPPING=at,vi$1.DEFAULT_ANISOTROPY=1;let wi$1 = class wi{constructor(t=0,e=0,s=0,i=1){wi.prototype.isVector4=!0,this.x=t,this.y=e,this.z=s,this.w=i;}get width(){return this.z}set width(t){this.z=t;}get height(){return this.w}set height(t){this.w=t;}set(t,e,s,i){return this.x=t,this.y=e,this.z=s,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,s=this.y,i=this.z,r=this.w,n=t.elements;return this.x=n[0]*e+n[4]*s+n[8]*i+n[12]*r,this.y=n[1]*e+n[5]*s+n[9]*i+n[13]*r,this.z=n[2]*e+n[6]*s+n[10]*i+n[14]*r,this.w=n[3]*e+n[7]*s+n[11]*i+n[15]*r,this}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this.w/=t.w,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,s,i,r;const n=.01,o=.1,a=t.elements,h=a[0],l=a[4],c=a[8],u=a[1],d=a[5],p=a[9],m=a[2],y=a[6],f=a[10];if(Math.abs(l-u)<n&&Math.abs(c-m)<n&&Math.abs(p-y)<n){if(Math.abs(l+u)<o&&Math.abs(c+m)<o&&Math.abs(p+y)<o&&Math.abs(h+d+f-3)<o)return this.set(1,0,0,0),this;e=Math.PI;const t=(h+1)/2,a=(d+1)/2,g=(f+1)/2,x=(l+u)/4,b=(c+m)/4,v=(p+y)/4;return t>a&&t>g?t<n?(s=0,i=.707106781,r=.707106781):(s=Math.sqrt(t),i=x/s,r=b/s):a>g?a<n?(s=.707106781,i=0,r=.707106781):(i=Math.sqrt(a),s=x/i,r=v/i):g<n?(s=.707106781,i=.707106781,r=0):(r=Math.sqrt(g),s=b/r,i=v/r),this.set(s,i,r,e),this}let g=Math.sqrt((y-p)*(y-p)+(c-m)*(c-m)+(u-l)*(u-l));return Math.abs(g)<.001&&(g=1),this.x=(y-p)/g,this.y=(c-m)/g,this.z=(u-l)/g,this.w=Math.acos((h+d+f-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Ds(this.x,t.x,e.x),this.y=Ds(this.y,t.y,e.y),this.z=Ds(this.z,t.z,e.z),this.w=Ds(this.w,t.w,e.w),this}clampScalar(t,e){return this.x=Ds(this.x,t,e),this.y=Ds(this.y,t,e),this.z=Ds(this.z,t,e),this.w=Ds(this.w,t,e),this}clampLength(t,e){const s=this.length();return this.divideScalar(s||1).multiplyScalar(Ds(s,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,s){return this.x=t.x+(e.x-t.x)*s,this.y=t.y+(e.y-t.y)*s,this.z=t.z+(e.z-t.z)*s,this.w=t.w+(e.w-t.w)*s,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w;}};let Mi$1 = class Mi extends Ns{constructor(t=1,e=1,s={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new wi$1(0,0,t,e),this.scissorTest=!1,this.viewport=new wi$1(0,0,t,e);const i={width:t,height:e,depth:1};s=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:wt,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},s);const r=new vi$1(i,s.mapping,s.wrapS,s.wrapT,s.magFilter,s.minFilter,s.format,s.type,s.anisotropy,s.colorSpace);r.flipY=!1,r.generateMipmaps=s.generateMipmaps,r.internalFormat=s.internalFormat,this.textures=[];const n=s.count;for(let t=0;t<n;t++)this.textures[t]=r.clone(),this.textures[t].isRenderTargetTexture=!0;this.depthBuffer=s.depthBuffer,this.stencilBuffer=s.stencilBuffer,this.resolveDepthBuffer=s.resolveDepthBuffer,this.resolveStencilBuffer=s.resolveStencilBuffer,this.depthTexture=s.depthTexture,this.samples=s.samples;}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t;}setSize(t,e,s=1){if(this.width!==t||this.height!==e||this.depth!==s){this.width=t,this.height=e,this.depth=s;for(let i=0,r=this.textures.length;i<r;i++)this.textures[i].image.width=t,this.textures[i].image.height=e,this.textures[i].image.depth=s;this.dispose();}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e);}clone(){return (new this.constructor).copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let e=0,s=t.textures.length;e<s;e++)this.textures[e]=t.textures[e].clone(),this.textures[e].isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new gi$1(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,null!==t.depthTexture&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"});}};let Si$1 = class Si extends Mi$1{constructor(t=1,e=1,s={}){super(t,e,s),this.isWebGLRenderTarget=!0;}};let _i$1 = class _i extends vi$1{constructor(t=null,e=1,s=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:s,depth:i},this.magFilter=ft,this.minFilter=ft,this.wrapR=mt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set;}addLayerUpdate(t){this.layerUpdates.add(t);}clearLayerUpdates(){this.layerUpdates.clear();}};let Ti$1 = class Ti extends vi$1{constructor(t=null,e=1,s=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:s,depth:i},this.magFilter=ft,this.minFilter=ft,this.wrapR=mt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1;}};let Ci$1 = class Ci{constructor(t=0,e=0,s=0,i=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=s,this._w=i;}static slerpFlat(t,e,s,i,r,n,o){let a=s[i+0],h=s[i+1],l=s[i+2],c=s[i+3];const u=r[n+0],d=r[n+1],p=r[n+2],m=r[n+3];if(0===o)return t[e+0]=a,t[e+1]=h,t[e+2]=l,void(t[e+3]=c);if(1===o)return t[e+0]=u,t[e+1]=d,t[e+2]=p,void(t[e+3]=m);if(c!==m||a!==u||h!==d||l!==p){let t=1-o;const e=a*u+h*d+l*p+c*m,s=e>=0?1:-1,i=1-e*e;if(i>Number.EPSILON){const r=Math.sqrt(i),n=Math.atan2(r,e*s);t=Math.sin(t*n)/r,o=Math.sin(o*n)/r;}const r=o*s;if(a=a*t+u*r,h=h*t+d*r,l=l*t+p*r,c=c*t+m*r,t===1-o){const t=1/Math.sqrt(a*a+h*h+l*l+c*c);a*=t,h*=t,l*=t,c*=t;}}t[e]=a,t[e+1]=h,t[e+2]=l,t[e+3]=c;}static multiplyQuaternionsFlat(t,e,s,i,r,n){const o=s[i],a=s[i+1],h=s[i+2],l=s[i+3],c=r[n],u=r[n+1],d=r[n+2],p=r[n+3];return t[e]=o*p+l*c+a*d-h*u,t[e+1]=a*p+l*u+h*c-o*d,t[e+2]=h*p+l*d+o*u-a*c,t[e+3]=l*p-o*c-a*u-h*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback();}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback();}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback();}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback();}set(t,e,s,i){return this._x=t,this._y=e,this._z=s,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const s=t._x,i=t._y,r=t._z,n=t._order,o=Math.cos,a=Math.sin,h=o(s/2),l=o(i/2),c=o(r/2),u=a(s/2),d=a(i/2),p=a(r/2);switch(n){case"XYZ":this._x=u*l*c+h*d*p,this._y=h*d*c-u*l*p,this._z=h*l*p+u*d*c,this._w=h*l*c-u*d*p;break;case"YXZ":this._x=u*l*c+h*d*p,this._y=h*d*c-u*l*p,this._z=h*l*p-u*d*c,this._w=h*l*c+u*d*p;break;case"ZXY":this._x=u*l*c-h*d*p,this._y=h*d*c+u*l*p,this._z=h*l*p+u*d*c,this._w=h*l*c-u*d*p;break;case"ZYX":this._x=u*l*c-h*d*p,this._y=h*d*c+u*l*p,this._z=h*l*p-u*d*c,this._w=h*l*c+u*d*p;break;case"YZX":this._x=u*l*c+h*d*p,this._y=h*d*c+u*l*p,this._z=h*l*p-u*d*c,this._w=h*l*c-u*d*p;break;case"XZY":this._x=u*l*c-h*d*p,this._y=h*d*c-u*l*p,this._z=h*l*p+u*d*c,this._w=h*l*c+u*d*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+n);}return !0===e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const s=e/2,i=Math.sin(s);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(s),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,s=e[0],i=e[4],r=e[8],n=e[1],o=e[5],a=e[9],h=e[2],l=e[6],c=e[10],u=s+o+c;if(u>0){const t=.5/Math.sqrt(u+1);this._w=.25/t,this._x=(l-a)*t,this._y=(r-h)*t,this._z=(n-i)*t;}else if(s>o&&s>c){const t=2*Math.sqrt(1+s-o-c);this._w=(l-a)/t,this._x=.25*t,this._y=(i+n)/t,this._z=(r+h)/t;}else if(o>c){const t=2*Math.sqrt(1+o-s-c);this._w=(r-h)/t,this._x=(i+n)/t,this._y=.25*t,this._z=(a+l)/t;}else {const t=2*Math.sqrt(1+c-s-o);this._w=(n-i)/t,this._x=(r+h)/t,this._y=(a+l)/t,this._z=.25*t;}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let s=t.dot(e)+1;return s<Number.EPSILON?(s=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=s):(this._x=0,this._y=-t.z,this._z=t.y,this._w=s)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=s),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(Ds(this.dot(t),-1,1)))}rotateTowards(t,e){const s=this.angleTo(t);if(0===s)return this;const i=Math.min(1,e/s);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const s=t._x,i=t._y,r=t._z,n=t._w,o=e._x,a=e._y,h=e._z,l=e._w;return this._x=s*l+n*o+i*h-r*a,this._y=i*l+n*a+r*o-s*h,this._z=r*l+n*h+s*a-i*o,this._w=n*l-s*o-i*a-r*h,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const s=this._x,i=this._y,r=this._z,n=this._w;let o=n*t._w+s*t._x+i*t._y+r*t._z;if(o<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,o=-o):this.copy(t),o>=1)return this._w=n,this._x=s,this._y=i,this._z=r,this;const a=1-o*o;if(a<=Number.EPSILON){const t=1-e;return this._w=t*n+e*this._w,this._x=t*s+e*this._x,this._y=t*i+e*this._y,this._z=t*r+e*this._z,this.normalize(),this}const h=Math.sqrt(a),l=Math.atan2(h,o),c=Math.sin((1-e)*l)/h,u=Math.sin(e*l)/h;return this._w=n*c+this._w*u,this._x=s*c+this._x*u,this._y=i*c+this._y*u,this._z=r*c+this._z*u,this._onChangeCallback(),this}slerpQuaternions(t,e,s){return this.copy(t).slerp(e,s)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),s=Math.random(),i=Math.sqrt(1-s),r=Math.sqrt(s);return this.set(i*Math.sin(t),i*Math.cos(t),r*Math.sin(e),r*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w;}};let Ii$1 = class Ii{constructor(t=0,e=0,s=0){Ii.prototype.isVector3=!0,this.x=t,this.y=e,this.z=s;}set(t,e,s){return void 0===s&&(s=this.z),this.x=t,this.y=e,this.z=s,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(ki$1.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(ki$1.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,s=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[3]*s+r[6]*i,this.y=r[1]*e+r[4]*s+r[7]*i,this.z=r[2]*e+r[5]*s+r[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,s=this.y,i=this.z,r=t.elements,n=1/(r[3]*e+r[7]*s+r[11]*i+r[15]);return this.x=(r[0]*e+r[4]*s+r[8]*i+r[12])*n,this.y=(r[1]*e+r[5]*s+r[9]*i+r[13])*n,this.z=(r[2]*e+r[6]*s+r[10]*i+r[14])*n,this}applyQuaternion(t){const e=this.x,s=this.y,i=this.z,r=t.x,n=t.y,o=t.z,a=t.w,h=2*(n*i-o*s),l=2*(o*e-r*i),c=2*(r*s-n*e);return this.x=e+a*h+n*c-o*l,this.y=s+a*l+o*h-r*c,this.z=i+a*c+r*l-n*h,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,s=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[4]*s+r[8]*i,this.y=r[1]*e+r[5]*s+r[9]*i,this.z=r[2]*e+r[6]*s+r[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Ds(this.x,t.x,e.x),this.y=Ds(this.y,t.y,e.y),this.z=Ds(this.z,t.z,e.z),this}clampScalar(t,e){return this.x=Ds(this.x,t,e),this.y=Ds(this.y,t,e),this.z=Ds(this.z,t,e),this}clampLength(t,e){const s=this.length();return this.divideScalar(s||1).multiplyScalar(Ds(s,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,s){return this.x=t.x+(e.x-t.x)*s,this.y=t.y+(e.y-t.y)*s,this.z=t.z+(e.z-t.z)*s,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const s=t.x,i=t.y,r=t.z,n=e.x,o=e.y,a=e.z;return this.x=i*a-r*o,this.y=r*n-s*a,this.z=s*o-i*n,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const s=t.dot(this)/e;return this.copy(t).multiplyScalar(s)}projectOnPlane(t){return Bi$1.copy(this).projectOnVector(t),this.sub(Bi$1)}reflect(t){return this.sub(Bi$1.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const s=this.dot(t)/e;return Math.acos(Ds(s,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,s=this.y-t.y,i=this.z-t.z;return e*e+s*s+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,s){const i=Math.sin(e)*t;return this.x=i*Math.sin(s),this.y=Math.cos(e)*t,this.z=i*Math.cos(s),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,s){return this.x=t*Math.sin(e),this.y=s,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),s=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=s,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=2*Math.random()-1,s=Math.sqrt(1-e*e);return this.x=s*Math.cos(t),this.y=e,this.z=s*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z;}};const Bi$1=new Ii$1,ki$1=new Ci$1;let Ei$1 = class Ei{constructor(t=new Ii$1(1/0,1/0,1/0),e=new Ii$1(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e;}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,s=t.length;e<s;e+=3)this.expandByPoint(Pi$1.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,s=t.count;e<s;e++)this.expandByPoint(Pi$1.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,s=t.length;e<s;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const s=Pi$1.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(s),this.max.copy(t).add(s),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return (new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const s=t.geometry;if(void 0!==s){const i=s.getAttribute("position");if(!0===e&&void 0!==i&&!0!==t.isInstancedMesh)for(let e=0,s=i.count;e<s;e++)!0===t.isMesh?t.getVertexPosition(e,Pi$1):Pi$1.fromBufferAttribute(i,e),Pi$1.applyMatrix4(t.matrixWorld),this.expandByPoint(Pi$1);else void 0!==t.boundingBox?(null===t.boundingBox&&t.computeBoundingBox(),Oi$1.copy(t.boundingBox)):(null===s.boundingBox&&s.computeBoundingBox(),Oi$1.copy(s.boundingBox)),Oi$1.applyMatrix4(t.matrixWorld),this.union(Oi$1);}const i=t.children;for(let t=0,s=i.length;t<s;t++)this.expandByObject(i[t],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,Pi$1),Pi$1.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,s;return t.normal.x>0?(e=t.normal.x*this.min.x,s=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,s=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,s+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,s+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,s+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,s+=t.normal.z*this.min.z),e<=-t.constant&&s>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return !1;this.getCenter(ji$1),Di$1.subVectors(this.max,ji$1),Fi$1.subVectors(t.a,ji$1),Ni$1.subVectors(t.b,ji$1),Li$1.subVectors(t.c,ji$1),Vi$1.subVectors(Ni$1,Fi$1),Wi$1.subVectors(Li$1,Ni$1),Ui$1.subVectors(Fi$1,Li$1);let e=[0,-Vi$1.z,Vi$1.y,0,-Wi$1.z,Wi$1.y,0,-Ui$1.z,Ui$1.y,Vi$1.z,0,-Vi$1.x,Wi$1.z,0,-Wi$1.x,Ui$1.z,0,-Ui$1.x,-Vi$1.y,Vi$1.x,0,-Wi$1.y,Wi$1.x,0,-Ui$1.y,Ui$1.x,0];return !!Ji$1(e,Fi$1,Ni$1,Li$1,Di$1)&&(e=[1,0,0,0,1,0,0,0,1],!!Ji$1(e,Fi$1,Ni$1,Li$1,Di$1)&&(Hi$1.crossVectors(Vi$1,Wi$1),e=[Hi$1.x,Hi$1.y,Hi$1.z],Ji$1(e,Fi$1,Ni$1,Li$1,Di$1)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Pi$1).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=.5*this.getSize(Pi$1).length()),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(Ri$1[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Ri$1[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Ri$1[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Ri$1[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Ri$1[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Ri$1[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Ri$1[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Ri$1[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Ri$1)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}};const Ri$1=[new Ii$1,new Ii$1,new Ii$1,new Ii$1,new Ii$1,new Ii$1,new Ii$1,new Ii$1],Pi$1=new Ii$1,Oi$1=new Ei$1,Fi$1=new Ii$1,Ni$1=new Ii$1,Li$1=new Ii$1,Vi$1=new Ii$1,Wi$1=new Ii$1,Ui$1=new Ii$1,ji$1=new Ii$1,Di$1=new Ii$1,Hi$1=new Ii$1,qi$1=new Ii$1;function Ji$1(t,e,s,i,r){for(let n=0,o=t.length-3;n<=o;n+=3){qi$1.fromArray(t,n);const o=r.x*Math.abs(qi$1.x)+r.y*Math.abs(qi$1.y)+r.z*Math.abs(qi$1.z),a=e.dot(qi$1),h=s.dot(qi$1),l=i.dot(qi$1);if(Math.max(-Math.max(a,h,l),Math.min(a,h,l))>o)return !1}return !0}const Xi$1=new Ei$1,Yi$1=new Ii$1,Zi$1=new Ii$1;let Gi$1 = class Gi{constructor(t=new Ii$1,e=-1){this.isSphere=!0,this.center=t,this.radius=e;}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const s=this.center;void 0!==e?s.copy(e):Xi$1.setFromPoints(t).getCenter(s);let i=0;for(let e=0,r=t.length;e<r;e++)i=Math.max(i,s.distanceToSquared(t[e]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const s=this.center.distanceToSquared(t);return e.copy(t),s>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;Yi$1.subVectors(t,this.center);const e=Yi$1.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),s=.5*(t-this.radius);this.center.addScaledVector(Yi$1,s/t),this.radius+=s;}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(!0===this.center.equals(t.center)?this.radius=Math.max(this.radius,t.radius):(Zi$1.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(Yi$1.copy(t.center).add(Zi$1)),this.expandByPoint(Yi$1.copy(t.center).sub(Zi$1))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return (new this.constructor).copy(this)}};const $i$1=new Ii$1,Qi$1=new Ii$1,Ki$1=new Ii$1,tr$1=new Ii$1,er$1=new Ii$1,sr$1=new Ii$1,ir$1=new Ii$1;let rr$1 = class rr{constructor(t=new Ii$1,e=new Ii$1(0,0,-1)){this.origin=t,this.direction=e;}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,$i$1)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const s=e.dot(this.direction);return s<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,s)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=$i$1.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):($i$1.copy(this.origin).addScaledVector(this.direction,e),$i$1.distanceToSquared(t))}distanceSqToSegment(t,e,s,i){Qi$1.copy(t).add(e).multiplyScalar(.5),Ki$1.copy(e).sub(t).normalize(),tr$1.copy(this.origin).sub(Qi$1);const r=.5*t.distanceTo(e),n=-this.direction.dot(Ki$1),o=tr$1.dot(this.direction),a=-tr$1.dot(Ki$1),h=tr$1.lengthSq(),l=Math.abs(1-n*n);let c,u,d,p;if(l>0)if(c=n*a-o,u=n*o-a,p=r*l,c>=0)if(u>=-p)if(u<=p){const t=1/l;c*=t,u*=t,d=c*(c+n*u+2*o)+u*(n*c+u+2*a)+h;}else u=r,c=Math.max(0,-(n*u+o)),d=-c*c+u*(u+2*a)+h;else u=-r,c=Math.max(0,-(n*u+o)),d=-c*c+u*(u+2*a)+h;else u<=-p?(c=Math.max(0,-(-n*r+o)),u=c>0?-r:Math.min(Math.max(-r,-a),r),d=-c*c+u*(u+2*a)+h):u<=p?(c=0,u=Math.min(Math.max(-r,-a),r),d=u*(u+2*a)+h):(c=Math.max(0,-(n*r+o)),u=c>0?r:Math.min(Math.max(-r,-a),r),d=-c*c+u*(u+2*a)+h);else u=n>0?-r:r,c=Math.max(0,-(n*u+o)),d=-c*c+u*(u+2*a)+h;return s&&s.copy(this.origin).addScaledVector(this.direction,c),i&&i.copy(Qi$1).addScaledVector(Ki$1,u),d}intersectSphere(t,e){$i$1.subVectors(t.center,this.origin);const s=$i$1.dot(this.direction),i=$i$1.dot($i$1)-s*s,r=t.radius*t.radius;if(i>r)return null;const n=Math.sqrt(r-i),o=s-n,a=s+n;return a<0?null:o<0?this.at(a,e):this.at(o,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const s=-(this.origin.dot(t.normal)+t.constant)/e;return s>=0?s:null}intersectPlane(t,e){const s=this.distanceToPlane(t);return null===s?null:this.at(s,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);if(0===e)return !0;return t.normal.dot(this.direction)*e<0}intersectBox(t,e){let s,i,r,n,o,a;const h=1/this.direction.x,l=1/this.direction.y,c=1/this.direction.z,u=this.origin;return h>=0?(s=(t.min.x-u.x)*h,i=(t.max.x-u.x)*h):(s=(t.max.x-u.x)*h,i=(t.min.x-u.x)*h),l>=0?(r=(t.min.y-u.y)*l,n=(t.max.y-u.y)*l):(r=(t.max.y-u.y)*l,n=(t.min.y-u.y)*l),s>n||r>i?null:((r>s||isNaN(s))&&(s=r),(n<i||isNaN(i))&&(i=n),c>=0?(o=(t.min.z-u.z)*c,a=(t.max.z-u.z)*c):(o=(t.max.z-u.z)*c,a=(t.min.z-u.z)*c),s>a||o>i?null:((o>s||s!=s)&&(s=o),(a<i||i!=i)&&(i=a),i<0?null:this.at(s>=0?s:i,e)))}intersectsBox(t){return null!==this.intersectBox(t,$i$1)}intersectTriangle(t,e,s,i,r){er$1.subVectors(e,t),sr$1.subVectors(s,t),ir$1.crossVectors(er$1,sr$1);let n,o=this.direction.dot(ir$1);if(o>0){if(i)return null;n=1;}else {if(!(o<0))return null;n=-1,o=-o;}tr$1.subVectors(this.origin,t);const a=n*this.direction.dot(sr$1.crossVectors(tr$1,sr$1));if(a<0)return null;const h=n*this.direction.dot(er$1.cross(tr$1));if(h<0)return null;if(a+h>o)return null;const l=-n*tr$1.dot(ir$1);return l<0?null:this.at(l/o,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return (new this.constructor).copy(this)}};let nr$1 = class nr{constructor(t,e,s,i,r,n,o,a,h,l,c,u,d,p,m,y){nr.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],void 0!==t&&this.set(t,e,s,i,r,n,o,a,h,l,c,u,d,p,m,y);}set(t,e,s,i,r,n,o,a,h,l,c,u,d,p,m,y){const f=this.elements;return f[0]=t,f[4]=e,f[8]=s,f[12]=i,f[1]=r,f[5]=n,f[9]=o,f[13]=a,f[2]=h,f[6]=l,f[10]=c,f[14]=u,f[3]=d,f[7]=p,f[11]=m,f[15]=y,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return (new nr).fromArray(this.elements)}copy(t){const e=this.elements,s=t.elements;return e[0]=s[0],e[1]=s[1],e[2]=s[2],e[3]=s[3],e[4]=s[4],e[5]=s[5],e[6]=s[6],e[7]=s[7],e[8]=s[8],e[9]=s[9],e[10]=s[10],e[11]=s[11],e[12]=s[12],e[13]=s[13],e[14]=s[14],e[15]=s[15],this}copyPosition(t){const e=this.elements,s=t.elements;return e[12]=s[12],e[13]=s[13],e[14]=s[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,s){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),s.setFromMatrixColumn(this,2),this}makeBasis(t,e,s){return this.set(t.x,e.x,s.x,0,t.y,e.y,s.y,0,t.z,e.z,s.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,s=t.elements,i=1/or$1.setFromMatrixColumn(t,0).length(),r=1/or$1.setFromMatrixColumn(t,1).length(),n=1/or$1.setFromMatrixColumn(t,2).length();return e[0]=s[0]*i,e[1]=s[1]*i,e[2]=s[2]*i,e[3]=0,e[4]=s[4]*r,e[5]=s[5]*r,e[6]=s[6]*r,e[7]=0,e[8]=s[8]*n,e[9]=s[9]*n,e[10]=s[10]*n,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,s=t.x,i=t.y,r=t.z,n=Math.cos(s),o=Math.sin(s),a=Math.cos(i),h=Math.sin(i),l=Math.cos(r),c=Math.sin(r);if("XYZ"===t.order){const t=n*l,s=n*c,i=o*l,r=o*c;e[0]=a*l,e[4]=-a*c,e[8]=h,e[1]=s+i*h,e[5]=t-r*h,e[9]=-o*a,e[2]=r-t*h,e[6]=i+s*h,e[10]=n*a;}else if("YXZ"===t.order){const t=a*l,s=a*c,i=h*l,r=h*c;e[0]=t+r*o,e[4]=i*o-s,e[8]=n*h,e[1]=n*c,e[5]=n*l,e[9]=-o,e[2]=s*o-i,e[6]=r+t*o,e[10]=n*a;}else if("ZXY"===t.order){const t=a*l,s=a*c,i=h*l,r=h*c;e[0]=t-r*o,e[4]=-n*c,e[8]=i+s*o,e[1]=s+i*o,e[5]=n*l,e[9]=r-t*o,e[2]=-n*h,e[6]=o,e[10]=n*a;}else if("ZYX"===t.order){const t=n*l,s=n*c,i=o*l,r=o*c;e[0]=a*l,e[4]=i*h-s,e[8]=t*h+r,e[1]=a*c,e[5]=r*h+t,e[9]=s*h-i,e[2]=-h,e[6]=o*a,e[10]=n*a;}else if("YZX"===t.order){const t=n*a,s=n*h,i=o*a,r=o*h;e[0]=a*l,e[4]=r-t*c,e[8]=i*c+s,e[1]=c,e[5]=n*l,e[9]=-o*l,e[2]=-h*l,e[6]=s*c+i,e[10]=t-r*c;}else if("XZY"===t.order){const t=n*a,s=n*h,i=o*a,r=o*h;e[0]=a*l,e[4]=-c,e[8]=h*l,e[1]=t*c+r,e[5]=n*l,e[9]=s*c-i,e[2]=i*c-s,e[6]=o*l,e[10]=r*c+t;}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(hr$1,t,lr$1)}lookAt(t,e,s){const i=this.elements;return dr$1.subVectors(t,e),0===dr$1.lengthSq()&&(dr$1.z=1),dr$1.normalize(),cr$1.crossVectors(s,dr$1),0===cr$1.lengthSq()&&(1===Math.abs(s.z)?dr$1.x+=1e-4:dr$1.z+=1e-4,dr$1.normalize(),cr$1.crossVectors(s,dr$1)),cr$1.normalize(),ur$1.crossVectors(dr$1,cr$1),i[0]=cr$1.x,i[4]=ur$1.x,i[8]=dr$1.x,i[1]=cr$1.y,i[5]=ur$1.y,i[9]=dr$1.y,i[2]=cr$1.z,i[6]=ur$1.z,i[10]=dr$1.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const s=t.elements,i=e.elements,r=this.elements,n=s[0],o=s[4],a=s[8],h=s[12],l=s[1],c=s[5],u=s[9],d=s[13],p=s[2],m=s[6],y=s[10],f=s[14],g=s[3],x=s[7],b=s[11],v=s[15],w=i[0],M=i[4],S=i[8],_=i[12],A=i[1],T=i[5],z=i[9],C=i[13],I=i[2],B=i[6],k=i[10],E=i[14],R=i[3],P=i[7],O=i[11],F=i[15];return r[0]=n*w+o*A+a*I+h*R,r[4]=n*M+o*T+a*B+h*P,r[8]=n*S+o*z+a*k+h*O,r[12]=n*_+o*C+a*E+h*F,r[1]=l*w+c*A+u*I+d*R,r[5]=l*M+c*T+u*B+d*P,r[9]=l*S+c*z+u*k+d*O,r[13]=l*_+c*C+u*E+d*F,r[2]=p*w+m*A+y*I+f*R,r[6]=p*M+m*T+y*B+f*P,r[10]=p*S+m*z+y*k+f*O,r[14]=p*_+m*C+y*E+f*F,r[3]=g*w+x*A+b*I+v*R,r[7]=g*M+x*T+b*B+v*P,r[11]=g*S+x*z+b*k+v*O,r[15]=g*_+x*C+b*E+v*F,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],s=t[4],i=t[8],r=t[12],n=t[1],o=t[5],a=t[9],h=t[13],l=t[2],c=t[6],u=t[10],d=t[14];return t[3]*(+r*a*c-i*h*c-r*o*u+s*h*u+i*o*d-s*a*d)+t[7]*(+e*a*d-e*h*u+r*n*u-i*n*d+i*h*l-r*a*l)+t[11]*(+e*h*c-e*o*d-r*n*c+s*n*d+r*o*l-s*h*l)+t[15]*(-i*o*l-e*a*c+e*o*u+i*n*c-s*n*u+s*a*l)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,s){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=s),this}invert(){const t=this.elements,e=t[0],s=t[1],i=t[2],r=t[3],n=t[4],o=t[5],a=t[6],h=t[7],l=t[8],c=t[9],u=t[10],d=t[11],p=t[12],m=t[13],y=t[14],f=t[15],g=c*y*h-m*u*h+m*a*d-o*y*d-c*a*f+o*u*f,x=p*u*h-l*y*h-p*a*d+n*y*d+l*a*f-n*u*f,b=l*m*h-p*c*h+p*o*d-n*m*d-l*o*f+n*c*f,v=p*c*a-l*m*a-p*o*u+n*m*u+l*o*y-n*c*y,w=e*g+s*x+i*b+r*v;if(0===w)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const M=1/w;return t[0]=g*M,t[1]=(m*u*r-c*y*r-m*i*d+s*y*d+c*i*f-s*u*f)*M,t[2]=(o*y*r-m*a*r+m*i*h-s*y*h-o*i*f+s*a*f)*M,t[3]=(c*a*r-o*u*r-c*i*h+s*u*h+o*i*d-s*a*d)*M,t[4]=x*M,t[5]=(l*y*r-p*u*r+p*i*d-e*y*d-l*i*f+e*u*f)*M,t[6]=(p*a*r-n*y*r-p*i*h+e*y*h+n*i*f-e*a*f)*M,t[7]=(n*u*r-l*a*r+l*i*h-e*u*h-n*i*d+e*a*d)*M,t[8]=b*M,t[9]=(p*c*r-l*m*r-p*s*d+e*m*d+l*s*f-e*c*f)*M,t[10]=(n*m*r-p*o*r+p*s*h-e*m*h-n*s*f+e*o*f)*M,t[11]=(l*o*r-n*c*r-l*s*h+e*c*h+n*s*d-e*o*d)*M,t[12]=v*M,t[13]=(l*m*i-p*c*i+p*s*u-e*m*u-l*s*y+e*c*y)*M,t[14]=(p*o*i-n*m*i-p*s*a+e*m*a+n*s*y-e*o*y)*M,t[15]=(n*c*i-l*o*i+l*s*a-e*c*a-n*s*u+e*o*u)*M,this}scale(t){const e=this.elements,s=t.x,i=t.y,r=t.z;return e[0]*=s,e[4]*=i,e[8]*=r,e[1]*=s,e[5]*=i,e[9]*=r,e[2]*=s,e[6]*=i,e[10]*=r,e[3]*=s,e[7]*=i,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],s=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,s,i))}makeTranslation(t,e,s){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,s,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),s=Math.sin(t);return this.set(1,0,0,0,0,e,-s,0,0,s,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),s=Math.sin(t);return this.set(e,0,s,0,0,1,0,0,-s,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),s=Math.sin(t);return this.set(e,-s,0,0,s,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const s=Math.cos(e),i=Math.sin(e),r=1-s,n=t.x,o=t.y,a=t.z,h=r*n,l=r*o;return this.set(h*n+s,h*o-i*a,h*a+i*o,0,h*o+i*a,l*o+s,l*a-i*n,0,h*a-i*o,l*a+i*n,r*a*a+s,0,0,0,0,1),this}makeScale(t,e,s){return this.set(t,0,0,0,0,e,0,0,0,0,s,0,0,0,0,1),this}makeShear(t,e,s,i,r,n){return this.set(1,s,r,0,t,1,n,0,e,i,1,0,0,0,0,1),this}compose(t,e,s){const i=this.elements,r=e._x,n=e._y,o=e._z,a=e._w,h=r+r,l=n+n,c=o+o,u=r*h,d=r*l,p=r*c,m=n*l,y=n*c,f=o*c,g=a*h,x=a*l,b=a*c,v=s.x,w=s.y,M=s.z;return i[0]=(1-(m+f))*v,i[1]=(d+b)*v,i[2]=(p-x)*v,i[3]=0,i[4]=(d-b)*w,i[5]=(1-(u+f))*w,i[6]=(y+g)*w,i[7]=0,i[8]=(p+x)*M,i[9]=(y-g)*M,i[10]=(1-(u+m))*M,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,s){const i=this.elements;let r=or$1.set(i[0],i[1],i[2]).length();const n=or$1.set(i[4],i[5],i[6]).length(),o=or$1.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),t.x=i[12],t.y=i[13],t.z=i[14],ar$1.copy(this);const a=1/r,h=1/n,l=1/o;return ar$1.elements[0]*=a,ar$1.elements[1]*=a,ar$1.elements[2]*=a,ar$1.elements[4]*=h,ar$1.elements[5]*=h,ar$1.elements[6]*=h,ar$1.elements[8]*=l,ar$1.elements[9]*=l,ar$1.elements[10]*=l,e.setFromRotationMatrix(ar$1),s.x=r,s.y=n,s.z=o,this}makePerspective(t,e,s,i,r,n,o=2e3){const a=this.elements,h=2*r/(e-t),l=2*r/(s-i),c=(e+t)/(e-t),u=(s+i)/(s-i);let d,p;if(o===Os)d=-(n+r)/(n-r),p=-2*n*r/(n-r);else {if(o!==Fs)throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+o);d=-n/(n-r),p=-n*r/(n-r);}return a[0]=h,a[4]=0,a[8]=c,a[12]=0,a[1]=0,a[5]=l,a[9]=u,a[13]=0,a[2]=0,a[6]=0,a[10]=d,a[14]=p,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(t,e,s,i,r,n,o=2e3){const a=this.elements,h=1/(e-t),l=1/(s-i),c=1/(n-r),u=(e+t)*h,d=(s+i)*l;let p,m;if(o===Os)p=(n+r)*c,m=-2*c;else {if(o!==Fs)throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+o);p=r*c,m=-1*c;}return a[0]=2*h,a[4]=0,a[8]=0,a[12]=-u,a[1]=0,a[5]=2*l,a[9]=0,a[13]=-d,a[2]=0,a[6]=0,a[10]=m,a[14]=-p,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(t){const e=this.elements,s=t.elements;for(let t=0;t<16;t++)if(e[t]!==s[t])return !1;return !0}fromArray(t,e=0){for(let s=0;s<16;s++)this.elements[s]=t[s+e];return this}toArray(t=[],e=0){const s=this.elements;return t[e]=s[0],t[e+1]=s[1],t[e+2]=s[2],t[e+3]=s[3],t[e+4]=s[4],t[e+5]=s[5],t[e+6]=s[6],t[e+7]=s[7],t[e+8]=s[8],t[e+9]=s[9],t[e+10]=s[10],t[e+11]=s[11],t[e+12]=s[12],t[e+13]=s[13],t[e+14]=s[14],t[e+15]=s[15],t}};const or$1=new Ii$1,ar$1=new nr$1,hr$1=new Ii$1(0,0,0),lr$1=new Ii$1(1,1,1),cr$1=new Ii$1,ur$1=new Ii$1,dr$1=new Ii$1,pr$1=new nr$1,mr$1=new Ci$1;let yr$1 = class yr{constructor(t=0,e=0,s=0,i=yr.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=s,this._order=i;}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback();}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback();}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback();}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback();}set(t,e,s,i=this._order){return this._x=t,this._y=e,this._z=s,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,s=!0){const i=t.elements,r=i[0],n=i[4],o=i[8],a=i[1],h=i[5],l=i[9],c=i[2],u=i[6],d=i[10];switch(e){case"XYZ":this._y=Math.asin(Ds(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-l,d),this._z=Math.atan2(-n,r)):(this._x=Math.atan2(u,h),this._z=0);break;case"YXZ":this._x=Math.asin(-Ds(l,-1,1)),Math.abs(l)<.9999999?(this._y=Math.atan2(o,d),this._z=Math.atan2(a,h)):(this._y=Math.atan2(-c,r),this._z=0);break;case"ZXY":this._x=Math.asin(Ds(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(-c,d),this._z=Math.atan2(-n,h)):(this._y=0,this._z=Math.atan2(a,r));break;case"ZYX":this._y=Math.asin(-Ds(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(u,d),this._z=Math.atan2(a,r)):(this._x=0,this._z=Math.atan2(-n,h));break;case"YZX":this._z=Math.asin(Ds(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-l,h),this._y=Math.atan2(-c,r)):(this._x=0,this._y=Math.atan2(o,d));break;case"XZY":this._z=Math.asin(-Ds(n,-1,1)),Math.abs(n)<.9999999?(this._x=Math.atan2(u,h),this._y=Math.atan2(o,r)):(this._x=Math.atan2(-l,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e);}return this._order=e,!0===s&&this._onChangeCallback(),this}setFromQuaternion(t,e,s){return pr$1.makeRotationFromQuaternion(t),this.setFromRotationMatrix(pr$1,e,s)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return mr$1.setFromEuler(this),this.setFromQuaternion(mr$1,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order;}};yr$1.DEFAULT_ORDER="XYZ";let fr$1 = class fr{constructor(){this.mask=1;}set(t){this.mask=(1<<t|0)>>>0;}enable(t){this.mask|=1<<t|0;}enableAll(){this.mask=-1;}toggle(t){this.mask^=1<<t|0;}disable(t){this.mask&=~(1<<t|0);}disableAll(){this.mask=0;}test(t){return 0!=(this.mask&t.mask)}isEnabled(t){return 0!=(this.mask&(1<<t|0))}};let gr$1=0;const xr$1=new Ii$1,br$1=new Ci$1,vr$1=new nr$1,wr$1=new Ii$1,Mr$1=new Ii$1,Sr$1=new Ii$1,_r$1=new Ci$1,Ar$1=new Ii$1(1,0,0),Tr$1=new Ii$1(0,1,0),zr$1=new Ii$1(0,0,1),Cr$1={type:"added"},Ir$1={type:"removed"},Br$1={type:"childadded",child:null},kr$1={type:"childremoved",child:null};let Er$1 = class Er extends Ns{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:gr$1++}),this.uuid=js(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Er.DEFAULT_UP.clone();const t=new Ii$1,e=new yr$1,s=new Ci$1,i=new Ii$1(1,1,1);e._onChange((function(){s.setFromEuler(e,!1);})),s._onChange((function(){e.setFromQuaternion(s,void 0,!1);})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:s},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new nr$1},normalMatrix:{value:new Gs}}),this.matrix=new nr$1,this.matrixWorld=new nr$1,this.matrixAutoUpdate=Er.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Er.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new fr$1,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={};}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale);}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e);}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0);}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t);}setRotationFromQuaternion(t){this.quaternion.copy(t);}rotateOnAxis(t,e){return br$1.setFromAxisAngle(t,e),this.quaternion.multiply(br$1),this}rotateOnWorldAxis(t,e){return br$1.setFromAxisAngle(t,e),this.quaternion.premultiply(br$1),this}rotateX(t){return this.rotateOnAxis(Ar$1,t)}rotateY(t){return this.rotateOnAxis(Tr$1,t)}rotateZ(t){return this.rotateOnAxis(zr$1,t)}translateOnAxis(t,e){return xr$1.copy(t).applyQuaternion(this.quaternion),this.position.add(xr$1.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(Ar$1,t)}translateY(t){return this.translateOnAxis(Tr$1,t)}translateZ(t){return this.translateOnAxis(zr$1,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(vr$1.copy(this.matrixWorld).invert())}lookAt(t,e,s){t.isVector3?wr$1.copy(t):wr$1.set(t,e,s);const i=this.parent;this.updateWorldMatrix(!0,!1),Mr$1.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?vr$1.lookAt(Mr$1,wr$1,this.up):vr$1.lookAt(wr$1,Mr$1,this.up),this.quaternion.setFromRotationMatrix(vr$1),i&&(vr$1.extractRotation(i.matrixWorld),br$1.setFromRotationMatrix(vr$1),this.quaternion.premultiply(br$1.invert()));}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(Cr$1),Br$1.child=t,this.dispatchEvent(Br$1),Br$1.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return -1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(Ir$1),kr$1.child=t,this.dispatchEvent(kr$1),kr$1.child=null),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),vr$1.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),vr$1.multiply(t.parent.matrixWorld)),t.applyMatrix4(vr$1),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(Cr$1),Br$1.child=t,this.dispatchEvent(Br$1),Br$1.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let s=0,i=this.children.length;s<i;s++){const i=this.children[s].getObjectByProperty(t,e);if(void 0!==i)return i}}getObjectsByProperty(t,e,s=[]){this[t]===e&&s.push(this);const i=this.children;for(let r=0,n=i.length;r<n;r++)i[r].getObjectsByProperty(t,e,s);return s}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Mr$1,t,Sr$1),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Mr$1,_r$1,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let s=0,i=e.length;s<i;s++)e[s].traverse(t);}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let s=0,i=e.length;s<i;s++)e[s].traverseVisible(t);}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t));}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0;}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(!0===this.matrixWorldAutoUpdate&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let s=0,i=e.length;s<i;s++){e[s].updateMatrixWorld(t);}}updateWorldMatrix(t,e){const s=this.parent;if(!0===t&&null!==s&&s.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),!0===this.matrixWorldAutoUpdate&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),!0===e){const t=this.children;for(let e=0,s=t.length;e<s;e++){t[e].updateWorldMatrix(!1,!0);}}}toJSON(t){const e=void 0===t||"string"==typeof t,s={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},s.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};function r(e,s){return void 0===e[s.uuid]&&(e[s.uuid]=s.toJSON(t)),s.uuid}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map((t=>({boxInitialized:t.boxInitialized,boxMin:t.box.min.toArray(),boxMax:t.box.max.toArray(),sphereInitialized:t.sphereInitialized,sphereRadius:t.sphere.radius,sphereCenter:t.sphere.center.toArray()}))),i.maxInstanceCount=this._maxInstanceCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(t),null!==this._colorsTexture&&(i.colorsTexture=this._colorsTexture.toJSON(t)),null!==this.boundingSphere&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),null!==this.boundingBox&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()})),this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const s=e.shapes;if(Array.isArray(s))for(let e=0,i=s.length;e<i;e++){const i=s[e];r(t.shapes,i);}else r(t.shapes,s);}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let s=0,i=this.material.length;s<i;s++)e.push(r(t.materials,this.material[s]));i.material=e;}else i.material=r(t.materials,this.material);if(this.children.length>0){i.children=[];for(let e=0;e<this.children.length;e++)i.children.push(this.children[e].toJSON(t).object);}if(this.animations.length>0){i.animations=[];for(let e=0;e<this.animations.length;e++){const s=this.animations[e];i.animations.push(r(t.animations,s));}}if(e){const e=n(t.geometries),i=n(t.materials),r=n(t.textures),o=n(t.images),a=n(t.shapes),h=n(t.skeletons),l=n(t.animations),c=n(t.nodes);e.length>0&&(s.geometries=e),i.length>0&&(s.materials=i),r.length>0&&(s.textures=r),o.length>0&&(s.images=o),a.length>0&&(s.shapes=a),h.length>0&&(s.skeletons=h),l.length>0&&(s.animations=l),c.length>0&&(s.nodes=c);}return s.object=i,s;function n(t){const e=[];for(const s in t){const i=t[s];delete i.metadata,e.push(i);}return e}}clone(t){return (new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){const s=t.children[e];this.add(s.clone());}return this}};Er$1.DEFAULT_UP=new Ii$1(0,1,0),Er$1.DEFAULT_MATRIX_AUTO_UPDATE=!0,Er$1.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Rr$1=new Ii$1,Pr$1=new Ii$1,Or$1=new Ii$1,Fr$1=new Ii$1,Nr$1=new Ii$1,Lr$1=new Ii$1,Vr$1=new Ii$1,Wr$1=new Ii$1,Ur$1=new Ii$1,jr$1=new Ii$1,Dr$1=new wi$1,Hr$1=new wi$1,qr$1=new wi$1;let Jr$1 = class Jr{constructor(t=new Ii$1,e=new Ii$1,s=new Ii$1){this.a=t,this.b=e,this.c=s;}static getNormal(t,e,s,i){i.subVectors(s,e),Rr$1.subVectors(t,e),i.cross(Rr$1);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(t,e,s,i,r){Rr$1.subVectors(i,e),Pr$1.subVectors(s,e),Or$1.subVectors(t,e);const n=Rr$1.dot(Rr$1),o=Rr$1.dot(Pr$1),a=Rr$1.dot(Or$1),h=Pr$1.dot(Pr$1),l=Pr$1.dot(Or$1),c=n*h-o*o;if(0===c)return r.set(0,0,0),null;const u=1/c,d=(h*a-o*l)*u,p=(n*l-o*a)*u;return r.set(1-d-p,p,d)}static containsPoint(t,e,s,i){return null!==this.getBarycoord(t,e,s,i,Fr$1)&&(Fr$1.x>=0&&Fr$1.y>=0&&Fr$1.x+Fr$1.y<=1)}static getInterpolation(t,e,s,i,r,n,o,a){return null===this.getBarycoord(t,e,s,i,Fr$1)?(a.x=0,a.y=0,"z"in a&&(a.z=0),"w"in a&&(a.w=0),null):(a.setScalar(0),a.addScaledVector(r,Fr$1.x),a.addScaledVector(n,Fr$1.y),a.addScaledVector(o,Fr$1.z),a)}static getInterpolatedAttribute(t,e,s,i,r,n){return Dr$1.setScalar(0),Hr$1.setScalar(0),qr$1.setScalar(0),Dr$1.fromBufferAttribute(t,e),Hr$1.fromBufferAttribute(t,s),qr$1.fromBufferAttribute(t,i),n.setScalar(0),n.addScaledVector(Dr$1,r.x),n.addScaledVector(Hr$1,r.y),n.addScaledVector(qr$1,r.z),n}static isFrontFacing(t,e,s,i){return Rr$1.subVectors(s,e),Pr$1.subVectors(t,e),Rr$1.cross(Pr$1).dot(i)<0}set(t,e,s){return this.a.copy(t),this.b.copy(e),this.c.copy(s),this}setFromPointsAndIndices(t,e,s,i){return this.a.copy(t[e]),this.b.copy(t[s]),this.c.copy(t[i]),this}setFromAttributeAndIndices(t,e,s,i){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,s),this.c.fromBufferAttribute(t,i),this}clone(){return (new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Rr$1.subVectors(this.c,this.b),Pr$1.subVectors(this.a,this.b),.5*Rr$1.cross(Pr$1).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Jr.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Jr.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,s,i,r){return Jr.getInterpolation(t,this.a,this.b,this.c,e,s,i,r)}containsPoint(t){return Jr.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Jr.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const s=this.a,i=this.b,r=this.c;let n,o;Nr$1.subVectors(i,s),Lr$1.subVectors(r,s),Wr$1.subVectors(t,s);const a=Nr$1.dot(Wr$1),h=Lr$1.dot(Wr$1);if(a<=0&&h<=0)return e.copy(s);Ur$1.subVectors(t,i);const l=Nr$1.dot(Ur$1),c=Lr$1.dot(Ur$1);if(l>=0&&c<=l)return e.copy(i);const u=a*c-l*h;if(u<=0&&a>=0&&l<=0)return n=a/(a-l),e.copy(s).addScaledVector(Nr$1,n);jr$1.subVectors(t,r);const d=Nr$1.dot(jr$1),p=Lr$1.dot(jr$1);if(p>=0&&d<=p)return e.copy(r);const m=d*h-a*p;if(m<=0&&h>=0&&p<=0)return o=h/(h-p),e.copy(s).addScaledVector(Lr$1,o);const y=l*p-d*c;if(y<=0&&c-l>=0&&d-p>=0)return Vr$1.subVectors(r,i),o=(c-l)/(c-l+(d-p)),e.copy(i).addScaledVector(Vr$1,o);const f=1/(y+m+u);return n=m*f,o=u*f,e.copy(s).addScaledVector(Nr$1,n).addScaledVector(Lr$1,o)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}};const Xr$1={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Yr$1={h:0,s:0,l:0},Zr$1={h:0,s:0,l:0};function Gr$1(t,e,s){return s<0&&(s+=1),s>1&&(s-=1),s<1/6?t+6*(e-t)*s:s<.5?e:s<2/3?t+6*(e-t)*(2/3-s):t}let $r$1 = class $r{constructor(t,e,s){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,s)}set(t,e,s){if(void 0===e&&void 0===s){const e=t;e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e);}else this.setRGB(t,e,s);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=Ge){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,ui$1.toWorkingColorSpace(this,e),this}setRGB(t,e,s,i=ui$1.workingColorSpace){return this.r=t,this.g=e,this.b=s,ui$1.toWorkingColorSpace(this,i),this}setHSL(t,e,s,i=ui$1.workingColorSpace){if(t=Hs(t,1),e=Ds(e,0,1),s=Ds(s,0,1),0===e)this.r=this.g=this.b=s;else {const i=s<=.5?s*(1+e):s+e-s*e,r=2*s-i;this.r=Gr$1(r,i,t+1/3),this.g=Gr$1(r,i,t),this.b=Gr$1(r,i,t-1/3);}return ui$1.toWorkingColorSpace(this,i),this}setStyle(t,e=Ge){function s(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.");}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(t)){let r;const n=i[1],o=i[2];switch(n){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return s(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,e);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return s(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,e);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return s(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t);}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const s=i[1],r=s.length;if(3===r)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,e);if(6===r)return this.setHex(parseInt(s,16),e);console.warn("THREE.Color: Invalid hex color "+t);}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=Ge){const s=Xr$1[t.toLowerCase()];return void 0!==s?this.setHex(s,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=di$1(t.r),this.g=di$1(t.g),this.b=di$1(t.b),this}copyLinearToSRGB(t){return this.r=pi$2(t.r),this.g=pi$2(t.g),this.b=pi$2(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=Ge){return ui$1.fromWorkingColorSpace(Qr$1.copy(this),t),65536*Math.round(Ds(255*Qr$1.r,0,255))+256*Math.round(Ds(255*Qr$1.g,0,255))+Math.round(Ds(255*Qr$1.b,0,255))}getHexString(t=Ge){return ("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=ui$1.workingColorSpace){ui$1.fromWorkingColorSpace(Qr$1.copy(this),e);const s=Qr$1.r,i=Qr$1.g,r=Qr$1.b,n=Math.max(s,i,r),o=Math.min(s,i,r);let a,h;const l=(o+n)/2;if(o===n)a=0,h=0;else {const t=n-o;switch(h=l<=.5?t/(n+o):t/(2-n-o),n){case s:a=(i-r)/t+(i<r?6:0);break;case i:a=(r-s)/t+2;break;case r:a=(s-i)/t+4;}a/=6;}return t.h=a,t.s=h,t.l=l,t}getRGB(t,e=ui$1.workingColorSpace){return ui$1.fromWorkingColorSpace(Qr$1.copy(this),e),t.r=Qr$1.r,t.g=Qr$1.g,t.b=Qr$1.b,t}getStyle(t=Ge){ui$1.fromWorkingColorSpace(Qr$1.copy(this),t);const e=Qr$1.r,s=Qr$1.g,i=Qr$1.b;return t!==Ge?`color(${t} ${e.toFixed(3)} ${s.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(255*e)},${Math.round(255*s)},${Math.round(255*i)})`}offsetHSL(t,e,s){return this.getHSL(Yr$1),this.setHSL(Yr$1.h+t,Yr$1.s+e,Yr$1.l+s)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,s){return this.r=t.r+(e.r-t.r)*s,this.g=t.g+(e.g-t.g)*s,this.b=t.b+(e.b-t.b)*s,this}lerpHSL(t,e){this.getHSL(Yr$1),t.getHSL(Zr$1);const s=qs(Yr$1.h,Zr$1.h,e),i=qs(Yr$1.s,Zr$1.s,e),r=qs(Yr$1.l,Zr$1.l,e);return this.setHSL(s,i,r),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,s=this.g,i=this.b,r=t.elements;return this.r=r[0]*e+r[3]*s+r[6]*i,this.g=r[1]*e+r[4]*s+r[7]*i,this.b=r[2]*e+r[5]*s+r[8]*i,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b;}};const Qr$1=new $r$1;$r$1.NAMES=Xr$1;let Kr$1=0;class tn extends Ns{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:Kr$1++}),this.uuid=js(),this.name="",this.type="Material",this.blending=1,this.side=u$1,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=100,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new $r$1(0,0,0),this.blendAlpha=0,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=es,this.stencilZFail=es,this.stencilZPass=es,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0;}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t;}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const s=t[e];if(void 0===s){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const i=this[e];void 0!==i?i&&i.isColor?i.set(s):i&&i.isVector3&&s&&s.isVector3?i.copy(s):this[e]=s:console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);}}toJSON(t){const e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});const s={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};function i(t){const e=[];for(const s in t){const i=t[s];delete i.metadata,e.push(i);}return e}if(s.uuid=this.uuid,s.type=this.type,""!==this.name&&(s.name=this.name),this.color&&this.color.isColor&&(s.color=this.color.getHex()),void 0!==this.roughness&&(s.roughness=this.roughness),void 0!==this.metalness&&(s.metalness=this.metalness),void 0!==this.sheen&&(s.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(s.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(s.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(s.emissive=this.emissive.getHex()),void 0!==this.emissiveIntensity&&1!==this.emissiveIntensity&&(s.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(s.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(s.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(s.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(s.shininess=this.shininess),void 0!==this.clearcoat&&(s.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(s.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(s.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(s.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(s.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,s.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.dispersion&&(s.dispersion=this.dispersion),void 0!==this.iridescence&&(s.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(s.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(s.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(s.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(s.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),void 0!==this.anisotropy&&(s.anisotropy=this.anisotropy),void 0!==this.anisotropyRotation&&(s.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(s.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(s.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(s.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(s.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(s.lightMap=this.lightMap.toJSON(t).uuid,s.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(s.aoMap=this.aoMap.toJSON(t).uuid,s.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(s.bumpMap=this.bumpMap.toJSON(t).uuid,s.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(s.normalMap=this.normalMap.toJSON(t).uuid,s.normalMapType=this.normalMapType,s.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(s.displacementMap=this.displacementMap.toJSON(t).uuid,s.displacementScale=this.displacementScale,s.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(s.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(s.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(s.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(s.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(s.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(s.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(s.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(s.combine=this.combine)),void 0!==this.envMapRotation&&(s.envMapRotation=this.envMapRotation.toArray()),void 0!==this.envMapIntensity&&(s.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(s.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(s.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(s.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(s.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(s.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(s.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(s.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&this.attenuationDistance!==1/0&&(s.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(s.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(s.size=this.size),null!==this.shadowSide&&(s.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(s.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(s.blending=this.blending),this.side!==u$1&&(s.side=this.side),!0===this.vertexColors&&(s.vertexColors=!0),this.opacity<1&&(s.opacity=this.opacity),!0===this.transparent&&(s.transparent=!0),204!==this.blendSrc&&(s.blendSrc=this.blendSrc),205!==this.blendDst&&(s.blendDst=this.blendDst),100!==this.blendEquation&&(s.blendEquation=this.blendEquation),null!==this.blendSrcAlpha&&(s.blendSrcAlpha=this.blendSrcAlpha),null!==this.blendDstAlpha&&(s.blendDstAlpha=this.blendDstAlpha),null!==this.blendEquationAlpha&&(s.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(s.blendColor=this.blendColor.getHex()),0!==this.blendAlpha&&(s.blendAlpha=this.blendAlpha),3!==this.depthFunc&&(s.depthFunc=this.depthFunc),!1===this.depthTest&&(s.depthTest=this.depthTest),!1===this.depthWrite&&(s.depthWrite=this.depthWrite),!1===this.colorWrite&&(s.colorWrite=this.colorWrite),255!==this.stencilWriteMask&&(s.stencilWriteMask=this.stencilWriteMask),519!==this.stencilFunc&&(s.stencilFunc=this.stencilFunc),0!==this.stencilRef&&(s.stencilRef=this.stencilRef),255!==this.stencilFuncMask&&(s.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==es&&(s.stencilFail=this.stencilFail),this.stencilZFail!==es&&(s.stencilZFail=this.stencilZFail),this.stencilZPass!==es&&(s.stencilZPass=this.stencilZPass),!0===this.stencilWrite&&(s.stencilWrite=this.stencilWrite),void 0!==this.rotation&&0!==this.rotation&&(s.rotation=this.rotation),!0===this.polygonOffset&&(s.polygonOffset=!0),0!==this.polygonOffsetFactor&&(s.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(s.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(s.linewidth=this.linewidth),void 0!==this.dashSize&&(s.dashSize=this.dashSize),void 0!==this.gapSize&&(s.gapSize=this.gapSize),void 0!==this.scale&&(s.scale=this.scale),!0===this.dithering&&(s.dithering=!0),this.alphaTest>0&&(s.alphaTest=this.alphaTest),!0===this.alphaHash&&(s.alphaHash=!0),!0===this.alphaToCoverage&&(s.alphaToCoverage=!0),!0===this.premultipliedAlpha&&(s.premultipliedAlpha=!0),!0===this.forceSinglePass&&(s.forceSinglePass=!0),!0===this.wireframe&&(s.wireframe=!0),this.wireframeLinewidth>1&&(s.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(s.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(s.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(s.flatShading=!0),!1===this.visible&&(s.visible=!1),!1===this.toneMapped&&(s.toneMapped=!1),!1===this.fog&&(s.fog=!1),Object.keys(this.userData).length>0&&(s.userData=this.userData),e){const e=i(t.textures),r=i(t.images);e.length>0&&(s.textures=e),r.length>0&&(s.images=r);}return s}clone(){return (new this.constructor).copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let s=null;if(null!==e){const t=e.length;s=new Array(t);for(let i=0;i!==t;++i)s[i]=e[i].clone();}return this.clippingPlanes=s,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"});}set needsUpdate(t){!0===t&&this.version++;}onBuild(){console.warn("Material: onBuild() has been removed.");}}class en extends tn{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new $r$1(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new yr$1,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t);}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}rn();function rn(){const t=new ArrayBuffer(4),e=new Float32Array(t),s=new Uint32Array(t),i=new Uint32Array(512),r=new Uint32Array(512);for(let t=0;t<256;++t){const e=t-127;e<-27?(i[t]=0,i[256|t]=32768,r[t]=24,r[256|t]=24):e<-14?(i[t]=1024>>-e-14,i[256|t]=1024>>-e-14|32768,r[t]=-e-1,r[256|t]=-e-1):e<=15?(i[t]=e+15<<10,i[256|t]=e+15<<10|32768,r[t]=13,r[256|t]=13):e<128?(i[t]=31744,i[256|t]=64512,r[t]=24,r[256|t]=24):(i[t]=31744,i[256|t]=64512,r[t]=13,r[256|t]=13);}const n=new Uint32Array(2048),o=new Uint32Array(64),a=new Uint32Array(64);for(let t=1;t<1024;++t){let e=t<<13,s=0;for(;0==(8388608&e);)e<<=1,s-=8388608;e&=-8388609,s+=947912704,n[t]=e|s;}for(let t=1024;t<2048;++t)n[t]=939524096+(t-1024<<13);for(let t=1;t<31;++t)o[t]=t<<23;o[31]=1199570944,o[32]=2147483648;for(let t=33;t<63;++t)o[t]=2147483648+(t-32<<23);o[63]=3347054592;for(let t=1;t<64;++t)32!==t&&(a[t]=1024);return {floatView:e,uint32View:s,baseTable:i,shiftTable:r,mantissaTable:n,exponentTable:o,offsetTable:a}}const hn=new Ii$1,ln=new Zs;class cn{constructor(t,e,s=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=s,this.usage=_s,this.updateRanges=[],this.gpuType=Et,this.version=0;}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++;}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e});}clearUpdateRanges(){this.updateRanges.length=0;}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,s){t*=this.itemSize,s*=e.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[s+i];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,s=this.count;e<s;e++)ln.fromBufferAttribute(this,e),ln.applyMatrix3(t),this.setXY(e,ln.x,ln.y);else if(3===this.itemSize)for(let e=0,s=this.count;e<s;e++)hn.fromBufferAttribute(this,e),hn.applyMatrix3(t),this.setXYZ(e,hn.x,hn.y,hn.z);return this}applyMatrix4(t){for(let e=0,s=this.count;e<s;e++)hn.fromBufferAttribute(this,e),hn.applyMatrix4(t),this.setXYZ(e,hn.x,hn.y,hn.z);return this}applyNormalMatrix(t){for(let e=0,s=this.count;e<s;e++)hn.fromBufferAttribute(this,e),hn.applyNormalMatrix(t),this.setXYZ(e,hn.x,hn.y,hn.z);return this}transformDirection(t){for(let e=0,s=this.count;e<s;e++)hn.fromBufferAttribute(this,e),hn.transformDirection(t),this.setXYZ(e,hn.x,hn.y,hn.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let s=this.array[t*this.itemSize+e];return this.normalized&&(s=Js(s,this.array)),s}setComponent(t,e,s){return this.normalized&&(s=Xs(s,this.array)),this.array[t*this.itemSize+e]=s,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=Js(e,this.array)),e}setX(t,e){return this.normalized&&(e=Xs(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=Js(e,this.array)),e}setY(t,e){return this.normalized&&(e=Xs(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=Js(e,this.array)),e}setZ(t,e){return this.normalized&&(e=Xs(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=Js(e,this.array)),e}setW(t,e){return this.normalized&&(e=Xs(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,s){return t*=this.itemSize,this.normalized&&(e=Xs(e,this.array),s=Xs(s,this.array)),this.array[t+0]=e,this.array[t+1]=s,this}setXYZ(t,e,s,i){return t*=this.itemSize,this.normalized&&(e=Xs(e,this.array),s=Xs(s,this.array),i=Xs(i,this.array)),this.array[t+0]=e,this.array[t+1]=s,this.array[t+2]=i,this}setXYZW(t,e,s,i,r){return t*=this.itemSize,this.normalized&&(e=Xs(e,this.array),s=Xs(s,this.array),i=Xs(i,this.array),r=Xs(r,this.array)),this.array[t+0]=e,this.array[t+1]=s,this.array[t+2]=i,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return ""!==this.name&&(t.name=this.name),this.usage!==_s&&(t.usage=this.usage),t}}let yn$1 = class yn extends cn{constructor(t,e,s){super(new Uint16Array(t),e,s);}};class gn extends cn{constructor(t,e,s){super(new Uint32Array(t),e,s);}}class bn extends cn{constructor(t,e,s){super(new Float32Array(t),e,s);}}let vn=0;const wn$1=new nr$1,Mn=new Er$1,Sn=new Ii$1,_n=new Ei$1,An=new Ei$1,Tn=new Ii$1;let zn$1 = class zn extends Ns{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:vn++}),this.uuid=js(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={};}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(Qs(t)?gn:yn$1)(t,1):this.index=t,this}setIndirect(t){return this.indirect=t,this}getIndirect(){return this.indirect}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,s=0){this.groups.push({start:t,count:e,materialIndex:s});}clearGroups(){this.groups=[];}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e;}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const s=this.attributes.normal;if(void 0!==s){const e=(new Gs).getNormalMatrix(t);s.applyNormalMatrix(e),s.needsUpdate=!0;}const i=this.attributes.tangent;return void 0!==i&&(i.transformDirection(t),i.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return wn$1.makeRotationFromQuaternion(t),this.applyMatrix4(wn$1),this}rotateX(t){return wn$1.makeRotationX(t),this.applyMatrix4(wn$1),this}rotateY(t){return wn$1.makeRotationY(t),this.applyMatrix4(wn$1),this}rotateZ(t){return wn$1.makeRotationZ(t),this.applyMatrix4(wn$1),this}translate(t,e,s){return wn$1.makeTranslation(t,e,s),this.applyMatrix4(wn$1),this}scale(t,e,s){return wn$1.makeScale(t,e,s),this.applyMatrix4(wn$1),this}lookAt(t){return Mn.lookAt(t),Mn.updateMatrix(),this.applyMatrix4(Mn.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Sn).negate(),this.translate(Sn.x,Sn.y,Sn.z),this}setFromPoints(t){const e=this.getAttribute("position");if(void 0===e){const e=[];for(let s=0,i=t.length;s<i;s++){const i=t[s];e.push(i.x,i.y,i.z||0);}this.setAttribute("position",new bn(e,3));}else {const s=Math.min(t.length,e.count);for(let i=0;i<s;i++){const s=t[i];e.setXYZ(i,s.x,s.y,s.z||0);}t.length>e.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),e.needsUpdate=!0;}return this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new Ei$1);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),void this.boundingBox.set(new Ii$1(-1/0,-1/0,-1/0),new Ii$1(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,s=e.length;t<s;t++){const s=e[t];_n.setFromBufferAttribute(s),this.morphTargetsRelative?(Tn.addVectors(this.boundingBox.min,_n.min),this.boundingBox.expandByPoint(Tn),Tn.addVectors(this.boundingBox.max,_n.max),this.boundingBox.expandByPoint(Tn)):(this.boundingBox.expandByPoint(_n.min),this.boundingBox.expandByPoint(_n.max));}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this);}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Gi$1);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),void this.boundingSphere.set(new Ii$1,1/0);if(t){const s=this.boundingSphere.center;if(_n.setFromBufferAttribute(t),e)for(let t=0,s=e.length;t<s;t++){const s=e[t];An.setFromBufferAttribute(s),this.morphTargetsRelative?(Tn.addVectors(_n.min,An.min),_n.expandByPoint(Tn),Tn.addVectors(_n.max,An.max),_n.expandByPoint(Tn)):(_n.expandByPoint(An.min),_n.expandByPoint(An.max));}_n.getCenter(s);let i=0;for(let e=0,r=t.count;e<r;e++)Tn.fromBufferAttribute(t,e),i=Math.max(i,s.distanceToSquared(Tn));if(e)for(let r=0,n=e.length;r<n;r++){const n=e[r],o=this.morphTargetsRelative;for(let e=0,r=n.count;e<r;e++)Tn.fromBufferAttribute(n,e),o&&(Sn.fromBufferAttribute(t,e),Tn.add(Sn)),i=Math.max(i,s.distanceToSquared(Tn));}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this);}}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const s=e.position,i=e.normal,r=e.uv;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new cn(new Float32Array(4*s.count),4));const n=this.getAttribute("tangent"),o=[],a=[];for(let t=0;t<s.count;t++)o[t]=new Ii$1,a[t]=new Ii$1;const h=new Ii$1,l=new Ii$1,c=new Ii$1,u=new Zs,d=new Zs,p=new Zs,m=new Ii$1,y=new Ii$1;function f(t,e,i){h.fromBufferAttribute(s,t),l.fromBufferAttribute(s,e),c.fromBufferAttribute(s,i),u.fromBufferAttribute(r,t),d.fromBufferAttribute(r,e),p.fromBufferAttribute(r,i),l.sub(h),c.sub(h),d.sub(u),p.sub(u);const n=1/(d.x*p.y-p.x*d.y);isFinite(n)&&(m.copy(l).multiplyScalar(p.y).addScaledVector(c,-d.y).multiplyScalar(n),y.copy(c).multiplyScalar(d.x).addScaledVector(l,-p.x).multiplyScalar(n),o[t].add(m),o[e].add(m),o[i].add(m),a[t].add(y),a[e].add(y),a[i].add(y));}let g=this.groups;0===g.length&&(g=[{start:0,count:t.count}]);for(let e=0,s=g.length;e<s;++e){const s=g[e],i=s.start;for(let e=i,r=i+s.count;e<r;e+=3)f(t.getX(e+0),t.getX(e+1),t.getX(e+2));}const x=new Ii$1,b=new Ii$1,v=new Ii$1,w=new Ii$1;function M(t){v.fromBufferAttribute(i,t),w.copy(v);const e=o[t];x.copy(e),x.sub(v.multiplyScalar(v.dot(e))).normalize(),b.crossVectors(w,e);const s=b.dot(a[t])<0?-1:1;n.setXYZW(t,x.x,x.y,x.z,s);}for(let e=0,s=g.length;e<s;++e){const s=g[e],i=s.start;for(let e=i,r=i+s.count;e<r;e+=3)M(t.getX(e+0)),M(t.getX(e+1)),M(t.getX(e+2));}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(void 0!==e){let s=this.getAttribute("normal");if(void 0===s)s=new cn(new Float32Array(3*e.count),3),this.setAttribute("normal",s);else for(let t=0,e=s.count;t<e;t++)s.setXYZ(t,0,0,0);const i=new Ii$1,r=new Ii$1,n=new Ii$1,o=new Ii$1,a=new Ii$1,h=new Ii$1,l=new Ii$1,c=new Ii$1;if(t)for(let u=0,d=t.count;u<d;u+=3){const d=t.getX(u+0),p=t.getX(u+1),m=t.getX(u+2);i.fromBufferAttribute(e,d),r.fromBufferAttribute(e,p),n.fromBufferAttribute(e,m),l.subVectors(n,r),c.subVectors(i,r),l.cross(c),o.fromBufferAttribute(s,d),a.fromBufferAttribute(s,p),h.fromBufferAttribute(s,m),o.add(l),a.add(l),h.add(l),s.setXYZ(d,o.x,o.y,o.z),s.setXYZ(p,a.x,a.y,a.z),s.setXYZ(m,h.x,h.y,h.z);}else for(let t=0,o=e.count;t<o;t+=3)i.fromBufferAttribute(e,t+0),r.fromBufferAttribute(e,t+1),n.fromBufferAttribute(e,t+2),l.subVectors(n,r),c.subVectors(i,r),l.cross(c),s.setXYZ(t+0,l.x,l.y,l.z),s.setXYZ(t+1,l.x,l.y,l.z),s.setXYZ(t+2,l.x,l.y,l.z);this.normalizeNormals(),s.needsUpdate=!0;}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,s=t.count;e<s;e++)Tn.fromBufferAttribute(t,e),Tn.normalize(),t.setXYZ(e,Tn.x,Tn.y,Tn.z);}toNonIndexed(){function t(t,e){const s=t.array,i=t.itemSize,r=t.normalized,n=new s.constructor(e.length*i);let o=0,a=0;for(let r=0,h=e.length;r<h;r++){o=t.isInterleavedBufferAttribute?e[r]*t.data.stride+t.offset:e[r]*i;for(let t=0;t<i;t++)n[a++]=s[o++];}return new cn(n,i,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new zn,s=this.index.array,i=this.attributes;for(const r in i){const n=t(i[r],s);e.setAttribute(r,n);}const r=this.morphAttributes;for(const i in r){const n=[],o=r[i];for(let e=0,i=o.length;e<i;e++){const i=t(o[e],s);n.push(i);}e.morphAttributes[i]=n;}e.morphTargetsRelative=this.morphTargetsRelative;const n=this.groups;for(let t=0,s=n.length;t<s;t++){const s=n[t];e.addGroup(s.start,s.count,s.materialIndex);}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const s in e)void 0!==e[s]&&(t[s]=e[s]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const s=this.attributes;for(const e in s){const i=s[e];t.data.attributes[e]=i.toJSON(t.data);}const i={};let r=!1;for(const e in this.morphAttributes){const s=this.morphAttributes[e],n=[];for(let e=0,i=s.length;e<i;e++){const i=s[e];n.push(i.toJSON(t.data));}n.length>0&&(i[e]=n,r=!0);}r&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const n=this.groups;n.length>0&&(t.data.groups=JSON.parse(JSON.stringify(n)));const o=this.boundingSphere;return null!==o&&(t.data.boundingSphere={center:o.center.toArray(),radius:o.radius}),t}clone(){return (new this.constructor).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const s=t.index;null!==s&&this.setIndex(s.clone(e));const i=t.attributes;for(const t in i){const s=i[t];this.setAttribute(t,s.clone(e));}const r=t.morphAttributes;for(const t in r){const s=[],i=r[t];for(let t=0,r=i.length;t<r;t++)s.push(i[t].clone(e));this.morphAttributes[t]=s;}this.morphTargetsRelative=t.morphTargetsRelative;const n=t.groups;for(let t=0,e=n.length;t<e;t++){const e=n[t];this.addGroup(e.start,e.count,e.materialIndex);}const o=t.boundingBox;null!==o&&(this.boundingBox=o.clone());const a=t.boundingSphere;return null!==a&&(this.boundingSphere=a.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"});}};const Cn=new nr$1,In$1=new rr$1,Bn$1=new Gi$1,kn$1=new Ii$1,En=new Ii$1,Rn=new Ii$1,Pn$1=new Ii$1,On$1=new Ii$1,Fn$1=new Ii$1,Nn$1=new Ii$1,Ln=new Ii$1;let Vn$1 = class Vn extends Er$1{constructor(t=new zn$1,e=new en){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets();}copy(t,e){return super.copy(t,e),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const s=t[e[0]];if(void 0!==s){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=s.length;t<e;t++){const e=s[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t;}}}}getVertexPosition(t,e){const s=this.geometry,i=s.attributes.position,r=s.morphAttributes.position,n=s.morphTargetsRelative;e.fromBufferAttribute(i,t);const o=this.morphTargetInfluences;if(r&&o){Fn$1.set(0,0,0);for(let s=0,i=r.length;s<i;s++){const i=o[s],a=r[s];0!==i&&(On$1.fromBufferAttribute(a,t),n?Fn$1.addScaledVector(On$1,i):Fn$1.addScaledVector(On$1.sub(e),i));}e.add(Fn$1);}return e}raycast(t,e){const s=this.geometry,i=this.material,r=this.matrixWorld;if(void 0!==i){if(null===s.boundingSphere&&s.computeBoundingSphere(),Bn$1.copy(s.boundingSphere),Bn$1.applyMatrix4(r),In$1.copy(t.ray).recast(t.near),!1===Bn$1.containsPoint(In$1.origin)){if(null===In$1.intersectSphere(Bn$1,kn$1))return;if(In$1.origin.distanceToSquared(kn$1)>(t.far-t.near)**2)return}Cn.copy(r).invert(),In$1.copy(t.ray).applyMatrix4(Cn),null!==s.boundingBox&&!1===In$1.intersectsBox(s.boundingBox)||this._computeIntersections(t,e,In$1);}}_computeIntersections(t,e,s){let i;const r=this.geometry,n=this.material,o=r.index,a=r.attributes.position,h=r.attributes.uv,l=r.attributes.uv1,c=r.attributes.normal,u=r.groups,d=r.drawRange;if(null!==o)if(Array.isArray(n))for(let r=0,a=u.length;r<a;r++){const a=u[r],p=n[a.materialIndex];for(let r=Math.max(a.start,d.start),n=Math.min(o.count,Math.min(a.start+a.count,d.start+d.count));r<n;r+=3){i=Wn$1(this,p,t,s,h,l,c,o.getX(r),o.getX(r+1),o.getX(r+2)),i&&(i.faceIndex=Math.floor(r/3),i.face.materialIndex=a.materialIndex,e.push(i));}}else {for(let r=Math.max(0,d.start),a=Math.min(o.count,d.start+d.count);r<a;r+=3){i=Wn$1(this,n,t,s,h,l,c,o.getX(r),o.getX(r+1),o.getX(r+2)),i&&(i.faceIndex=Math.floor(r/3),e.push(i));}}else if(void 0!==a)if(Array.isArray(n))for(let r=0,o=u.length;r<o;r++){const o=u[r],p=n[o.materialIndex];for(let r=Math.max(o.start,d.start),n=Math.min(a.count,Math.min(o.start+o.count,d.start+d.count));r<n;r+=3){i=Wn$1(this,p,t,s,h,l,c,r,r+1,r+2),i&&(i.faceIndex=Math.floor(r/3),i.face.materialIndex=o.materialIndex,e.push(i));}}else {for(let r=Math.max(0,d.start),o=Math.min(a.count,d.start+d.count);r<o;r+=3){i=Wn$1(this,n,t,s,h,l,c,r,r+1,r+2),i&&(i.faceIndex=Math.floor(r/3),e.push(i));}}}};function Wn$1(t,e,s,i,r,n,o,a,h,l){t.getVertexPosition(a,En),t.getVertexPosition(h,Rn),t.getVertexPosition(l,Pn$1);const c=function(t,e,s,i,r,n,o,a){let h;if(h=e.side===d$1?i.intersectTriangle(o,n,r,!0,a):i.intersectTriangle(r,n,o,e.side===u$1,a),null===h)return null;Ln.copy(a),Ln.applyMatrix4(t.matrixWorld);const l=s.ray.origin.distanceTo(Ln);return l<s.near||l>s.far?null:{distance:l,point:Ln.clone(),object:t}}(t,e,s,i,En,Rn,Pn$1,Nn$1);if(c){const t=new Ii$1;Jr$1.getBarycoord(Nn$1,En,Rn,Pn$1,t),r&&(c.uv=Jr$1.getInterpolatedAttribute(r,a,h,l,t,new Zs)),n&&(c.uv1=Jr$1.getInterpolatedAttribute(n,a,h,l,t,new Zs)),o&&(c.normal=Jr$1.getInterpolatedAttribute(o,a,h,l,t,new Ii$1),c.normal.dot(i.direction)>0&&c.normal.multiplyScalar(-1));const e={a:a,b:h,c:l,normal:new Ii$1,materialIndex:0};Jr$1.getNormal(En,Rn,Pn$1,e.normal),c.face=e,c.barycoord=t;}return c}let Un$1 = class Un extends zn$1{constructor(t=1,e=1,s=1,i=1,r=1,n=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:s,widthSegments:i,heightSegments:r,depthSegments:n};const o=this;i=Math.floor(i),r=Math.floor(r),n=Math.floor(n);const a=[],h=[],l=[],c=[];let u=0,d=0;function p(t,e,s,i,r,n,p,m,y,f,g){const x=n/y,b=p/f,v=n/2,w=p/2,M=m/2,S=y+1,_=f+1;let A=0,T=0;const z=new Ii$1;for(let n=0;n<_;n++){const o=n*b-w;for(let a=0;a<S;a++){const u=a*x-v;z[t]=u*i,z[e]=o*r,z[s]=M,h.push(z.x,z.y,z.z),z[t]=0,z[e]=0,z[s]=m>0?1:-1,l.push(z.x,z.y,z.z),c.push(a/y),c.push(1-n/f),A+=1;}}for(let t=0;t<f;t++)for(let e=0;e<y;e++){const s=u+e+S*t,i=u+e+S*(t+1),r=u+(e+1)+S*(t+1),n=u+(e+1)+S*t;a.push(s,i,n),a.push(i,r,n),T+=6;}o.addGroup(d,T,g),d+=T,u+=A;}p("z","y","x",-1,-1,s,e,t,n,r,0),p("z","y","x",1,-1,s,e,-t,n,r,1),p("x","z","y",1,1,t,s,e,i,n,2),p("x","z","y",1,-1,t,s,-e,i,n,3),p("x","y","z",1,-1,t,e,s,i,r,4),p("x","y","z",-1,-1,t,e,-s,i,r,5),this.setIndex(a),this.setAttribute("position",new bn(h,3)),this.setAttribute("normal",new bn(l,3)),this.setAttribute("uv",new bn(c,2));}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new Un(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}};function jn$1(t){const e={};for(const s in t){e[s]={};for(const i in t[s]){const r=t[s][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?r.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[s][i]=null):e[s][i]=r.clone():Array.isArray(r)?e[s][i]=r.slice():e[s][i]=r;}}return e}function Dn$1(t){const e={};for(let s=0;s<t.length;s++){const i=jn$1(t[s]);for(const t in i)e[t]=i[t];}return e}function Hn$1(t){const e=t.getRenderTarget();return null===e?t.outputColorSpace:!0===e.isXRRenderTarget?e.texture.colorSpace:ui$1.workingColorSpace}const qn$1={clone:jn$1,merge:Dn$1};let Jn$1 = class Jn extends tn{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&this.setValues(t);}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=jn$1(t.uniforms),this.uniformsGroups=function(t){const e=[];for(let s=0;s<t.length;s++)e.push(t[s].clone());return e}(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const s in this.uniforms){const i=this.uniforms[s].value;i&&i.isTexture?e.uniforms[s]={type:"t",value:i.toJSON(t).uuid}:i&&i.isColor?e.uniforms[s]={type:"c",value:i.getHex()}:i&&i.isVector2?e.uniforms[s]={type:"v2",value:i.toArray()}:i&&i.isVector3?e.uniforms[s]={type:"v3",value:i.toArray()}:i&&i.isVector4?e.uniforms[s]={type:"v4",value:i.toArray()}:i&&i.isMatrix3?e.uniforms[s]={type:"m3",value:i.toArray()}:i&&i.isMatrix4?e.uniforms[s]={type:"m4",value:i.toArray()}:e.uniforms[s]={value:i};}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const s={};for(const t in this.extensions)!0===this.extensions[t]&&(s[t]=!0);return Object.keys(s).length>0&&(e.extensions=s),e}};let Xn$1 = class Xn extends Er$1{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new nr$1,this.projectionMatrix=new nr$1,this.projectionMatrixInverse=new nr$1,this.coordinateSystem=Os;}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert();}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert();}clone(){return (new this.constructor).copy(this)}};const Yn$1=new Ii$1,Zn$1=new Zs,Gn$1=new Zs;let $n$1 = class $n extends Xn$1{constructor(t=50,e=1,s=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=s,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix();}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*Us*Math.atan(e),this.updateProjectionMatrix();}getFocalLength(){const t=Math.tan(.5*Ws*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*Us*Math.atan(Math.tan(.5*Ws*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,s){Yn$1.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(Yn$1.x,Yn$1.y).multiplyScalar(-t/Yn$1.z),Yn$1.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),s.set(Yn$1.x,Yn$1.y).multiplyScalar(-t/Yn$1.z);}getViewSize(t,e){return this.getViewBounds(t,Zn$1,Gn$1),e.subVectors(Gn$1,Zn$1)}setViewOffset(t,e,s,i,r,n){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=s,this.view.offsetY=i,this.view.width=r,this.view.height=n,this.updateProjectionMatrix();}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix();}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*Ws*this.fov)/this.zoom,s=2*e,i=this.aspect*s,r=-.5*i;const n=this.view;if(null!==this.view&&this.view.enabled){const t=n.fullWidth,o=n.fullHeight;r+=n.offsetX*i/t,e-=n.offsetY*s/o,i*=n.width/t,s*=n.height/o;}const o=this.filmOffset;0!==o&&(r+=t*o/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,e,e-s,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert();}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}};const Qn$1=-90;let Kn$1 = class Kn extends Er$1{constructor(t,e,s){super(),this.type="CubeCamera",this.renderTarget=s,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new $n$1(Qn$1,1,t,e);i.layers=this.layers,this.add(i);const r=new $n$1(Qn$1,1,t,e);r.layers=this.layers,this.add(r);const n=new $n$1(Qn$1,1,t,e);n.layers=this.layers,this.add(n);const o=new $n$1(Qn$1,1,t,e);o.layers=this.layers,this.add(o);const a=new $n$1(Qn$1,1,t,e);a.layers=this.layers,this.add(a);const h=new $n$1(Qn$1,1,t,e);h.layers=this.layers,this.add(h);}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[s,i,r,n,o,a]=e;for(const t of e)this.remove(t);if(t===Os)s.up.set(0,1,0),s.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),n.up.set(0,0,1),n.lookAt(0,-1,0),o.up.set(0,1,0),o.lookAt(0,0,1),a.up.set(0,1,0),a.lookAt(0,0,-1);else {if(t!==Fs)throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);s.up.set(0,-1,0),s.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),n.up.set(0,0,-1),n.lookAt(0,-1,0),o.up.set(0,-1,0),o.lookAt(0,0,1),a.up.set(0,-1,0),a.lookAt(0,0,-1);}for(const t of e)this.add(t),t.updateMatrixWorld();}update(t,e){null===this.parent&&this.updateMatrixWorld();const{renderTarget:s,activeMipmapLevel:i}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[r,n,o,a,h,l]=this.children,c=t.getRenderTarget(),u=t.getActiveCubeFace(),d=t.getActiveMipmapLevel(),p=t.xr.enabled;t.xr.enabled=!1;const m=s.texture.generateMipmaps;s.texture.generateMipmaps=!1,t.setRenderTarget(s,0,i),t.render(e,r),t.setRenderTarget(s,1,i),t.render(e,n),t.setRenderTarget(s,2,i),t.render(e,o),t.setRenderTarget(s,3,i),t.render(e,a),t.setRenderTarget(s,4,i),t.render(e,h),s.texture.generateMipmaps=m,t.setRenderTarget(s,5,i),t.render(e,l),t.setRenderTarget(c,u,d),t.xr.enabled=p,s.texture.needsPMREMUpdate=!0;}};class to extends vi$1{constructor(t,e,s,i,r,n,o,a,h,l){super(t=void 0!==t?t:[],e=void 0!==e?e:ht,s,i,r,n,o,a,h,l),this.isCubeTexture=!0,this.flipY=!1;}get images(){return this.image}set images(t){this.image=t;}}class eo extends Si$1{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const s={width:t,height:t,depth:1},i=[s,s,s,s,s,s];this.texture=new to(i,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:wt;}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const s={uniforms:{tEquirect:{value:null}},vertexShader:"\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",fragmentShader:"\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"},i=new Un$1(5,5,5),r=new Jn$1({name:"CubemapFromEquirect",uniforms:jn$1(s.uniforms),vertexShader:s.vertexShader,fragmentShader:s.fragmentShader,side:d$1,blending:0});r.uniforms.tEquirect.value=e;const n=new Vn$1(i,r),o=e.minFilter;e.minFilter===_t&&(e.minFilter=wt);return new Kn$1(1,10,this).update(t,n),e.minFilter=o,n.geometry.dispose(),n.material.dispose(),this}clear(t,e,s,i){const r=t.getRenderTarget();for(let r=0;r<6;r++)t.setRenderTarget(this,r),t.clear(e,s,i);t.setRenderTarget(r);}}class so{constructor(t,e=25e-5){this.isFogExp2=!0,this.name="",this.color=new $r$1(t),this.density=e;}clone(){return new so(this.color,this.density)}toJSON(){return {type:"FogExp2",name:this.name,color:this.color.getHex(),density:this.density}}}class ro extends Er$1{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new yr$1,this.environmentIntensity=1,this.environmentRotation=new yr$1,this.overrideMaterial=null,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}));}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.fog&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),1!==this.backgroundIntensity&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),1!==this.environmentIntensity&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}}new Ii$1;new Ii$1;new Ii$1;new Ii$1;new Zs;new Zs;new nr$1;new Ii$1;new Ii$1;new Ii$1;new Zs;new Zs;new Zs;new Ii$1;new Ii$1;const Co=new Ii$1,Io=new wi$1,Bo=new wi$1,ko=new Ii$1,Eo=new nr$1,Ro=new Ii$1,Po=new Gi$1,Oo=new nr$1,Fo=new rr$1;class No extends Vn$1{constructor(t,e){super(t,e),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode=nt,this.bindMatrix=new nr$1,this.bindMatrixInverse=new nr$1,this.boundingBox=null,this.boundingSphere=null;}computeBoundingBox(){const t=this.geometry;null===this.boundingBox&&(this.boundingBox=new Ei$1),this.boundingBox.makeEmpty();const e=t.getAttribute("position");for(let t=0;t<e.count;t++)this.getVertexPosition(t,Ro),this.boundingBox.expandByPoint(Ro);}computeBoundingSphere(){const t=this.geometry;null===this.boundingSphere&&(this.boundingSphere=new Gi$1),this.boundingSphere.makeEmpty();const e=t.getAttribute("position");for(let t=0;t<e.count;t++)this.getVertexPosition(t,Ro),this.boundingSphere.expandByPoint(Ro);}copy(t,e){return super.copy(t,e),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this}raycast(t,e){const s=this.material,i=this.matrixWorld;void 0!==s&&(null===this.boundingSphere&&this.computeBoundingSphere(),Po.copy(this.boundingSphere),Po.applyMatrix4(i),!1!==t.ray.intersectsSphere(Po)&&(Oo.copy(i).invert(),Fo.copy(t.ray).applyMatrix4(Oo),null!==this.boundingBox&&!1===Fo.intersectsBox(this.boundingBox)||this._computeIntersections(t,e,Fo)));}getVertexPosition(t,e){return super.getVertexPosition(t,e),this.applyBoneTransform(t,e),e}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert();}pose(){this.skeleton.pose();}normalizeSkinWeights(){const t=new wi$1,e=this.geometry.attributes.skinWeight;for(let s=0,i=e.count;s<i;s++){t.fromBufferAttribute(e,s);const i=1/t.manhattanLength();i!==1/0?t.multiplyScalar(i):t.set(1,0,0,0),e.setXYZW(s,t.x,t.y,t.z,t.w);}}updateMatrixWorld(t){super.updateMatrixWorld(t),this.bindMode===nt?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode===ot?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode);}applyBoneTransform(t,e){const s=this.skeleton,i=this.geometry;Io.fromBufferAttribute(i.attributes.skinIndex,t),Bo.fromBufferAttribute(i.attributes.skinWeight,t),Co.copy(e).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let t=0;t<4;t++){const i=Bo.getComponent(t);if(0!==i){const r=Io.getComponent(t);Eo.multiplyMatrices(s.bones[r].matrixWorld,s.boneInverses[r]),e.addScaledVector(ko.copy(Co).applyMatrix4(Eo),i);}}return e.applyMatrix4(this.bindMatrixInverse)}}class Lo extends Er$1{constructor(){super(),this.isBone=!0,this.type="Bone";}}class Vo extends vi$1{constructor(t=null,e=1,s=1,i,r,n,o,a,h=1003,l=1003,c,u){super(null,n,o,a,h,l,i,r,c,u),this.isDataTexture=!0,this.image={data:t,width:e,height:s},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1;}}const Wo=new nr$1,Uo=new nr$1;class jo{constructor(t=[],e=[]){this.uuid=js(),this.bones=t.slice(0),this.boneInverses=e,this.boneMatrices=null,this.boneTexture=null,this.init();}init(){const t=this.bones,e=this.boneInverses;if(this.boneMatrices=new Float32Array(16*t.length),0===e.length)this.calculateInverses();else if(t.length!==e.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let t=0,e=this.bones.length;t<e;t++)this.boneInverses.push(new nr$1);}}calculateInverses(){this.boneInverses.length=0;for(let t=0,e=this.bones.length;t<e;t++){const e=new nr$1;this.bones[t]&&e.copy(this.bones[t].matrixWorld).invert(),this.boneInverses.push(e);}}pose(){for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&e.matrixWorld.copy(this.boneInverses[t]).invert();}for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&(e.parent&&e.parent.isBone?(e.matrix.copy(e.parent.matrixWorld).invert(),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale));}}update(){const t=this.bones,e=this.boneInverses,s=this.boneMatrices,i=this.boneTexture;for(let i=0,r=t.length;i<r;i++){const r=t[i]?t[i].matrixWorld:Uo;Wo.multiplyMatrices(r,e[i]),Wo.toArray(s,16*i);}null!==i&&(i.needsUpdate=!0);}clone(){return new jo(this.bones,this.boneInverses)}computeBoneTexture(){let t=Math.sqrt(4*this.bones.length);t=4*Math.ceil(t/4),t=Math.max(t,4);const e=new Float32Array(t*t*4);e.set(this.boneMatrices);const s=new Vo(e,t,t,Wt,Et);return s.needsUpdate=!0,this.boneMatrices=e,this.boneTexture=s,this}getBoneByName(t){for(let e=0,s=this.bones.length;e<s;e++){const s=this.bones[e];if(s.name===t)return s}}dispose(){null!==this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=null);}fromJSON(t,e){this.uuid=t.uuid;for(let s=0,i=t.bones.length;s<i;s++){const i=t.bones[s];let r=e[i];void 0===r&&(console.warn("THREE.Skeleton: No bone found with UUID:",i),r=new Lo),this.bones.push(r),this.boneInverses.push((new nr$1).fromArray(t.boneInverses[s]));}return this.init(),this}toJSON(){const t={metadata:{version:4.6,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};t.uuid=this.uuid;const e=this.bones,s=this.boneInverses;for(let i=0,r=e.length;i<r;i++){const r=e[i];t.bones.push(r.uuid);const n=s[i];t.boneInverses.push(n.toArray());}return t}}class Do extends cn{constructor(t,e,s,i=1){super(t,e,s),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=i;}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}const Ho=new nr$1,qo=new nr$1,Jo=[],Xo=new Ei$1,Yo=new nr$1,Zo=new Vn$1,Go=new Gi$1;class $o extends Vn$1{constructor(t,e,s){super(t,e),this.isInstancedMesh=!0,this.instanceMatrix=new Do(new Float32Array(16*s),16),this.instanceColor=null,this.morphTexture=null,this.count=s,this.boundingBox=null,this.boundingSphere=null;for(let t=0;t<s;t++)this.setMatrixAt(t,Yo);}computeBoundingBox(){const t=this.geometry,e=this.count;null===this.boundingBox&&(this.boundingBox=new Ei$1),null===t.boundingBox&&t.computeBoundingBox(),this.boundingBox.makeEmpty();for(let s=0;s<e;s++)this.getMatrixAt(s,Ho),Xo.copy(t.boundingBox).applyMatrix4(Ho),this.boundingBox.union(Xo);}computeBoundingSphere(){const t=this.geometry,e=this.count;null===this.boundingSphere&&(this.boundingSphere=new Gi$1),null===t.boundingSphere&&t.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let s=0;s<e;s++)this.getMatrixAt(s,Ho),Go.copy(t.boundingSphere).applyMatrix4(Ho),this.boundingSphere.union(Go);}copy(t,e){return super.copy(t,e),this.instanceMatrix.copy(t.instanceMatrix),null!==t.morphTexture&&(this.morphTexture=t.morphTexture.clone()),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t);}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t);}getMorphAt(t,e){const s=e.morphTargetInfluences,i=this.morphTexture.source.data.data,r=t*(s.length+1)+1;for(let t=0;t<s.length;t++)s[t]=i[r+t];}raycast(t,e){const s=this.matrixWorld,i=this.count;if(Zo.geometry=this.geometry,Zo.material=this.material,void 0!==Zo.material&&(null===this.boundingSphere&&this.computeBoundingSphere(),Go.copy(this.boundingSphere),Go.applyMatrix4(s),!1!==t.ray.intersectsSphere(Go)))for(let r=0;r<i;r++){this.getMatrixAt(r,Ho),qo.multiplyMatrices(s,Ho),Zo.matrixWorld=qo,Zo.raycast(t,Jo);for(let t=0,s=Jo.length;t<s;t++){const s=Jo[t];s.instanceId=r,s.object=this,e.push(s);}Jo.length=0;}}setColorAt(t,e){null===this.instanceColor&&(this.instanceColor=new Do(new Float32Array(3*this.instanceMatrix.count).fill(1),3)),e.toArray(this.instanceColor.array,3*t);}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t);}setMorphAt(t,e){const s=e.morphTargetInfluences,i=s.length+1;null===this.morphTexture&&(this.morphTexture=new Vo(new Float32Array(i*this.count),i,this.count,qt,Et));const r=this.morphTexture.source.data.data;let n=0;for(let t=0;t<s.length;t++)n+=s[t];const o=this.geometry.morphTargetsRelative?1:1-n,a=i*t;r[a]=o,r.set(s,a+1);}updateMorphTargets(){}dispose(){return this.dispatchEvent({type:"dispose"}),null!==this.morphTexture&&(this.morphTexture.dispose(),this.morphTexture=null),this}}const Qo=new Ii$1,Ko=new Ii$1,ta$1=new Gs;let ea$1 = class ea{constructor(t=new Ii$1(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e;}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,s,i){return this.normal.set(t,e,s),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,s){const i=Qo.subVectors(s,e).cross(Ko.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const s=t.delta(Qo),i=this.normal.dot(s);if(0===i)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:e.copy(t.start).addScaledVector(s,r)}intersectsLine(t){const e=this.distanceToPoint(t.start),s=this.distanceToPoint(t.end);return e<0&&s>0||s<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const s=e||ta$1.getNormalMatrix(t),i=this.coplanarPoint(Qo).applyMatrix4(t),r=this.normal.applyMatrix3(s).normalize();return this.constant=-i.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return (new this.constructor).copy(this)}};const sa$1=new Gi$1,ia$1=new Ii$1;let ra$1 = class ra{constructor(t=new ea$1,e=new ea$1,s=new ea$1,i=new ea$1,r=new ea$1,n=new ea$1){this.planes=[t,e,s,i,r,n];}set(t,e,s,i,r,n){const o=this.planes;return o[0].copy(t),o[1].copy(e),o[2].copy(s),o[3].copy(i),o[4].copy(r),o[5].copy(n),this}copy(t){const e=this.planes;for(let s=0;s<6;s++)e[s].copy(t.planes[s]);return this}setFromProjectionMatrix(t,e=2e3){const s=this.planes,i=t.elements,r=i[0],n=i[1],o=i[2],a=i[3],h=i[4],l=i[5],c=i[6],u=i[7],d=i[8],p=i[9],m=i[10],y=i[11],f=i[12],g=i[13],x=i[14],b=i[15];if(s[0].setComponents(a-r,u-h,y-d,b-f).normalize(),s[1].setComponents(a+r,u+h,y+d,b+f).normalize(),s[2].setComponents(a+n,u+l,y+p,b+g).normalize(),s[3].setComponents(a-n,u-l,y-p,b-g).normalize(),s[4].setComponents(a-o,u-c,y-m,b-x).normalize(),e===Os)s[5].setComponents(a+o,u+c,y+m,b+x).normalize();else {if(e!==Fs)throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);s[5].setComponents(o,c,m,x).normalize();}return this}intersectsObject(t){if(void 0!==t.boundingSphere)null===t.boundingSphere&&t.computeBoundingSphere(),sa$1.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else {const e=t.geometry;null===e.boundingSphere&&e.computeBoundingSphere(),sa$1.copy(e.boundingSphere).applyMatrix4(t.matrixWorld);}return this.intersectsSphere(sa$1)}intersectsSprite(t){return sa$1.center.set(0,0,0),sa$1.radius=.7071067811865476,sa$1.applyMatrix4(t.matrixWorld),this.intersectsSphere(sa$1)}intersectsSphere(t){const e=this.planes,s=t.center,i=-t.radius;for(let t=0;t<6;t++){if(e[t].distanceToPoint(s)<i)return !1}return !0}intersectsBox(t){const e=this.planes;for(let s=0;s<6;s++){const i=e[s];if(ia$1.x=i.normal.x>0?t.max.x:t.min.x,ia$1.y=i.normal.y>0?t.max.y:t.min.y,ia$1.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(ia$1)<0)return !1}return !0}containsPoint(t){const e=this.planes;for(let s=0;s<6;s++)if(e[s].distanceToPoint(t)<0)return !1;return !0}clone(){return (new this.constructor).copy(this)}};new nr$1;new $r$1(1,1,1);new ra$1;new Ei$1;new Gi$1;new Ii$1;new Ii$1;new Ii$1;new Vn$1;class Sa extends tn{constructor(t){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new $r$1(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t);}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}}const _a$1=new Ii$1,Aa=new Ii$1,Ta=new nr$1,za=new rr$1,Ca=new Gi$1,Ia=new Ii$1,Ba=new Ii$1;class ka extends Er$1{constructor(t=new zn$1,e=new Sa){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets();}copy(t,e){return super.copy(t,e),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(null===t.index){const e=t.attributes.position,s=[0];for(let t=1,i=e.count;t<i;t++)_a$1.fromBufferAttribute(e,t-1),Aa.fromBufferAttribute(e,t),s[t]=s[t-1],s[t]+=_a$1.distanceTo(Aa);t.setAttribute("lineDistance",new bn(s,1));}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,e){const s=this.geometry,i=this.matrixWorld,r=t.params.Line.threshold,n=s.drawRange;if(null===s.boundingSphere&&s.computeBoundingSphere(),Ca.copy(s.boundingSphere),Ca.applyMatrix4(i),Ca.radius+=r,!1===t.ray.intersectsSphere(Ca))return;Ta.copy(i).invert(),za.copy(t.ray).applyMatrix4(Ta);const o=r/((this.scale.x+this.scale.y+this.scale.z)/3),a=o*o,h=this.isLineSegments?2:1,l=s.index,c=s.attributes.position;if(null!==l){const s=Math.max(0,n.start),i=Math.min(l.count,n.start+n.count);for(let r=s,n=i-1;r<n;r+=h){const s=l.getX(r),i=l.getX(r+1),n=Ea(this,t,za,a,s,i);n&&e.push(n);}if(this.isLineLoop){const r=l.getX(i-1),n=l.getX(s),o=Ea(this,t,za,a,r,n);o&&e.push(o);}}else {const s=Math.max(0,n.start),i=Math.min(c.count,n.start+n.count);for(let r=s,n=i-1;r<n;r+=h){const s=Ea(this,t,za,a,r,r+1);s&&e.push(s);}if(this.isLineLoop){const r=Ea(this,t,za,a,i-1,s);r&&e.push(r);}}}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const s=t[e[0]];if(void 0!==s){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=s.length;t<e;t++){const e=s[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t;}}}}}function Ea(t,e,s,i,r,n){const o=t.geometry.attributes.position;_a$1.fromBufferAttribute(o,r),Aa.fromBufferAttribute(o,n);if(s.distanceSqToSegment(_a$1,Aa,Ia,Ba)>i)return;Ia.applyMatrix4(t.matrixWorld);const a=e.ray.origin.distanceTo(Ia);return a<e.near||a>e.far?void 0:{distance:a,point:Ba.clone().applyMatrix4(t.matrixWorld),index:r,face:null,faceIndex:null,barycoord:null,object:t}}new Ii$1;new Ii$1;class Na extends tn{constructor(t){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new $r$1(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(t);}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}const La=new nr$1,Va=new rr$1,Wa=new Gi$1,Ua=new Ii$1;class ja extends Er$1{constructor(t=new zn$1,e=new Na){super(),this.isPoints=!0,this.type="Points",this.geometry=t,this.material=e,this.updateMorphTargets();}copy(t,e){return super.copy(t,e),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}raycast(t,e){const s=this.geometry,i=this.matrixWorld,r=t.params.Points.threshold,n=s.drawRange;if(null===s.boundingSphere&&s.computeBoundingSphere(),Wa.copy(s.boundingSphere),Wa.applyMatrix4(i),Wa.radius+=r,!1===t.ray.intersectsSphere(Wa))return;La.copy(i).invert(),Va.copy(t.ray).applyMatrix4(La);const o=r/((this.scale.x+this.scale.y+this.scale.z)/3),a=o*o,h=s.index,l=s.attributes.position;if(null!==h){for(let s=Math.max(0,n.start),r=Math.min(h.count,n.start+n.count);s<r;s++){const r=h.getX(s);Ua.fromBufferAttribute(l,r),Da(Ua,r,a,i,t,e,this);}}else {for(let s=Math.max(0,n.start),r=Math.min(l.count,n.start+n.count);s<r;s++)Ua.fromBufferAttribute(l,s),Da(Ua,s,a,i,t,e,this);}}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const s=t[e[0]];if(void 0!==s){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=s.length;t<e;t++){const e=s[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t;}}}}}function Da(t,e,s,i,r,n,o){const a=Va.distanceSqToPoint(t);if(a<s){const s=new Ii$1;Va.closestPointToPoint(t,s),s.applyMatrix4(i);const h=r.ray.origin.distanceTo(s);if(h<r.near||h>r.far)return;n.push({distance:h,distanceToRay:Math.sqrt(a),point:s,index:e,face:null,faceIndex:null,barycoord:null,object:o});}}class Ha extends Er$1{constructor(){super(),this.isGroup=!0,this.type="Group";}}class qa extends vi$1{constructor(t,e,s,i,r,n,o,a,h){super(t,e,s,i,r,n,o,a,h),this.isVideoTexture=!0,this.minFilter=void 0!==n?n:wt,this.magFilter=void 0!==r?r:wt,this.generateMipmaps=!1;const l=this;"requestVideoFrameCallback"in t&&t.requestVideoFrameCallback((function e(){l.needsUpdate=!0,t.requestVideoFrameCallback(e);}));}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;!1==="requestVideoFrameCallback"in t&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0);}}class Ga extends vi$1{constructor(t,e,s,i,r,n,o,a,h){super(t,e,s,i,r,n,o,a,h),this.isCanvasTexture=!0,this.needsUpdate=!0;}}class $a extends vi$1{constructor(t,e,s,i,r,n,o,a,h,l=1026){if(l!==Dt&&l!==Ht)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===s&&l===Dt&&(s=kt),void 0===s&&l===Ht&&(s=1020),super(null,i,r,n,o,a,l,s,h),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=void 0!==o?o:ft,this.minFilter=void 0!==a?a:ft,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null;}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return null!==this.compareFunction&&(e.compareFunction=this.compareFunction),e}}class Qa{constructor(){this.type="Curve",this.arcLengthDivisions=200;}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(t,e){const s=this.getUtoTmapping(t);return this.getPoint(s,e)}getPoints(t=5){const e=[];for(let s=0;s<=t;s++)e.push(this.getPoint(s/t));return e}getSpacedPoints(t=5){const e=[];for(let s=0;s<=t;s++)e.push(this.getPointAt(s/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let s,i=this.getPoint(0),r=0;e.push(0);for(let n=1;n<=t;n++)s=this.getPoint(n/t),r+=s.distanceTo(i),e.push(r),i=s;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths();}getUtoTmapping(t,e){const s=this.getLengths();let i=0;const r=s.length;let n;n=e||t*s[r-1];let o,a=0,h=r-1;for(;a<=h;)if(i=Math.floor(a+(h-a)/2),o=s[i]-n,o<0)a=i+1;else {if(!(o>0)){h=i;break}h=i-1;}if(i=h,s[i]===n)return i/(r-1);const l=s[i];return (i+(n-l)/(s[i+1]-l))/(r-1)}getTangent(t,e){const s=1e-4;let i=t-s,r=t+s;i<0&&(i=0),r>1&&(r=1);const n=this.getPoint(i),o=this.getPoint(r),a=e||(n.isVector2?new Zs:new Ii$1);return a.copy(o).sub(n).normalize(),a}getTangentAt(t,e){const s=this.getUtoTmapping(t);return this.getTangent(s,e)}computeFrenetFrames(t,e){const s=new Ii$1,i=[],r=[],n=[],o=new Ii$1,a=new nr$1;for(let e=0;e<=t;e++){const s=e/t;i[e]=this.getTangentAt(s,new Ii$1);}r[0]=new Ii$1,n[0]=new Ii$1;let h=Number.MAX_VALUE;const l=Math.abs(i[0].x),c=Math.abs(i[0].y),u=Math.abs(i[0].z);l<=h&&(h=l,s.set(1,0,0)),c<=h&&(h=c,s.set(0,1,0)),u<=h&&s.set(0,0,1),o.crossVectors(i[0],s).normalize(),r[0].crossVectors(i[0],o),n[0].crossVectors(i[0],r[0]);for(let e=1;e<=t;e++){if(r[e]=r[e-1].clone(),n[e]=n[e-1].clone(),o.crossVectors(i[e-1],i[e]),o.length()>Number.EPSILON){o.normalize();const t=Math.acos(Ds(i[e-1].dot(i[e]),-1,1));r[e].applyMatrix4(a.makeRotationAxis(o,t));}n[e].crossVectors(i[e],r[e]);}if(!0===e){let e=Math.acos(Ds(r[0].dot(r[t]),-1,1));e/=t,i[0].dot(o.crossVectors(r[0],r[t]))>0&&(e=-e);for(let s=1;s<=t;s++)r[s].applyMatrix4(a.makeRotationAxis(i[s],e*s)),n[s].crossVectors(i[s],r[s]);}return {tangents:i,normals:r,binormals:n}}clone(){return (new this.constructor).copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}new Ii$1;new Ii$1;new Ii$1;new Ii$1;new Jr$1;const Rh=function(t,e,s=2){const i=e&&e.length,r=i?e[0]*s:t.length;let n=Ph(t,0,r,s,!0);const o=[];if(!n||n.next===n.prev)return o;let a,h,l,c,u,d,p;if(i&&(n=function(t,e,s,i){const r=[];let n,o,a,h,l;for(n=0,o=e.length;n<o;n++)a=e[n]*i,h=n<o-1?e[n+1]*i:t.length,l=Ph(t,a,h,i,!1),l===l.next&&(l.steiner=!0),r.push(qh(l));for(r.sort(Uh),n=0;n<r.length;n++)s=jh(r[n],s);return s}(t,e,n,s)),t.length>80*s){a=l=t[0],h=c=t[1];for(let e=s;e<r;e+=s)u=t[e],d=t[e+1],u<a&&(a=u),d<h&&(h=d),u>l&&(l=u),d>c&&(c=d);p=Math.max(l-a,c-h),p=0!==p?32767/p:0;}return Fh(n,o,s,a,h,p,0),o};function Ph(t,e,s,i,r){let n,o;if(r===function(t,e,s,i){let r=0;for(let n=e,o=s-i;n<s;n+=i)r+=(t[o]-t[n])*(t[n+1]+t[o+1]),o=n;return r}(t,e,s,i)>0)for(n=e;n<s;n+=i)o=el(n,t[n],t[n+1],o);else for(n=s-i;n>=e;n-=i)o=el(n,t[n],t[n+1],o);return o&&Zh(o,o.next)&&(sl(o),o=o.next),o}function Oh(t,e){if(!t)return t;e||(e=t);let s,i=t;do{if(s=!1,i.steiner||!Zh(i,i.next)&&0!==Yh(i.prev,i,i.next))i=i.next;else {if(sl(i),i=e=i.prev,i===i.next)break;s=!0;}}while(s||i!==e);return e}function Fh(t,e,s,i,r,n,o){if(!t)return;!o&&n&&function(t,e,s,i){let r=t;do{0===r.z&&(r.z=Hh(r.x,r.y,e,s,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next;}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){let e,s,i,r,n,o,a,h,l=1;do{for(s=t,t=null,n=null,o=0;s;){for(o++,i=s,a=0,e=0;e<l&&(a++,i=i.nextZ,i);e++);for(h=l;a>0||h>0&&i;)0!==a&&(0===h||!i||s.z<=i.z)?(r=s,s=s.nextZ,a--):(r=i,i=i.nextZ,h--),n?n.nextZ=r:t=r,r.prevZ=n,n=r;s=i;}n.nextZ=null,l*=2;}while(o>1)}(r);}(t,i,r,n);let a,h,l=t;for(;t.prev!==t.next;)if(a=t.prev,h=t.next,n?Lh(t,i,r,n):Nh(t))e.push(a.i/s|0),e.push(t.i/s|0),e.push(h.i/s|0),sl(t),t=h.next,l=h.next;else if((t=h)===l){o?1===o?Fh(t=Vh(Oh(t),e,s),e,s,i,r,n,2):2===o&&Wh(t,e,s,i,r,n):Fh(Oh(t),e,s,i,r,n,1);break}}function Nh(t){const e=t.prev,s=t,i=t.next;if(Yh(e,s,i)>=0)return !1;const r=e.x,n=s.x,o=i.x,a=e.y,h=s.y,l=i.y,c=r<n?r<o?r:o:n<o?n:o,u=a<h?a<l?a:l:h<l?h:l,d=r>n?r>o?r:o:n>o?n:o,p=a>h?a>l?a:l:h>l?h:l;let m=i.next;for(;m!==e;){if(m.x>=c&&m.x<=d&&m.y>=u&&m.y<=p&&Jh(r,a,n,h,o,l,m.x,m.y)&&Yh(m.prev,m,m.next)>=0)return !1;m=m.next;}return !0}function Lh(t,e,s,i){const r=t.prev,n=t,o=t.next;if(Yh(r,n,o)>=0)return !1;const a=r.x,h=n.x,l=o.x,c=r.y,u=n.y,d=o.y,p=a<h?a<l?a:l:h<l?h:l,m=c<u?c<d?c:d:u<d?u:d,y=a>h?a>l?a:l:h>l?h:l,f=c>u?c>d?c:d:u>d?u:d,g=Hh(p,m,e,s,i),x=Hh(y,f,e,s,i);let b=t.prevZ,v=t.nextZ;for(;b&&b.z>=g&&v&&v.z<=x;){if(b.x>=p&&b.x<=y&&b.y>=m&&b.y<=f&&b!==r&&b!==o&&Jh(a,c,h,u,l,d,b.x,b.y)&&Yh(b.prev,b,b.next)>=0)return !1;if(b=b.prevZ,v.x>=p&&v.x<=y&&v.y>=m&&v.y<=f&&v!==r&&v!==o&&Jh(a,c,h,u,l,d,v.x,v.y)&&Yh(v.prev,v,v.next)>=0)return !1;v=v.nextZ;}for(;b&&b.z>=g;){if(b.x>=p&&b.x<=y&&b.y>=m&&b.y<=f&&b!==r&&b!==o&&Jh(a,c,h,u,l,d,b.x,b.y)&&Yh(b.prev,b,b.next)>=0)return !1;b=b.prevZ;}for(;v&&v.z<=x;){if(v.x>=p&&v.x<=y&&v.y>=m&&v.y<=f&&v!==r&&v!==o&&Jh(a,c,h,u,l,d,v.x,v.y)&&Yh(v.prev,v,v.next)>=0)return !1;v=v.nextZ;}return !0}function Vh(t,e,s){let i=t;do{const r=i.prev,n=i.next.next;!Zh(r,n)&&Gh(r,i,i.next,n)&&Kh(r,n)&&Kh(n,r)&&(e.push(r.i/s|0),e.push(i.i/s|0),e.push(n.i/s|0),sl(i),sl(i.next),i=t=n),i=i.next;}while(i!==t);return Oh(i)}function Wh(t,e,s,i,r,n){let o=t;do{let t=o.next.next;for(;t!==o.prev;){if(o.i!==t.i&&Xh(o,t)){let a=tl(o,t);return o=Oh(o,o.next),a=Oh(a,a.next),Fh(o,e,s,i,r,n,0),void Fh(a,e,s,i,r,n,0)}t=t.next;}o=o.next;}while(o!==t)}function Uh(t,e){return t.x-e.x}function jh(t,e){const s=function(t,e){let s,i=e,r=-1/0;const n=t.x,o=t.y;do{if(o<=i.y&&o>=i.next.y&&i.next.y!==i.y){const t=i.x+(o-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(t<=n&&t>r&&(r=t,s=i.x<i.next.x?i:i.next,t===n))return s}i=i.next;}while(i!==e);if(!s)return null;const a=s,h=s.x,l=s.y;let c,u=1/0;i=s;do{n>=i.x&&i.x>=h&&n!==i.x&&Jh(o<l?n:r,o,h,l,o<l?r:n,o,i.x,i.y)&&(c=Math.abs(o-i.y)/(n-i.x),Kh(i,t)&&(c<u||c===u&&(i.x>s.x||i.x===s.x&&Dh(s,i)))&&(s=i,u=c)),i=i.next;}while(i!==a);return s}(t,e);if(!s)return e;const i=tl(s,t);return Oh(i,i.next),Oh(s,s.next)}function Dh(t,e){return Yh(t.prev,t,e.prev)<0&&Yh(e.next,t,t.next)<0}function Hh(t,e,s,i,r){return (t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-s)*r|0)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-i)*r|0)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function qh(t){let e=t,s=t;do{(e.x<s.x||e.x===s.x&&e.y<s.y)&&(s=e),e=e.next;}while(e!==t);return s}function Jh(t,e,s,i,r,n,o,a){return (r-o)*(e-a)>=(t-o)*(n-a)&&(t-o)*(i-a)>=(s-o)*(e-a)&&(s-o)*(n-a)>=(r-o)*(i-a)}function Xh(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let s=t;do{if(s.i!==t.i&&s.next.i!==t.i&&s.i!==e.i&&s.next.i!==e.i&&Gh(s,s.next,t,e))return !0;s=s.next;}while(s!==t);return !1}(t,e)&&(Kh(t,e)&&Kh(e,t)&&function(t,e){let s=t,i=!1;const r=(t.x+e.x)/2,n=(t.y+e.y)/2;do{s.y>n!=s.next.y>n&&s.next.y!==s.y&&r<(s.next.x-s.x)*(n-s.y)/(s.next.y-s.y)+s.x&&(i=!i),s=s.next;}while(s!==t);return i}(t,e)&&(Yh(t.prev,t,e.prev)||Yh(t,e.prev,e))||Zh(t,e)&&Yh(t.prev,t,t.next)>0&&Yh(e.prev,e,e.next)>0)}function Yh(t,e,s){return (e.y-t.y)*(s.x-e.x)-(e.x-t.x)*(s.y-e.y)}function Zh(t,e){return t.x===e.x&&t.y===e.y}function Gh(t,e,s,i){const r=Qh(Yh(t,e,s)),n=Qh(Yh(t,e,i)),o=Qh(Yh(s,i,t)),a=Qh(Yh(s,i,e));return r!==n&&o!==a||(!(0!==r||!$h(t,s,e))||(!(0!==n||!$h(t,i,e))||(!(0!==o||!$h(s,t,i))||!(0!==a||!$h(s,e,i)))))}function $h(t,e,s){return e.x<=Math.max(t.x,s.x)&&e.x>=Math.min(t.x,s.x)&&e.y<=Math.max(t.y,s.y)&&e.y>=Math.min(t.y,s.y)}function Qh(t){return t>0?1:t<0?-1:0}function Kh(t,e){return Yh(t.prev,t,t.next)<0?Yh(t,e,t.next)>=0&&Yh(t,t.prev,e)>=0:Yh(t,e,t.prev)<0||Yh(t,t.next,e)<0}function tl(t,e){const s=new il(t.i,t.x,t.y),i=new il(e.i,e.x,e.y),r=t.next,n=e.prev;return t.next=e,e.prev=t,s.next=r,r.prev=s,i.next=s,s.prev=i,n.next=i,i.prev=n,i}function el(t,e,s,i){const r=new il(t,e,s);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function sl(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ);}function il(t,e,s){this.i=t,this.x=e,this.y=s,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1;}class rl{static area(t){const e=t.length;let s=0;for(let i=e-1,r=0;r<e;i=r++)s+=t[i].x*t[r].y-t[r].x*t[i].y;return .5*s}static isClockWise(t){return rl.area(t)<0}static triangulateShape(t,e){const s=[],i=[],r=[];nl(t),ol(s,t);let n=t.length;e.forEach(nl);for(let t=0;t<e.length;t++)i.push(n),n+=e[t].length,ol(s,e[t]);const o=Rh(s,i);for(let t=0;t<o.length;t+=3)r.push(o.slice(t,t+3));return r}}function nl(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop();}function ol(t,e){for(let s=0;s<e.length;s++)t.push(e[s].x),t.push(e[s].y);}class ul extends zn$1{constructor(t=1,e=1,s=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:s,heightSegments:i};const r=t/2,n=e/2,o=Math.floor(s),a=Math.floor(i),h=o+1,l=a+1,c=t/o,u=e/a,d=[],p=[],m=[],y=[];for(let t=0;t<l;t++){const e=t*u-n;for(let s=0;s<h;s++){const i=s*c-r;p.push(i,-e,0),m.push(0,0,1),y.push(s/o),y.push(1-t/a);}}for(let t=0;t<a;t++)for(let e=0;e<o;e++){const s=e+h*t,i=e+h*(t+1),r=e+1+h*(t+1),n=e+1+h*t;d.push(s,i,n),d.push(i,r,n);}this.setIndex(d),this.setAttribute("position",new bn(p,3)),this.setAttribute("normal",new bn(m,3)),this.setAttribute("uv",new bn(y,2));}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new ul(t.width,t.height,t.widthSegments,t.heightSegments)}}class _l extends tn{constructor(t){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new $r$1(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new $r$1(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Zs(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new yr$1,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t);}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.envMapIntensity=t.envMapIntensity,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Tl extends tn{constructor(t){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new $r$1(16777215),this.specular=new $r$1(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new $r$1(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Zs(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new yr$1,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t);}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Il extends tn{constructor(t){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new $r$1(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new $r$1(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Zs(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new yr$1,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t);}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Bl extends tn{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t);}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class kl extends tn{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t);}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}function Pl(t,e,s){return !t||!s&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)}function Ol(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Fl(t){const e=t.length,s=new Array(e);for(let t=0;t!==e;++t)s[t]=t;return s.sort((function(e,s){return t[e]-t[s]})),s}function Nl(t,e,s){const i=t.length,r=new t.constructor(i);for(let n=0,o=0;o!==i;++n){const i=s[n]*e;for(let s=0;s!==e;++s)r[o++]=t[i+s];}return r}function Ll(t,e,s,i){let r=1,n=t[0];for(;void 0!==n&&void 0===n[i];)n=t[r++];if(void 0===n)return;let o=n[i];if(void 0!==o)if(Array.isArray(o))do{o=n[i],void 0!==o&&(e.push(n.time),s.push.apply(s,o)),n=t[r++];}while(void 0!==n);else if(void 0!==o.toArray)do{o=n[i],void 0!==o&&(e.push(n.time),o.toArray(s,s.length)),n=t[r++];}while(void 0!==n);else do{o=n[i],void 0!==o&&(e.push(n.time),s.push(o)),n=t[r++];}while(void 0!==n)}class Wl{constructor(t,e,s,i){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==i?i:new e.constructor(s),this.sampleValues=e,this.valueSize=s,this.settings=null,this.DefaultSettings_={};}evaluate(t){const e=this.parameterPositions;let s=this._cachedIndex,i=e[s],r=e[s-1];t:{e:{let n;s:{i:if(!(t<i)){for(let n=s+2;;){if(void 0===i){if(t<r)break i;return s=e.length,this._cachedIndex=s,this.copySampleValue_(s-1)}if(s===n)break;if(r=i,i=e[++s],t<i)break e}n=e.length;break s}if(t>=r)break t;{const o=e[1];t<o&&(s=2,r=o);for(let n=s-2;;){if(void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(s===n)break;if(i=r,r=e[--s-1],t>=r)break e}n=s,s=0;}}for(;s<n;){const i=s+n>>>1;t<e[i]?n=i:s=i+1;}if(i=e[s],r=e[s-1],void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(void 0===i)return s=e.length,this._cachedIndex=s,this.copySampleValue_(s-1)}this._cachedIndex=s,this.intervalChanged_(s,r,i);}return this.interpolate_(s,r,t,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,s=this.sampleValues,i=this.valueSize,r=t*i;for(let t=0;t!==i;++t)e[t]=s[r+t];return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class Ul extends Wl{constructor(t,e,s,i){super(t,e,s,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:Oe,endingEnd:Oe};}intervalChanged_(t,e,s){const i=this.parameterPositions;let r=t-2,n=t+1,o=i[r],a=i[n];if(void 0===o)switch(this.getSettings_().endingStart){case Fe:r=t,o=2*e-s;break;case Ne:r=i.length-2,o=e+i[r]-i[r+1];break;default:r=t,o=s;}if(void 0===a)switch(this.getSettings_().endingEnd){case Fe:n=t,a=2*s-e;break;case Ne:n=1,a=s+i[1]-i[0];break;default:n=t-1,a=e;}const h=.5*(s-e),l=this.valueSize;this._weightPrev=h/(e-o),this._weightNext=h/(a-s),this._offsetPrev=r*l,this._offsetNext=n*l;}interpolate_(t,e,s,i){const r=this.resultBuffer,n=this.sampleValues,o=this.valueSize,a=t*o,h=a-o,l=this._offsetPrev,c=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(s-e)/(i-e),m=p*p,y=m*p,f=-u*y+2*u*m-u*p,g=(1+u)*y+(-1.5-2*u)*m+(-.5+u)*p+1,x=(-1-d)*y+(1.5+d)*m+.5*p,b=d*y-d*m;for(let t=0;t!==o;++t)r[t]=f*n[l+t]+g*n[h+t]+x*n[a+t]+b*n[c+t];return r}}class jl extends Wl{constructor(t,e,s,i){super(t,e,s,i);}interpolate_(t,e,s,i){const r=this.resultBuffer,n=this.sampleValues,o=this.valueSize,a=t*o,h=a-o,l=(s-e)/(i-e),c=1-l;for(let t=0;t!==o;++t)r[t]=n[h+t]*c+n[a+t]*l;return r}}class Dl extends Wl{constructor(t,e,s,i){super(t,e,s,i);}interpolate_(t){return this.copySampleValue_(t-1)}}class Hl{constructor(t,e,s,i){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=Pl(e,this.TimeBufferType),this.values=Pl(s,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation);}static toJSON(t){const e=t.constructor;let s;if(e.toJSON!==this.toJSON)s=e.toJSON(t);else {s={name:t.name,times:Pl(t.times,Array),values:Pl(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(s.interpolation=e);}return s.type=t.ValueTypeName,s}InterpolantFactoryMethodDiscrete(t){return new Dl(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new jl(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new Ul(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case Ee:e=this.InterpolantFactoryMethodDiscrete;break;case Re:e=this.InterpolantFactoryMethodLinear;break;case Pe:e=this.InterpolantFactoryMethodSmooth;}if(void 0===e){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation);}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Ee;case this.InterpolantFactoryMethodLinear:return Re;case this.InterpolantFactoryMethodSmooth:return Pe}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let s=0,i=e.length;s!==i;++s)e[s]+=t;}return this}scale(t){if(1!==t){const e=this.times;for(let s=0,i=e.length;s!==i;++s)e[s]*=t;}return this}trim(t,e){const s=this.times,i=s.length;let r=0,n=i-1;for(;r!==i&&s[r]<t;)++r;for(;-1!==n&&s[n]>e;)--n;if(++n,0!==r||n!==i){r>=n&&(n=Math.max(n,1),r=n-1);const t=this.getValueSize();this.times=s.slice(r,n),this.values=this.values.slice(r*t,n*t);}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const s=this.times,i=this.values,r=s.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let n=null;for(let e=0;e!==r;e++){const i=s[e];if("number"==typeof i&&isNaN(i)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,i),t=!1;break}if(null!==n&&n>i){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,i,n),t=!1;break}n=i;}if(void 0!==i&&Ol(i))for(let e=0,s=i.length;e!==s;++e){const s=i[e];if(isNaN(s)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,s),t=!1;break}}return t}optimize(){const t=this.times.slice(),e=this.values.slice(),s=this.getValueSize(),i=this.getInterpolation()===Pe,r=t.length-1;let n=1;for(let o=1;o<r;++o){let r=!1;const a=t[o];if(a!==t[o+1]&&(1!==o||a!==t[0]))if(i)r=!0;else {const t=o*s,i=t-s,n=t+s;for(let o=0;o!==s;++o){const s=e[t+o];if(s!==e[i+o]||s!==e[n+o]){r=!0;break}}}if(r){if(o!==n){t[n]=t[o];const i=o*s,r=n*s;for(let t=0;t!==s;++t)e[r+t]=e[i+t];}++n;}}if(r>0){t[n]=t[r];for(let t=r*s,i=n*s,o=0;o!==s;++o)e[i+o]=e[t+o];++n;}return n!==t.length?(this.times=t.slice(0,n),this.values=e.slice(0,n*s)):(this.times=t,this.values=e),this}clone(){const t=this.times.slice(),e=this.values.slice(),s=new(this.constructor)(this.name,t,e);return s.createInterpolant=this.createInterpolant,s}}Hl.prototype.TimeBufferType=Float32Array,Hl.prototype.ValueBufferType=Float32Array,Hl.prototype.DefaultInterpolation=Re;class ql extends Hl{constructor(t,e,s){super(t,e,s);}}ql.prototype.ValueTypeName="bool",ql.prototype.ValueBufferType=Array,ql.prototype.DefaultInterpolation=Ee,ql.prototype.InterpolantFactoryMethodLinear=void 0,ql.prototype.InterpolantFactoryMethodSmooth=void 0;class Jl extends Hl{}Jl.prototype.ValueTypeName="color";class Xl extends Hl{}Xl.prototype.ValueTypeName="number";class Yl extends Wl{constructor(t,e,s,i){super(t,e,s,i);}interpolate_(t,e,s,i){const r=this.resultBuffer,n=this.sampleValues,o=this.valueSize,a=(s-e)/(i-e);let h=t*o;for(let t=h+o;h!==t;h+=4)Ci$1.slerpFlat(r,0,n,h-o,n,h,a);return r}}class Zl extends Hl{InterpolantFactoryMethodLinear(t){return new Yl(this.times,this.values,this.getValueSize(),t)}}Zl.prototype.ValueTypeName="quaternion",Zl.prototype.InterpolantFactoryMethodSmooth=void 0;class Gl extends Hl{constructor(t,e,s){super(t,e,s);}}Gl.prototype.ValueTypeName="string",Gl.prototype.ValueBufferType=Array,Gl.prototype.DefaultInterpolation=Ee,Gl.prototype.InterpolantFactoryMethodLinear=void 0,Gl.prototype.InterpolantFactoryMethodSmooth=void 0;class $l extends Hl{}$l.prototype.ValueTypeName="vector";class Ql{constructor(t="",e=-1,s=[],i=2500){this.name=t,this.tracks=s,this.duration=e,this.blendMode=i,this.uuid=js(),this.duration<0&&this.resetDuration();}static parse(t){const e=[],s=t.tracks,i=1/(t.fps||1);for(let t=0,r=s.length;t!==r;++t)e.push(Kl(s[t]).scale(i));const r=new this(t.name,t.duration,e,t.blendMode);return r.uuid=t.uuid,r}static toJSON(t){const e=[],s=t.tracks,i={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,i=s.length;t!==i;++t)e.push(Hl.toJSON(s[t]));return i}static CreateFromMorphTargetSequence(t,e,s,i){const r=e.length,n=[];for(let t=0;t<r;t++){let o=[],a=[];o.push((t+r-1)%r,t,(t+1)%r),a.push(0,1,0);const h=Fl(o);o=Nl(o,1,h),a=Nl(a,1,h),i||0!==o[0]||(o.push(r),a.push(a[0])),n.push(new Xl(".morphTargetInfluences["+e[t].name+"]",o,a).scale(1/s));}return new this(t,-1,n)}static findByName(t,e){let s=t;if(!Array.isArray(t)){const e=t;s=e.geometry&&e.geometry.animations||e.animations;}for(let t=0;t<s.length;t++)if(s[t].name===e)return s[t];return null}static CreateClipsFromMorphTargetSequences(t,e,s){const i={},r=/^([\w-]*?)([\d]+)$/;for(let e=0,s=t.length;e<s;e++){const s=t[e],n=s.name.match(r);if(n&&n.length>1){const t=n[1];let e=i[t];e||(i[t]=e=[]),e.push(s);}}const n=[];for(const t in i)n.push(this.CreateFromMorphTargetSequence(t,i[t],e,s));return n}static parseAnimation(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const s=function(t,e,s,i,r){if(0!==s.length){const n=[],o=[];Ll(s,n,o,i),0!==n.length&&r.push(new t(e,n,o));}},i=[],r=t.name||"default",n=t.fps||30,o=t.blendMode;let a=t.length||-1;const h=t.hierarchy||[];for(let t=0;t<h.length;t++){const r=h[t].keys;if(r&&0!==r.length)if(r[0].morphTargets){const t={};let e;for(e=0;e<r.length;e++)if(r[e].morphTargets)for(let s=0;s<r[e].morphTargets.length;s++)t[r[e].morphTargets[s]]=-1;for(const s in t){const t=[],n=[];for(let i=0;i!==r[e].morphTargets.length;++i){const i=r[e];t.push(i.time),n.push(i.morphTarget===s?1:0);}i.push(new Xl(".morphTargetInfluence["+s+"]",t,n));}a=t.length*n;}else {const n=".bones["+e[t].name+"]";s($l,n+".position",r,"pos",i),s(Zl,n+".quaternion",r,"rot",i),s($l,n+".scale",r,"scl",i);}}if(0===i.length)return null;return new this(r,a,i,o)}resetDuration(){let t=0;for(let e=0,s=this.tracks.length;e!==s;++e){const s=this.tracks[e];t=Math.max(t,s.times[s.times.length-1]);}return this.duration=t,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function Kl(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Xl;case"vector":case"vector2":case"vector3":case"vector4":return $l;case"color":return Jl;case"quaternion":return Zl;case"bool":case"boolean":return ql;case"string":return Gl}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){const e=[],s=[];Ll(t.keys,e,s,"value"),t.times=e,t.values=s;}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const tc={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e);},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t];},clear:function(){this.files={};}};let ec$1 = class ec{constructor(t,e,s){const i=this;let r,n=!1,o=0,a=0;const h=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=s,this.itemStart=function(t){a++,!1===n&&void 0!==i.onStart&&i.onStart(t,o,a),n=!0;},this.itemEnd=function(t){o++,void 0!==i.onProgress&&i.onProgress(t,o,a),o===a&&(n=!1,void 0!==i.onLoad&&i.onLoad());},this.itemError=function(t){void 0!==i.onError&&i.onError(t);},this.resolveURL=function(t){return r?r(t):t},this.setURLModifier=function(t){return r=t,this},this.addHandler=function(t,e){return h.push(t,e),this},this.removeHandler=function(t){const e=h.indexOf(t);return -1!==e&&h.splice(e,2),this},this.getHandler=function(t){for(let e=0,s=h.length;e<s;e+=2){const s=h[e],i=h[e+1];if(s.global&&(s.lastIndex=0),s.test(t))return i}return null};}};const sc=new ec$1;class ic{constructor(t){this.manager=void 0!==t?t:sc,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={};}load(){}loadAsync(t,e){const s=this;return new Promise((function(i,r){s.load(t,i,e,r);}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}ic.DEFAULT_MATERIAL_NAME="__DEFAULT";const rc={};class nc extends Error{constructor(t,e){super(t),this.response=e;}}class oc extends ic{constructor(t){super(t);}load(t,e,s,i){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=tc.get(t);if(void 0!==r)return this.manager.itemStart(t),setTimeout((()=>{e&&e(r),this.manager.itemEnd(t);}),0),r;if(void 0!==rc[t])return void rc[t].push({onLoad:e,onProgress:s,onError:i});rc[t]=[],rc[t].push({onLoad:e,onProgress:s,onError:i});const n=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),o=this.mimeType,a=this.responseType;fetch(n).then((e=>{if(200===e.status||0===e.status){if(0===e.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),"undefined"==typeof ReadableStream||void 0===e.body||void 0===e.body.getReader)return e;const s=rc[t],i=e.body.getReader(),r=e.headers.get("X-File-Size")||e.headers.get("Content-Length"),n=r?parseInt(r):0,o=0!==n;let a=0;const h=new ReadableStream({start(t){!function e(){i.read().then((({done:i,value:r})=>{if(i)t.close();else {a+=r.byteLength;const i=new ProgressEvent("progress",{lengthComputable:o,loaded:a,total:n});for(let t=0,e=s.length;t<e;t++){const e=s[t];e.onProgress&&e.onProgress(i);}t.enqueue(r),e();}}),(e=>{t.error(e);}));}();}});return new Response(h)}throw new nc(`fetch for "${e.url}" responded with ${e.status}: ${e.statusText}`,e)})).then((t=>{switch(a){case"arraybuffer":return t.arrayBuffer();case"blob":return t.blob();case"document":return t.text().then((t=>(new DOMParser).parseFromString(t,o)));case"json":return t.json();default:if(void 0===o)return t.text();{const e=/charset="?([^;"\s]*)"?/i.exec(o),s=e&&e[1]?e[1].toLowerCase():void 0,i=new TextDecoder(s);return t.arrayBuffer().then((t=>i.decode(t)))}}})).then((e=>{tc.add(t,e);const s=rc[t];delete rc[t];for(let t=0,i=s.length;t<i;t++){const i=s[t];i.onLoad&&i.onLoad(e);}})).catch((e=>{const s=rc[t];if(void 0===s)throw this.manager.itemError(t),e;delete rc[t];for(let t=0,i=s.length;t<i;t++){const i=s[t];i.onError&&i.onError(e);}this.manager.itemError(t);})).finally((()=>{this.manager.itemEnd(t);})),this.manager.itemStart(t);}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class lc extends ic{constructor(t){super(t);}load(t,e,s,i){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,n=tc.get(t);if(void 0!==n)return r.manager.itemStart(t),setTimeout((function(){e&&e(n),r.manager.itemEnd(t);}),0),n;const o=ei$1("img");function a(){l(),tc.add(t,this),e&&e(this),r.manager.itemEnd(t);}function h(e){l(),i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t);}function l(){o.removeEventListener("load",a,!1),o.removeEventListener("error",h,!1);}return o.addEventListener("load",a,!1),o.addEventListener("error",h,!1),"data:"!==t.slice(0,5)&&void 0!==this.crossOrigin&&(o.crossOrigin=this.crossOrigin),r.manager.itemStart(t),o.src=t,o}}class dc extends ic{constructor(t){super(t);}load(t,e,s,i){const r=new vi$1,n=new lc(this.manager);return n.setCrossOrigin(this.crossOrigin),n.setPath(this.path),n.load(t,(function(t){r.image=t,r.needsUpdate=!0,void 0!==e&&e(r);}),s,i),r}}class pc extends Er$1{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new $r$1(t),this.intensity=e;}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),void 0!==this.target&&(e.object.target=this.target.uuid),e}}const yc=new nr$1,fc=new Ii$1,gc=new Ii$1;class xc{constructor(t){this.camera=t,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Zs(512,512),this.map=null,this.mapPass=null,this.matrix=new nr$1,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new ra$1,this._frameExtents=new Zs(1,1),this._viewportCount=1,this._viewports=[new wi$1(0,0,1,1)];}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,s=this.matrix;fc.setFromMatrixPosition(t.matrixWorld),e.position.copy(fc),gc.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(gc),e.updateMatrixWorld(),yc.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(yc),s.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),s.multiply(yc);}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose();}copy(t){return this.camera=t.camera.clone(),this.intensity=t.intensity,this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return (new this.constructor).copy(this)}toJSON(){const t={};return 1!==this.intensity&&(t.intensity=this.intensity),0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class bc extends xc{constructor(){super(new $n$1(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1;}updateMatrices(t){const e=this.camera,s=2*Us*t.angle*this.focus,i=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;s===e.fov&&i===e.aspect&&r===e.far||(e.fov=s,e.aspect=i,e.far=r,e.updateProjectionMatrix()),super.updateMatrices(t);}copy(t){return super.copy(t),this.focus=t.focus,this}}class vc extends pc{constructor(t,e,s=0,i=Math.PI/3,r=0,n=2){super(t,e),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(Er$1.DEFAULT_UP),this.updateMatrix(),this.target=new Er$1,this.distance=s,this.angle=i,this.penumbra=r,this.decay=n,this.map=null,this.shadow=new bc;}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI;}dispose(){this.shadow.dispose();}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}const wc=new nr$1,Mc=new Ii$1,Sc=new Ii$1;class _c extends xc{constructor(){super(new $n$1(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new Zs(4,2),this._viewportCount=6,this._viewports=[new wi$1(2,1,1,1),new wi$1(0,1,1,1),new wi$1(3,1,1,1),new wi$1(1,1,1,1),new wi$1(3,0,1,1),new wi$1(1,0,1,1)],this._cubeDirections=[new Ii$1(1,0,0),new Ii$1(-1,0,0),new Ii$1(0,0,1),new Ii$1(0,0,-1),new Ii$1(0,1,0),new Ii$1(0,-1,0)],this._cubeUps=[new Ii$1(0,1,0),new Ii$1(0,1,0),new Ii$1(0,1,0),new Ii$1(0,1,0),new Ii$1(0,0,1),new Ii$1(0,0,-1)];}updateMatrices(t,e=0){const s=this.camera,i=this.matrix,r=t.distance||s.far;r!==s.far&&(s.far=r,s.updateProjectionMatrix()),Mc.setFromMatrixPosition(t.matrixWorld),s.position.copy(Mc),Sc.copy(s.position),Sc.add(this._cubeDirections[e]),s.up.copy(this._cubeUps[e]),s.lookAt(Sc),s.updateMatrixWorld(),i.makeTranslation(-Mc.x,-Mc.y,-Mc.z),wc.multiplyMatrices(s.projectionMatrix,s.matrixWorldInverse),this._frustum.setFromProjectionMatrix(wc);}}class Ac extends pc{constructor(t,e,s=0,i=2){super(t,e),this.isPointLight=!0,this.type="PointLight",this.distance=s,this.decay=i,this.shadow=new _c;}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI);}dispose(){this.shadow.dispose();}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}class Tc extends Xn$1{constructor(t=-1,e=1,s=1,i=-1,r=.1,n=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=s,this.bottom=i,this.near=r,this.far=n,this.updateProjectionMatrix();}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,s,i,r,n){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=s,this.view.offsetY=i,this.view.width=r,this.view.height=n,this.updateProjectionMatrix();}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix();}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),s=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=s-t,n=s+t,o=i+e,a=i-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=t*this.view.offsetX,n=r+t*this.view.width,o-=e*this.view.offsetY,a=o-e*this.view.height;}this.projectionMatrix.makeOrthographic(r,n,o,a,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert();}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}class zc extends xc{constructor(){super(new Tc(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0;}}class Cc extends pc{constructor(t,e){super(t,e),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Er$1.DEFAULT_UP),this.updateMatrix(),this.target=new Er$1,this.shadow=new zc;}dispose(){this.shadow.dispose();}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}class Ic extends pc{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight";}}class Pc{static decodeText(t){if(console.warn("THREE.LoaderUtils: decodeText() has been deprecated with r165 and will be removed with r175. Use TextDecoder instead."),"undefined"!=typeof TextDecoder)return (new TextDecoder).decode(t);let e="";for(let s=0,i=t.length;s<i;s++)e+=String.fromCharCode(t[s]);try{return decodeURIComponent(escape(e))}catch(t){return e}}static extractUrlBase(t){const e=t.lastIndexOf("/");return -1===e?"./":t.slice(0,e+1)}static resolveURL(t,e){return "string"!=typeof t||""===t?"":(/^https?:\/\//i.test(e)&&/^\//.test(t)&&(e=e.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(t)||/^data:.*,.*$/i.test(t)||/^blob:.*$/i.test(t)?t:e+t)}}new nr$1;new nr$1;new nr$1;class Zc extends $n$1{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t;}}class Gc{constructor(t=!0){this.autoStart=t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1;}start(){this.startTime=$c(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0;}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1;}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=$c();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t;}return t}}function $c(){return performance.now()}new Ii$1;new Ii$1;new Ii$1;new Ii$1;new Ii$1;new Ii$1;class cu{constructor(t,e,s){let i,r,n;switch(this.binding=t,this.valueSize=s,e){case"quaternion":i=this._slerp,r=this._slerpAdditive,n=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*s),this._workIndex=5;break;case"string":case"bool":i=this._select,r=this._select,n=this._setAdditiveIdentityOther,this.buffer=new Array(5*s);break;default:i=this._lerp,r=this._lerpAdditive,n=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*s);}this._mixBufferRegion=i,this._mixBufferRegionAdditive=r,this._setIdentity=n,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0;}accumulate(t,e){const s=this.buffer,i=this.valueSize,r=t*i+i;let n=this.cumulativeWeight;if(0===n){for(let t=0;t!==i;++t)s[r+t]=s[t];n=e;}else {n+=e;const t=e/n;this._mixBufferRegion(s,r,0,t,i);}this.cumulativeWeight=n;}accumulateAdditive(t){const e=this.buffer,s=this.valueSize,i=s*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,i,0,t,s),this.cumulativeWeightAdditive+=t;}apply(t){const e=this.valueSize,s=this.buffer,i=t*e+e,r=this.cumulativeWeight,n=this.cumulativeWeightAdditive,o=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,r<1){const t=e*this._origIndex;this._mixBufferRegion(s,i,t,1-r,e);}n>0&&this._mixBufferRegionAdditive(s,i,this._addIndex*e,1,e);for(let t=e,r=e+e;t!==r;++t)if(s[t]!==s[t+e]){o.setValue(s,i);break}}saveOriginalState(){const t=this.binding,e=this.buffer,s=this.valueSize,i=s*this._origIndex;t.getValue(e,i);for(let t=s,r=i;t!==r;++t)e[t]=e[i+t%s];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0;}restoreOriginalState(){const t=3*this.valueSize;this.binding.setValue(this.buffer,t);}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let s=t;s<e;s++)this.buffer[s]=0;}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1;}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let s=0;s<this.valueSize;s++)this.buffer[e+s]=this.buffer[t+s];}_select(t,e,s,i,r){if(i>=.5)for(let i=0;i!==r;++i)t[e+i]=t[s+i];}_slerp(t,e,s,i){Ci$1.slerpFlat(t,e,t,e,t,s,i);}_slerpAdditive(t,e,s,i,r){const n=this._workIndex*r;Ci$1.multiplyQuaternionsFlat(t,n,t,e,t,s),Ci$1.slerpFlat(t,e,t,e,t,n,i);}_lerp(t,e,s,i,r){const n=1-i;for(let o=0;o!==r;++o){const r=e+o;t[r]=t[r]*n+t[s+o]*i;}}_lerpAdditive(t,e,s,i,r){for(let n=0;n!==r;++n){const r=e+n;t[r]=t[r]+t[s+n]*i;}}}const uu="\\[\\]\\.:\\/",du=new RegExp("["+uu+"]","g"),pu="[^"+uu+"]",mu="[^"+uu.replace("\\.","")+"]",yu=new RegExp("^"+/((?:WC+[\/:])*)/.source.replace("WC",pu)+/(WCOD+)?/.source.replace("WCOD",mu)+/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",pu)+/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",pu)+"$"),fu=["material","materials","bones","map"];class gu{constructor(t,e,s){this.path=e,this.parsedPath=s||gu.parseTrackName(e),this.node=gu.findNode(t,this.parsedPath.nodeName),this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound;}static create(t,e,s){return t&&t.isAnimationObjectGroup?new gu.Composite(t,e,s):new gu(t,e,s)}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(du,"")}static parseTrackName(t){const e=yu.exec(t);if(null===e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const s={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},i=s.nodeName&&s.nodeName.lastIndexOf(".");if(void 0!==i&&-1!==i){const t=s.nodeName.substring(i+1);-1!==fu.indexOf(t)&&(s.nodeName=s.nodeName.substring(0,i),s.objectName=t);}if(null===s.propertyName||0===s.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return s}static findNode(t,e){if(void 0===e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const s=t.skeleton.getBoneByName(e);if(void 0!==s)return s}if(t.children){const s=function(t){for(let i=0;i<t.length;i++){const r=t[i];if(r.name===e||r.uuid===e)return r;const n=s(r.children);if(n)return n}return null},i=s(t.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName];}_getValue_array(t,e){const s=this.resolvedProperty;for(let i=0,r=s.length;i!==r;++i)t[e++]=s[i];}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex];}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e);}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e];}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0;}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0;}_setValue_array(t,e){const s=this.resolvedProperty;for(let i=0,r=s.length;i!==r;++i)s[i]=t[e++];}_setValue_array_setNeedsUpdate(t,e){const s=this.resolvedProperty;for(let i=0,r=s.length;i!==r;++i)s[i]=t[e++];this.targetObject.needsUpdate=!0;}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const s=this.resolvedProperty;for(let i=0,r=s.length;i!==r;++i)s[i]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0;}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e];}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0;}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0;}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e);}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0;}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0;}_getValue_unbound(t,e){this.bind(),this.getValue(t,e);}_setValue_unbound(t,e){this.bind(),this.setValue(t,e);}bind(){let t=this.node;const e=this.parsedPath,s=e.objectName,i=e.propertyName;let r=e.propertyIndex;if(t||(t=gu.findNode(this.rootNode,e.nodeName),this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");if(s){let i=e.objectIndex;switch(s){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===i){i=e;break}break;case"map":if("map"in t){t=t.map;break}if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.map)return void console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);t=t.material.map;break;default:if(void 0===t[s])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[s];}if(void 0!==i){if(void 0===t[i])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[i];}}const n=t[i];if(void 0===n){const s=e.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+s+"."+i+" but it wasn't found.",t)}let o=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?o=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(o=this.Versioning.MatrixWorldNeedsUpdate);let a=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===i){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==t.morphTargetDictionary[r]&&(r=t.morphTargetDictionary[r]);}a=this.BindingType.ArrayElement,this.resolvedProperty=n,this.propertyIndex=r;}else void 0!==n.fromArray&&void 0!==n.toArray?(a=this.BindingType.HasFromToArray,this.resolvedProperty=n):Array.isArray(n)?(a=this.BindingType.EntireArray,this.resolvedProperty=n):this.propertyName=i;this.getValue=this.GetterByBindingType[a],this.setValue=this.SetterByBindingTypeAndVersioning[a][o];}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound;}}gu.Composite=class{constructor(t,e,s){const i=s||gu.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,i);}getValue(t,e){this.bind();const s=this._targetGroup.nCachedObjects_,i=this._bindings[s];void 0!==i&&i.getValue(t,e);}setValue(t,e){const s=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=s.length;i!==r;++i)s[i].setValue(t,e);}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,s=t.length;e!==s;++e)t[e].bind();}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,s=t.length;e!==s;++e)t[e].unbind();}},gu.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},gu.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},gu.prototype.GetterByBindingType=[gu.prototype._getValue_direct,gu.prototype._getValue_array,gu.prototype._getValue_arrayElement,gu.prototype._getValue_toArray],gu.prototype.SetterByBindingTypeAndVersioning=[[gu.prototype._setValue_direct,gu.prototype._setValue_direct_setNeedsUpdate,gu.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[gu.prototype._setValue_array,gu.prototype._setValue_array_setNeedsUpdate,gu.prototype._setValue_array_setMatrixWorldNeedsUpdate],[gu.prototype._setValue_arrayElement,gu.prototype._setValue_arrayElement_setNeedsUpdate,gu.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[gu.prototype._setValue_fromArray,gu.prototype._setValue_fromArray_setNeedsUpdate,gu.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class bu{constructor(t,e,s=null,i=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=s,this.blendMode=i;const r=e.tracks,n=r.length,o=new Array(n),a={endingStart:Oe,endingEnd:Oe};for(let t=0;t!==n;++t){const e=r[t].createInterpolant(null);o[t]=e,e.settings=a;}this._interpolantSettings=a,this._interpolants=o,this._propertyBindings=new Array(n),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0;}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,s){if(t.fadeOut(e),this.fadeIn(e),s){const s=this._clip.duration,i=t._clip.duration,r=i/s,n=s/i;t.warp(1,r,e),this.warp(n,1,e);}return this}crossFadeTo(t,e,s){return t.crossFadeFrom(this,e,s)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,s){const i=this._mixer,r=i.time,n=this.timeScale;let o=this._timeScaleInterpolant;null===o&&(o=i._lendControlInterpolant(),this._timeScaleInterpolant=o);const a=o.parameterPositions,h=o.sampleValues;return a[0]=r,a[1]=r+s,h[0]=t/n,h[1]=e/n,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,s,i){if(!this.enabled)return void this._updateWeight(t);const r=this._startTime;if(null!==r){const i=(t-r)*s;i<0||0===s?e=0:(this._startTime=null,e=s*i);}e*=this._updateTimeScale(t);const n=this._updateTime(e),o=this._updateWeight(t);if(o>0){const t=this._interpolants,e=this._propertyBindings;if(this.blendMode===Ve)for(let s=0,i=t.length;s!==i;++s)t[s].evaluate(n),e[s].accumulateAdditive(o);else for(let s=0,r=t.length;s!==r;++s)t[s].evaluate(n),e[s].accumulate(i,o);}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const s=this._weightInterpolant;if(null!==s){const i=s.evaluate(t)[0];e*=i,t>s.parameterPositions[1]&&(this.stopFading(),0===i&&(this.enabled=!1));}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const s=this._timeScaleInterpolant;if(null!==s){e*=s.evaluate(t)[0],t>s.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e);}}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,s=this.loop;let i=this.time+t,r=this._loopCount;const n=2202===s;if(0===t)return -1===r?i:n&&1==(1&r)?e-i:i;if(2200===s){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(i>=e)i=e;else {if(!(i<0)){this.time=i;break t}i=0;}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1});}}else {if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,n)):this._setEndings(0===this.repetitions,!0,n)),i>=e||i<0){const s=Math.floor(i/e);i-=e*s,r+=Math.abs(s);const o=this.repetitions-r;if(o<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,i=t>0?e:0,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else {if(1===o){const e=t<0;this._setEndings(e,!e,n);}else this._setEndings(!1,!1,n);this._loopCount=r,this.time=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:s});}}else this.time=i;if(n&&1==(1&r))return e-i}return i}_setEndings(t,e,s){const i=this._interpolantSettings;s?(i.endingStart=Fe,i.endingEnd=Fe):(i.endingStart=t?this.zeroSlopeAtStart?Fe:Oe:Ne,i.endingEnd=e?this.zeroSlopeAtEnd?Fe:Oe:Ne);}_scheduleFading(t,e,s){const i=this._mixer,r=i.time;let n=this._weightInterpolant;null===n&&(n=i._lendControlInterpolant(),this._weightInterpolant=n);const o=n.parameterPositions,a=n.sampleValues;return o[0]=r,a[0]=e,o[1]=r+t,a[1]=s,this}}const vu=new Float32Array(1);class wu extends Ns{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1;}_bindAction(t,e){const s=t._localRoot||this._root,i=t._clip.tracks,r=i.length,n=t._propertyBindings,o=t._interpolants,a=s.uuid,h=this._bindingsByRootAndName;let l=h[a];void 0===l&&(l={},h[a]=l);for(let t=0;t!==r;++t){const r=i[t],h=r.name;let c=l[h];if(void 0!==c)++c.referenceCount,n[t]=c;else {if(c=n[t],void 0!==c){null===c._cacheIndex&&(++c.referenceCount,this._addInactiveBinding(c,a,h));continue}const i=e&&e._propertyBindings[t].binding.parsedPath;c=new cu(gu.create(s,h,i),r.ValueTypeName,r.getValueSize()),++c.referenceCount,this._addInactiveBinding(c,a,h),n[t]=c;}o[t].resultBuffer=c.buffer;}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,s=t._clip.uuid,i=this._actionsByClip[s];this._bindAction(t,i&&i.knownActions[0]),this._addInactiveAction(t,s,e);}const e=t._propertyBindings;for(let t=0,s=e.length;t!==s;++t){const s=e[t];0==s.useCount++&&(this._lendBinding(s),s.saveOriginalState());}this._lendAction(t);}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,s=e.length;t!==s;++t){const s=e[t];0==--s.useCount&&(s.restoreOriginalState(),this._takeBackBinding(s));}this._takeBackAction(t);}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}};}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,s){const i=this._actions,r=this._actionsByClip;let n=r[e];if(void 0===n)n={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=n;else {const e=n.knownActions;t._byClipCacheIndex=e.length,e.push(t);}t._cacheIndex=i.length,i.push(t),n.actionByRoot[s]=t;}_removeInactiveAction(t){const e=this._actions,s=e[e.length-1],i=t._cacheIndex;s._cacheIndex=i,e[i]=s,e.pop(),t._cacheIndex=null;const r=t._clip.uuid,n=this._actionsByClip,o=n[r],a=o.knownActions,h=a[a.length-1],l=t._byClipCacheIndex;h._byClipCacheIndex=l,a[l]=h,a.pop(),t._byClipCacheIndex=null;delete o.actionByRoot[(t._localRoot||this._root).uuid],0===a.length&&delete n[r],this._removeInactiveBindingsForAction(t);}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,s=e.length;t!==s;++t){const s=e[t];0==--s.referenceCount&&this._removeInactiveBinding(s);}}_lendAction(t){const e=this._actions,s=t._cacheIndex,i=this._nActiveActions++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=s,e[s]=r;}_takeBackAction(t){const e=this._actions,s=t._cacheIndex,i=--this._nActiveActions,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=s,e[s]=r;}_addInactiveBinding(t,e,s){const i=this._bindingsByRootAndName,r=this._bindings;let n=i[e];void 0===n&&(n={},i[e]=n),n[s]=t,t._cacheIndex=r.length,r.push(t);}_removeInactiveBinding(t){const e=this._bindings,s=t.binding,i=s.rootNode.uuid,r=s.path,n=this._bindingsByRootAndName,o=n[i],a=e[e.length-1],h=t._cacheIndex;a._cacheIndex=h,e[h]=a,e.pop(),delete o[r],0===Object.keys(o).length&&delete n[i];}_lendBinding(t){const e=this._bindings,s=t._cacheIndex,i=this._nActiveBindings++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=s,e[s]=r;}_takeBackBinding(t){const e=this._bindings,s=t._cacheIndex,i=--this._nActiveBindings,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=s,e[s]=r;}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let s=t[e];return void 0===s&&(s=new jl(new Float32Array(2),new Float32Array(2),1,vu),s.__cacheIndex=e,t[e]=s),s}_takeBackControlInterpolant(t){const e=this._controlInterpolants,s=t.__cacheIndex,i=--this._nActiveControlInterpolants,r=e[i];t.__cacheIndex=i,e[i]=t,r.__cacheIndex=s,e[s]=r;}clipAction(t,e,s){const i=e||this._root,r=i.uuid;let n="string"==typeof t?Ql.findByName(i,t):t;const o=null!==n?n.uuid:t,a=this._actionsByClip[o];let h=null;if(void 0===s&&(s=null!==n?n.blendMode:Le),void 0!==a){const t=a.actionByRoot[r];if(void 0!==t&&t.blendMode===s)return t;h=a.knownActions[0],null===n&&(n=h._clip);}if(null===n)return null;const l=new bu(this,n,e,s);return this._bindAction(l,h),this._addInactiveAction(l,o,r),l}existingAction(t,e){const s=e||this._root,i=s.uuid,r="string"==typeof t?Ql.findByName(s,t):t,n=r?r.uuid:t,o=this._actionsByClip[n];return void 0!==o&&o.actionByRoot[i]||null}stopAllAction(){const t=this._actions;for(let e=this._nActiveActions-1;e>=0;--e)t[e].stop();return this}update(t){t*=this.timeScale;const e=this._actions,s=this._nActiveActions,i=this.time+=t,r=Math.sign(t),n=this._accuIndex^=1;for(let o=0;o!==s;++o){e[o]._update(i,t,r,n);}const o=this._bindings,a=this._nActiveBindings;for(let t=0;t!==a;++t)o[t].apply(n);return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,s=t.uuid,i=this._actionsByClip,r=i[s];if(void 0!==r){const t=r.knownActions;for(let s=0,i=t.length;s!==i;++s){const i=t[s];this._deactivateAction(i);const r=i._cacheIndex,n=e[e.length-1];i._cacheIndex=null,i._byClipCacheIndex=null,n._cacheIndex=r,e[r]=n,e.pop(),this._removeInactiveBindingsForAction(i);}delete i[s];}}uncacheRoot(t){const e=t.uuid,s=this._actionsByClip;for(const t in s){const i=s[t].actionByRoot[e];void 0!==i&&(this._deactivateAction(i),this._removeInactiveAction(i));}const i=this._bindingsByRootAndName[e];if(void 0!==i)for(const t in i){const e=i[t];e.restoreOriginalState(),this._removeInactiveBinding(e);}}uncacheAction(t,e){const s=this.existingAction(t,e);null!==s&&(this._deactivateAction(s),this._removeInactiveAction(s));}}const zu=new nr$1;class Cu{constructor(t,e,s=0,i=1/0){this.ray=new rr$1(t,e),this.near=s,this.far=i,this.camera=null,this.layers=new fr$1,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}};}set(t,e){this.ray.set(t,e);}setFromCamera(t,e){e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type: "+e.type);}setFromXRController(t){return zu.identity().extractRotation(t.matrixWorld),this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(zu),this}intersectObject(t,e=!0,s=[]){return Bu(t,this,s,e),s.sort(Iu),s}intersectObjects(t,e=!0,s=[]){for(let i=0,r=t.length;i<r;i++)Bu(t[i],this,s,e);return s.sort(Iu),s}}function Iu(t,e){return t.distance-e.distance}function Bu(t,e,s,i){let r=!0;if(t.layers.test(e.layers)){!1===t.raycast(e,s)&&(r=!1);}if(!0===r&&!0===i){const i=t.children;for(let t=0,r=i.length;t<r;t++)Bu(i[t],e,s,!0);}}new Zs;new Ii$1;new Ii$1;new Ii$1;new Ii$1;new nr$1;new nr$1;new Ii$1;new $r$1;new $r$1;new Ii$1;new Ii$1;new Ii$1;new Ii$1;new Xn$1;new Ei$1;new Ii$1;function xd(t,e,s,i){const r=function(t){switch(t){case Tt:case zt:return {byteLength:1,components:1};case It:case Ct:case Rt:return {byteLength:2,components:1};case Pt:case Ot:return {byteLength:2,components:4};case kt:case Bt:case Et:return {byteLength:4,components:1};case Nt:return {byteLength:4,components:3}}throw new Error(`Unknown texture type ${t}.`)}(i);switch(s){case 1021:case 1024:return t*e;case 1025:return t*e*2;case qt:case Jt:return t*e/r.components*r.byteLength;case 1030:case 1031:return t*e*2/r.components*r.byteLength;case 1022:return t*e*3/r.components*r.byteLength;case Wt:case 1033:return t*e*4/r.components*r.byteLength;case 33776:case 33777:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*8;case 33778:case 33779:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*16;case 35841:case 35843:return Math.max(t,16)*Math.max(e,8)/4;case 35840:case 35842:return Math.max(t,8)*Math.max(e,8)/2;case 36196:case 37492:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*8;case 37496:case 37808:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*16;case 37809:return Math.floor((t+4)/5)*Math.floor((e+3)/4)*16;case 37810:return Math.floor((t+4)/5)*Math.floor((e+4)/5)*16;case 37811:return Math.floor((t+5)/6)*Math.floor((e+4)/5)*16;case 37812:return Math.floor((t+5)/6)*Math.floor((e+5)/6)*16;case 37813:return Math.floor((t+7)/8)*Math.floor((e+4)/5)*16;case 37814:return Math.floor((t+7)/8)*Math.floor((e+5)/6)*16;case 37815:return Math.floor((t+7)/8)*Math.floor((e+7)/8)*16;case 37816:return Math.floor((t+9)/10)*Math.floor((e+4)/5)*16;case 37817:return Math.floor((t+9)/10)*Math.floor((e+5)/6)*16;case 37818:return Math.floor((t+9)/10)*Math.floor((e+7)/8)*16;case 37819:return Math.floor((t+9)/10)*Math.floor((e+9)/10)*16;case 37820:return Math.floor((t+11)/12)*Math.floor((e+9)/10)*16;case 37821:return Math.floor((t+11)/12)*Math.floor((e+11)/12)*16;case 36492:case 36494:case 36495:return Math.ceil(t/4)*Math.ceil(e/4)*16;case 36283:case 36284:return Math.ceil(t/4)*Math.ceil(e/4)*8;case 36285:case 36286:return Math.ceil(t/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${s} format.`)}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:t}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=t);

    /**
     * @license
     * Copyright 2010-2024 Three.js Authors
     * SPDX-License-Identifier: MIT
     */
    function Pn(){let e=null,t=!1,n=null,i=null;function r(t,a){n(t,a),i=e.requestAnimationFrame(r);}return {start:function(){!0!==t&&null!==n&&(i=e.requestAnimationFrame(r),t=!0);},stop:function(){e.cancelAnimationFrame(i),t=!1;},setAnimationLoop:function(e){n=e;},setContext:function(t){e=t;}}}function Un(e){const t=new WeakMap;return {get:function(e){return e.isInterleavedBufferAttribute&&(e=e.data),t.get(e)},remove:function(n){n.isInterleavedBufferAttribute&&(n=n.data);const i=t.get(n);i&&(e.deleteBuffer(i.buffer),t.delete(n));},update:function(n,i){if(n.isInterleavedBufferAttribute&&(n=n.data),n.isGLBufferAttribute){const e=t.get(n);return void((!e||e.version<n.version)&&t.set(n,{buffer:n.buffer,type:n.type,bytesPerElement:n.elementSize,version:n.version}))}const r=t.get(n);if(void 0===r)t.set(n,function(t,n){const i=t.array,r=t.usage,a=i.byteLength,o=e.createBuffer();let s;if(e.bindBuffer(n,o),e.bufferData(n,i,r),t.onUploadCallback(),i instanceof Float32Array)s=e.FLOAT;else if(i instanceof Uint16Array)s=t.isFloat16BufferAttribute?e.HALF_FLOAT:e.UNSIGNED_SHORT;else if(i instanceof Int16Array)s=e.SHORT;else if(i instanceof Uint32Array)s=e.UNSIGNED_INT;else if(i instanceof Int32Array)s=e.INT;else if(i instanceof Int8Array)s=e.BYTE;else if(i instanceof Uint8Array)s=e.UNSIGNED_BYTE;else {if(!(i instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+i);s=e.UNSIGNED_BYTE;}return {buffer:o,type:s,bytesPerElement:i.BYTES_PER_ELEMENT,version:t.version,size:a}}(n,i));else if(r.version<n.version){if(r.size!==n.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");!function(t,n,i){const r=n.array,a=n.updateRanges;if(e.bindBuffer(i,t),0===a.length)e.bufferSubData(i,0,r);else {a.sort(((e,t)=>e.start-t.start));let t=0;for(let e=1;e<a.length;e++){const n=a[t],i=a[e];i.start<=n.start+n.count+1?n.count=Math.max(n.count,i.start+i.count-n.start):(++t,a[t]=i);}a.length=t+1;for(let t=0,n=a.length;t<n;t++){const n=a[t];e.bufferSubData(i,n.start*r.BYTES_PER_ELEMENT,r,n.start,n.count);}n.clearUpdateRanges();}n.onUploadCallback();}(r.buffer,n,i),r.version=n.version;}}}}const wn={alphahash_fragment:"#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif",alphahash_pars_fragment:"#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif",alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",batching_pars_vertex:"#ifdef USE_BATCHING\n\t#if ! defined( GL_ANGLE_multi_draw )\n\t#define gl_DrawID _gl_DrawID\n\tuniform int _gl_DrawID;\n\t#endif\n\tuniform highp sampler2D batchingTexture;\n\tuniform highp usampler2D batchingIdTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n\tfloat getIndirectIndex( const in int i ) {\n\t\tint size = textureSize( batchingIdTexture, 0 ).x;\n\t\tint x = i % size;\n\t\tint y = i / size;\n\t\treturn float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n\t}\n#endif\n#ifdef USE_BATCHING_COLOR\n\tuniform sampler2D batchingColorTexture;\n\tvec3 getBatchingColor( const in float i ) {\n\t\tint size = textureSize( batchingColorTexture, 0 ).x;\n\t\tint j = int( i );\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\treturn texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n\t}\n#endif",batching_vertex:"#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif",begin_vertex:"vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated",iridescence_fragment:"#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n\tvec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n\tvColor.xyz *= batchingColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\n\t\temissiveColor = sRGBTransferEOTF( emissiveColor );\n\t#endif\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",colorspace_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",colorspace_pars_fragment:"vec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferEOTF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_fragment:"LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",lights_lambert_pars_fragment:"varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif ( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n\tmaterial.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\tfloat dispersion;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF )\n\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\tvFragDepth = 1.0 + gl_Position.w;\n\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphinstance_vertex:"#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t#endif\n\tuniform sampler2DArray morphTargetsTexture;\n\tuniform ivec2 morphTargetsTextureSize;\n\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t}\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;",normal_fragment_maps:"#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",opaque_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec4( 0., 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec4( 1., 1., 1., 1. );\n\tfloat vuf;\n\tfloat af = modf( v * PackFactors.a, vuf );\n\tfloat bf = modf( vuf * ShiftRight8, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec3( 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec3( 1., 1., 1. );\n\tfloat vuf;\n\tfloat bf = modf( v * PackFactors.b, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec2( 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec2( 1., 1. );\n\tfloat vuf;\n\tfloat gf = modf( v * 256., vuf );\n\treturn vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n\treturn dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n\treturn v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tfloat shadow = 1.0;\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\t\n\t\tfloat lightToPositionLength = length( lightToPosition );\n\t\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n\t\t\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\t\tdp += shadowBias;\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\t\tshadow = (\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t\t) * ( 1.0 / 9.0 );\n\t\t\t#else\n\t\t\t\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n#endif",shadowmap_pars_vertex:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tconst float StartCompression = 0.8 - 0.04;\n\tconst float Desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min( color.r, min( color.g, color.b ) );\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max( color.r, max( color.g, color.b ) );\n\tif ( peak < StartCompression ) return color;\n\tfloat d = 1. - StartCompression;\n\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\n\tcolor *= newPeak / peak;\n\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n\treturn mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec4 transmittedLight;\n\t\tvec3 transmittance;\n\t\t#ifdef USE_DISPERSION\n\t\t\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n\t\t\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n\t\t\tfor ( int i = 0; i < 3; i ++ ) {\n\t\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n\t\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\n\t\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\t\trefractionCoords += 1.0;\n\t\t\t\trefractionCoords /= 2.0;\n\t\t\n\t\t\t\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n\t\t\t\ttransmittedLight[ i ] = transmissionSample[ i ];\n\t\t\t\ttransmittedLight.a += transmissionSample.a;\n\t\t\t\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n\t\t\t}\n\t\t\ttransmittedLight.a /= 3.0;\n\t\t\n\t\t#else\n\t\t\n\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\trefractionCoords += 1.0;\n\t\t\trefractionCoords /= 2.0;\n\t\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\t\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\t\n\t\t#endif\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif",uv_pars_fragment:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_pars_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",backgroundCube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",backgroundCube_frag:"#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",depth_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#elif DEPTH_PACKING == 3202\n\t\tgl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n\t#elif DEPTH_PACKING == 3203\n\t\tgl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n\tuniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix[ 3 ];\n\tvec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}"},Dn={common:{diffuse:{value:new $r$1(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Gs},alphaMap:{value:null},alphaMapTransform:{value:new Gs},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Gs}},envmap:{envMap:{value:null},envMapRotation:{value:new Gs},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Gs}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Gs}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Gs},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Gs},normalScale:{value:new Zs(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Gs},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Gs}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Gs}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Gs}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new $r$1(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new $r$1(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Gs},alphaTest:{value:0},uvTransform:{value:new Gs}},sprite:{diffuse:{value:new $r$1(16777215)},opacity:{value:1},center:{value:new Zs(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Gs},alphaMap:{value:null},alphaMapTransform:{value:new Gs},alphaTest:{value:0}}},yn={basic:{uniforms:Dn$1([Dn.common,Dn.specularmap,Dn.envmap,Dn.aomap,Dn.lightmap,Dn.fog]),vertexShader:wn.meshbasic_vert,fragmentShader:wn.meshbasic_frag},lambert:{uniforms:Dn$1([Dn.common,Dn.specularmap,Dn.envmap,Dn.aomap,Dn.lightmap,Dn.emissivemap,Dn.bumpmap,Dn.normalmap,Dn.displacementmap,Dn.fog,Dn.lights,{emissive:{value:new $r$1(0)}}]),vertexShader:wn.meshlambert_vert,fragmentShader:wn.meshlambert_frag},phong:{uniforms:Dn$1([Dn.common,Dn.specularmap,Dn.envmap,Dn.aomap,Dn.lightmap,Dn.emissivemap,Dn.bumpmap,Dn.normalmap,Dn.displacementmap,Dn.fog,Dn.lights,{emissive:{value:new $r$1(0)},specular:{value:new $r$1(1118481)},shininess:{value:30}}]),vertexShader:wn.meshphong_vert,fragmentShader:wn.meshphong_frag},standard:{uniforms:Dn$1([Dn.common,Dn.envmap,Dn.aomap,Dn.lightmap,Dn.emissivemap,Dn.bumpmap,Dn.normalmap,Dn.displacementmap,Dn.roughnessmap,Dn.metalnessmap,Dn.fog,Dn.lights,{emissive:{value:new $r$1(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:wn.meshphysical_vert,fragmentShader:wn.meshphysical_frag},toon:{uniforms:Dn$1([Dn.common,Dn.aomap,Dn.lightmap,Dn.emissivemap,Dn.bumpmap,Dn.normalmap,Dn.displacementmap,Dn.gradientmap,Dn.fog,Dn.lights,{emissive:{value:new $r$1(0)}}]),vertexShader:wn.meshtoon_vert,fragmentShader:wn.meshtoon_frag},matcap:{uniforms:Dn$1([Dn.common,Dn.bumpmap,Dn.normalmap,Dn.displacementmap,Dn.fog,{matcap:{value:null}}]),vertexShader:wn.meshmatcap_vert,fragmentShader:wn.meshmatcap_frag},points:{uniforms:Dn$1([Dn.points,Dn.fog]),vertexShader:wn.points_vert,fragmentShader:wn.points_frag},dashed:{uniforms:Dn$1([Dn.common,Dn.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:wn.linedashed_vert,fragmentShader:wn.linedashed_frag},depth:{uniforms:Dn$1([Dn.common,Dn.displacementmap]),vertexShader:wn.depth_vert,fragmentShader:wn.depth_frag},normal:{uniforms:Dn$1([Dn.common,Dn.bumpmap,Dn.normalmap,Dn.displacementmap,{opacity:{value:1}}]),vertexShader:wn.meshnormal_vert,fragmentShader:wn.meshnormal_frag},sprite:{uniforms:Dn$1([Dn.sprite,Dn.fog]),vertexShader:wn.sprite_vert,fragmentShader:wn.sprite_frag},background:{uniforms:{uvTransform:{value:new Gs},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:wn.background_vert,fragmentShader:wn.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new Gs}},vertexShader:wn.backgroundCube_vert,fragmentShader:wn.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:wn.cube_vert,fragmentShader:wn.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:wn.equirect_vert,fragmentShader:wn.equirect_frag},distanceRGBA:{uniforms:Dn$1([Dn.common,Dn.displacementmap,{referencePosition:{value:new Ii$1},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:wn.distanceRGBA_vert,fragmentShader:wn.distanceRGBA_frag},shadow:{uniforms:Dn$1([Dn.lights,Dn.fog,{color:{value:new $r$1(0)},opacity:{value:1}}]),vertexShader:wn.shadow_vert,fragmentShader:wn.shadow_frag}};yn.physical={uniforms:Dn$1([yn.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Gs},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Gs},clearcoatNormalScale:{value:new Zs(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Gs},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Gs},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Gs},sheen:{value:0},sheenColor:{value:new $r$1(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Gs},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Gs},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Gs},transmissionSamplerSize:{value:new Zs},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Gs},attenuationDistance:{value:0},attenuationColor:{value:new $r$1(0)},specularColor:{value:new $r$1(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Gs},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Gs},anisotropyVector:{value:new Zs},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Gs}}]),vertexShader:wn.meshphysical_vert,fragmentShader:wn.meshphysical_frag};const In={r:0,b:0,g:0},Nn=new yr$1,On=new nr$1;function Fn(t,n,i,r,_,g,v){const E=new $r$1(0);let S,T,M=!0===g?0:1,x=null,R=0,A=null;function b(e){let t=!0===e.isScene?e.background:null;if(t&&t.isTexture){t=(e.backgroundBlurriness>0?i:n).get(t);}return t}function C(e,n){e.getRGB(In,Hn$1(t)),r.buffers.color.setClear(In.r,In.g,In.b,n,v);}return {getClearColor:function(){return E},setClearColor:function(e,t=1){E.set(e),M=t,C(E,M);},getClearAlpha:function(){return M},setClearAlpha:function(e){M=e,C(E,M);},render:function(e){let n=!1;const i=b(e);null===i?C(E,M):i&&i.isColor&&(C(i,1),n=!0);const a=t.xr.getEnvironmentBlendMode();"additive"===a?r.buffers.color.setClear(0,0,0,1,v):"alpha-blend"===a&&r.buffers.color.setClear(0,0,0,0,v),(t.autoClear||n)&&(r.buffers.depth.setTest(!0),r.buffers.depth.setMask(!0),r.buffers.color.setMask(!0),t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil));},addToRenderList:function(e,n){const i=b(n);i&&(i.isCubeTexture||i.mapping===dt)?(void 0===T&&(T=new Vn$1(new Un$1(1,1,1),new Jn$1({name:"BackgroundCubeMaterial",uniforms:jn$1(yn.backgroundCube.uniforms),vertexShader:yn.backgroundCube.vertexShader,fragmentShader:yn.backgroundCube.fragmentShader,side:d$1,depthTest:!1,depthWrite:!1,fog:!1})),T.geometry.deleteAttribute("normal"),T.geometry.deleteAttribute("uv"),T.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld);},Object.defineProperty(T.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),_.update(T)),Nn.copy(n.backgroundRotation),Nn.x*=-1,Nn.y*=-1,Nn.z*=-1,i.isCubeTexture&&!1===i.isRenderTargetTexture&&(Nn.y*=-1,Nn.z*=-1),T.material.uniforms.envMap.value=i,T.material.uniforms.flipEnvMap.value=i.isCubeTexture&&!1===i.isRenderTargetTexture?-1:1,T.material.uniforms.backgroundBlurriness.value=n.backgroundBlurriness,T.material.uniforms.backgroundIntensity.value=n.backgroundIntensity,T.material.uniforms.backgroundRotation.value.setFromMatrix4(On.makeRotationFromEuler(Nn)),T.material.toneMapped=ui$1.getTransfer(i.colorSpace)!==Ke,x===i&&R===i.version&&A===t.toneMapping||(T.material.needsUpdate=!0,x=i,R=i.version,A=t.toneMapping),T.layers.enableAll(),e.unshift(T,T.geometry,T.material,0,0,null)):i&&i.isTexture&&(void 0===S&&(S=new Vn$1(new ul(2,2),new Jn$1({name:"BackgroundMaterial",uniforms:jn$1(yn.background.uniforms),vertexShader:yn.background.vertexShader,fragmentShader:yn.background.fragmentShader,side:u$1,depthTest:!1,depthWrite:!1,fog:!1})),S.geometry.deleteAttribute("normal"),Object.defineProperty(S.material,"map",{get:function(){return this.uniforms.t2D.value}}),_.update(S)),S.material.uniforms.t2D.value=i,S.material.uniforms.backgroundIntensity.value=n.backgroundIntensity,S.material.toneMapped=ui$1.getTransfer(i.colorSpace)!==Ke,!0===i.matrixAutoUpdate&&i.updateMatrix(),S.material.uniforms.uvTransform.value.copy(i.matrix),x===i&&R===i.version&&A===t.toneMapping||(S.material.needsUpdate=!0,x=i,R=i.version,A=t.toneMapping),S.layers.enableAll(),e.unshift(S,S.geometry,S.material,0,0,null));},dispose:function(){void 0!==T&&(T.geometry.dispose(),T.material.dispose()),void 0!==S&&(S.geometry.dispose(),S.material.dispose());}}}function Bn(e,t){const n=e.getParameter(e.MAX_VERTEX_ATTRIBS),i={},r=c(null);let a=r,o=!1;function s(t){return e.bindVertexArray(t)}function l(t){return e.deleteVertexArray(t)}function c(e){const t=[],i=[],r=[];for(let e=0;e<n;e++)t[e]=0,i[e]=0,r[e]=0;return {geometry:null,program:null,wireframe:!1,newAttributes:t,enabledAttributes:i,attributeDivisors:r,object:e,attributes:{},index:null}}function d(){const e=a.newAttributes;for(let t=0,n=e.length;t<n;t++)e[t]=0;}function u(e){f(e,0);}function f(t,n){const i=a.newAttributes,r=a.enabledAttributes,o=a.attributeDivisors;i[t]=1,0===r[t]&&(e.enableVertexAttribArray(t),r[t]=1),o[t]!==n&&(e.vertexAttribDivisor(t,n),o[t]=n);}function p(){const t=a.newAttributes,n=a.enabledAttributes;for(let i=0,r=n.length;i<r;i++)n[i]!==t[i]&&(e.disableVertexAttribArray(i),n[i]=0);}function m(t,n,i,r,a,o,s){!0===s?e.vertexAttribIPointer(t,n,i,a,o):e.vertexAttribPointer(t,n,i,r,a,o);}function h(){_(),o=!0,a!==r&&(a=r,s(a.object));}function _(){r.geometry=null,r.program=null,r.wireframe=!1;}return {setup:function(n,r,l,h,_){let g=!1;const E=function(t,n,r){const a=!0===r.wireframe;let o=i[t.id];void 0===o&&(o={},i[t.id]=o);let s=o[n.id];void 0===s&&(s={},o[n.id]=s);let l=s[a];void 0===l&&(l=c(e.createVertexArray()),s[a]=l);return l}(h,l,r);a!==E&&(a=E,s(a.object)),g=function(e,t,n,i){const r=a.attributes,o=t.attributes;let s=0;const l=n.getAttributes();for(const t in l){if(l[t].location>=0){const n=r[t];let i=o[t];if(void 0===i&&("instanceMatrix"===t&&e.instanceMatrix&&(i=e.instanceMatrix),"instanceColor"===t&&e.instanceColor&&(i=e.instanceColor)),void 0===n)return !0;if(n.attribute!==i)return !0;if(i&&n.data!==i.data)return !0;s++;}}return a.attributesNum!==s||a.index!==i}(n,h,l,_),g&&function(e,t,n,i){const r={},o=t.attributes;let s=0;const l=n.getAttributes();for(const t in l){if(l[t].location>=0){let n=o[t];void 0===n&&("instanceMatrix"===t&&e.instanceMatrix&&(n=e.instanceMatrix),"instanceColor"===t&&e.instanceColor&&(n=e.instanceColor));const i={};i.attribute=n,n&&n.data&&(i.data=n.data),r[t]=i,s++;}}a.attributes=r,a.attributesNum=s,a.index=i;}(n,h,l,_),null!==_&&t.update(_,e.ELEMENT_ARRAY_BUFFER),(g||o)&&(o=!1,function(n,i,r,a){d();const o=a.attributes,s=r.getAttributes(),l=i.defaultAttributeValues;for(const i in s){const r=s[i];if(r.location>=0){let s=o[i];if(void 0===s&&("instanceMatrix"===i&&n.instanceMatrix&&(s=n.instanceMatrix),"instanceColor"===i&&n.instanceColor&&(s=n.instanceColor)),void 0!==s){const i=s.normalized,o=s.itemSize,l=t.get(s);if(void 0===l)continue;const c=l.buffer,d=l.type,p=l.bytesPerElement,h=d===e.INT||d===e.UNSIGNED_INT||s.gpuType===Bt;if(s.isInterleavedBufferAttribute){const t=s.data,l=t.stride,_=s.offset;if(t.isInstancedInterleavedBuffer){for(let e=0;e<r.locationSize;e++)f(r.location+e,t.meshPerAttribute);!0!==n.isInstancedMesh&&void 0===a._maxInstanceCount&&(a._maxInstanceCount=t.meshPerAttribute*t.count);}else for(let e=0;e<r.locationSize;e++)u(r.location+e);e.bindBuffer(e.ARRAY_BUFFER,c);for(let e=0;e<r.locationSize;e++)m(r.location+e,o/r.locationSize,d,i,l*p,(_+o/r.locationSize*e)*p,h);}else {if(s.isInstancedBufferAttribute){for(let e=0;e<r.locationSize;e++)f(r.location+e,s.meshPerAttribute);!0!==n.isInstancedMesh&&void 0===a._maxInstanceCount&&(a._maxInstanceCount=s.meshPerAttribute*s.count);}else for(let e=0;e<r.locationSize;e++)u(r.location+e);e.bindBuffer(e.ARRAY_BUFFER,c);for(let e=0;e<r.locationSize;e++)m(r.location+e,o/r.locationSize,d,i,o*p,o/r.locationSize*e*p,h);}}else if(void 0!==l){const t=l[i];if(void 0!==t)switch(t.length){case 2:e.vertexAttrib2fv(r.location,t);break;case 3:e.vertexAttrib3fv(r.location,t);break;case 4:e.vertexAttrib4fv(r.location,t);break;default:e.vertexAttrib1fv(r.location,t);}}}}p();}(n,r,l,h),null!==_&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t.get(_).buffer));},reset:h,resetDefaultState:_,dispose:function(){h();for(const e in i){const t=i[e];for(const e in t){const n=t[e];for(const e in n)l(n[e].object),delete n[e];delete t[e];}delete i[e];}},releaseStatesOfGeometry:function(e){if(void 0===i[e.id])return;const t=i[e.id];for(const e in t){const n=t[e];for(const e in n)l(n[e].object),delete n[e];delete t[e];}delete i[e.id];},releaseStatesOfProgram:function(e){for(const t in i){const n=i[t];if(void 0===n[e.id])continue;const r=n[e.id];for(const e in r)l(r[e].object),delete r[e];delete n[e.id];}},initAttributes:d,enableAttribute:u,disableUnusedAttributes:p}}function Hn(e,t,n){let i;function r(t,r,a){0!==a&&(e.drawArraysInstanced(i,t,r,a),n.update(r,i,a));}this.setMode=function(e){i=e;},this.render=function(t,r){e.drawArrays(i,t,r),n.update(r,i,1);},this.renderInstances=r,this.renderMultiDraw=function(e,r,a){if(0===a)return;t.get("WEBGL_multi_draw").multiDrawArraysWEBGL(i,e,0,r,0,a);let o=0;for(let e=0;e<a;e++)o+=r[e];n.update(o,i,1);},this.renderMultiDrawInstances=function(e,a,o,s){if(0===o)return;const l=t.get("WEBGL_multi_draw");if(null===l)for(let t=0;t<e.length;t++)r(e[t],a[t],s[t]);else {l.multiDrawArraysInstancedWEBGL(i,e,0,a,0,s,0,o);let t=0;for(let e=0;e<o;e++)t+=a[e]*s[e];n.update(t,i,1);}};}function Gn(e,t,n,i){let r;function a(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return "highp";t="mediump";}return "mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let o=void 0!==n.precision?n.precision:"highp";const s=a(o);s!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",s,"instead."),o=s);const l=!0===n.logarithmicDepthBuffer,c=!0===n.reverseDepthBuffer&&t.has("EXT_clip_control"),d=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),u=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS);return {isWebGL2:!0,getMaxAnisotropy:function(){if(void 0!==r)return r;if(!0===t.has("EXT_texture_filter_anisotropic")){const n=t.get("EXT_texture_filter_anisotropic");r=e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT);}else r=0;return r},getMaxPrecision:a,textureFormatReadable:function(t){return t===Wt||i.convert(t)===e.getParameter(e.IMPLEMENTATION_COLOR_READ_FORMAT)},textureTypeReadable:function(n){const r=n===Rt&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return !(n!==Tt&&i.convert(n)!==e.getParameter(e.IMPLEMENTATION_COLOR_READ_TYPE)&&n!==Et&&!r)},precision:o,logarithmicDepthBuffer:l,reverseDepthBuffer:c,maxTextures:d,maxVertexTextures:u,maxTextureSize:e.getParameter(e.MAX_TEXTURE_SIZE),maxCubemapSize:e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),maxAttributes:e.getParameter(e.MAX_VERTEX_ATTRIBS),maxVertexUniforms:e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),maxVaryings:e.getParameter(e.MAX_VARYING_VECTORS),maxFragmentUniforms:e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),vertexTextures:u>0,maxSamples:e.getParameter(e.MAX_SAMPLES)}}function Vn(e){const n=this;let i=null,r=0,a=!1,o=!1;const s=new ea$1,l=new Gs,c={value:null,needsUpdate:!1};function d(e,t,i,r){const a=null!==e?e.length:0;let o=null;if(0!==a){if(o=c.value,!0!==r||null===o){const n=i+4*a,r=t.matrixWorldInverse;l.getNormalMatrix(r),(null===o||o.length<n)&&(o=new Float32Array(n));for(let t=0,n=i;t!==a;++t,n+=4)s.copy(e[t]).applyMatrix4(r,l),s.normal.toArray(o,n),o[n+3]=s.constant;}c.value=o,c.needsUpdate=!0;}return n.numPlanes=a,n.numIntersection=0,o}this.uniform=c,this.numPlanes=0,this.numIntersection=0,this.init=function(e,t){const n=0!==e.length||t||0!==r||a;return a=t,r=e.length,n},this.beginShadows=function(){o=!0,d(null);},this.endShadows=function(){o=!1;},this.setGlobalState=function(e,t){i=d(e,t,0);},this.setState=function(t,s,l){const u=t.clippingPlanes,f=t.clipIntersection,p=t.clipShadows,m=e.get(t);if(!a||null===u||0===u.length||o&&!p)o?d(null):function(){c.value!==i&&(c.value=i,c.needsUpdate=r>0);n.numPlanes=r,n.numIntersection=0;}();else {const e=o?0:r,t=4*e;let n=m.clippingState||null;c.value=n,n=d(u,s,t,l);for(let e=0;e!==t;++e)n[e]=i[e];m.clippingState=n,this.numIntersection=f?this.numPlanes:0,this.numPlanes+=e;}};}function zn(e){let t=new WeakMap;function n(e,t){return t===ct?e.mapping=ht:t===ut&&(e.mapping=lt),e}function i(e){const n=e.target;n.removeEventListener("dispose",i);const r=t.get(n);void 0!==r&&(t.delete(n),r.dispose());}return {get:function(r){if(r&&r.isTexture){const a=r.mapping;if(a===ct||a===ut){if(t.has(r)){return n(t.get(r).texture,r.mapping)}{const a=r.image;if(a&&a.height>0){const o=new eo(a.height);return o.fromEquirectangularTexture(e,r),t.set(r,o),r.addEventListener("dispose",i),n(o.texture,r.mapping)}return null}}}return r},dispose:function(){t=new WeakMap;}}}const kn=[.125,.215,.35,.446,.526,.582],Wn=20,Xn=new Tc,Yn=new $r$1;let jn=null,Kn=0,qn=0,Zn=!1;const $n=(1+Math.sqrt(5))/2,Qn=1/$n,Jn=[new Ii$1(-$n,Qn,0),new Ii$1($n,Qn,0),new Ii$1(-Qn,0,$n),new Ii$1(Qn,0,$n),new Ii$1(0,$n,-Qn),new Ii$1(0,$n,Qn),new Ii$1(-1,1,-1),new Ii$1(1,1,-1),new Ii$1(-1,1,1),new Ii$1(1,1,1)];class ei{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial);}fromScene(e,t=0,n=.1,i=100){jn=this._renderer.getRenderTarget(),Kn=this._renderer.getActiveCubeFace(),qn=this._renderer.getActiveMipmapLevel(),Zn=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(e,n,i,r),t>0&&this._blur(r,0,0,t),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=ri(),this._compileMaterial(this._cubemapMaterial));}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=ii(),this._compileMaterial(this._equirectMaterial));}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose();}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax);}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose();}_cleanup(e){this._renderer.setRenderTarget(jn,Kn,qn),this._renderer.xr.enabled=Zn,e.scissorTest=!1,ni(e,0,0,e.width,e.height);}_fromTexture(e,t){e.mapping===ht||e.mapping===lt?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),jn=this._renderer.getRenderTarget(),Kn=this._renderer.getActiveCubeFace(),qn=this._renderer.getActiveMipmapLevel(),Zn=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:wt,minFilter:wt,generateMipmaps:!1,type:Rt,format:Wt,colorSpace:$e,depthBuffer:!1},i=ti(e,t,n);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=ti(e,t,n);const{_lodMax:i}=this;(({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(e){const t=[],n=[],i=[];let r=e;const a=e-4+1+kn.length;for(let o=0;o<a;o++){const a=Math.pow(2,r);n.push(a);let s=1/a;o>e-4?s=kn[o-e+4-1]:0===o&&(s=0),i.push(s);const l=1/(a-2),c=-l,d=1+l,u=[c,c,d,c,d,d,c,c,d,d,c,d],f=6,p=6,m=3,h=2,_=1,g=new Float32Array(m*p*f),v=new Float32Array(h*p*f),E=new Float32Array(_*p*f);for(let e=0;e<f;e++){const t=e%3*2/3-1,n=e>2?0:-1,i=[t,n,0,t+2/3,n,0,t+2/3,n+1,0,t,n,0,t+2/3,n+1,0,t,n+1,0];g.set(i,m*p*e),v.set(u,h*p*e);const r=[e,e,e,e,e,e];E.set(r,_*p*e);}const S=new zn$1;S.setAttribute("position",new cn(g,m)),S.setAttribute("uv",new cn(v,h)),S.setAttribute("faceIndex",new cn(E,_)),t.push(S),r>4&&r--;}return {lodPlanes:t,sizeLods:n,sigmas:i}}(i))),this._blurMaterial=function(e,t,n){const i=new Float32Array(Wn),a=new Ii$1(0,1,0),o=new Jn$1({name:"SphericalGaussianBlur",defines:{n:Wn,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${e}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:a}},vertexShader:ai(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:m$1,depthTest:!1,depthWrite:!1});return o}(i,e,t);}return i}_compileMaterial(e){const t=new Vn$1(this._lodPlanes[0],e);this._renderer.compile(t,Xn);}_sceneToCubeUV(e,t,n,i){const r=new $n$1(90,1,t,n),a=[1,-1,1,1,1,1],l=[1,1,1,-1,-1,-1],c=this._renderer,u=c.autoClear,f=c.toneMapping;c.getClearColor(Yn),c.toneMapping=$,c.autoClear=!1;const p=new en({name:"PMREM.Background",side:d$1,depthWrite:!1,depthTest:!1}),m=new Vn$1(new Un$1,p);let h=!1;const _=e.background;_?_.isColor&&(p.color.copy(_),e.background=null,h=!0):(p.color.copy(Yn),h=!0);for(let t=0;t<6;t++){const n=t%3;0===n?(r.up.set(0,a[t],0),r.lookAt(l[t],0,0)):1===n?(r.up.set(0,0,a[t]),r.lookAt(0,l[t],0)):(r.up.set(0,a[t],0),r.lookAt(0,0,l[t]));const o=this._cubeSize;ni(i,n*o,t>2?o:0,o,o),c.setRenderTarget(i),h&&c.render(m,r),c.render(e,r);}m.geometry.dispose(),m.material.dispose(),c.toneMapping=f,c.autoClear=u,e.background=_;}_textureToCubeUV(e,t){const n=this._renderer,i=e.mapping===ht||e.mapping===lt;i?(null===this._cubemapMaterial&&(this._cubemapMaterial=ri()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===e.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=ii());const r=i?this._cubemapMaterial:this._equirectMaterial,a=new Vn$1(this._lodPlanes[0],r);r.uniforms.envMap.value=e;const s=this._cubeSize;ni(t,0,0,3*s,2*s),n.setRenderTarget(t),n.render(a,Xn);}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;const i=this._lodPlanes.length;for(let t=1;t<i;t++){const n=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),r=Jn[(i-t-1)%Jn.length];this._blur(e,t-1,t,n,r);}t.autoClear=n;}_blur(e,t,n,i,r){const a=this._pingPongRenderTarget;this._halfBlur(e,a,t,n,i,"latitudinal",r),this._halfBlur(a,e,n,n,i,"longitudinal",r);}_halfBlur(e,t,n,i,r,a,s){const l=this._renderer,c=this._blurMaterial;"latitudinal"!==a&&"longitudinal"!==a&&console.error("blur direction must be either latitudinal or longitudinal!");const d=new Vn$1(this._lodPlanes[i],c),u=c.uniforms,f=this._sizeLods[n]-1,p=isFinite(r)?Math.PI/(2*f):2*Math.PI/39,m=r/p,h=isFinite(r)?1+Math.floor(3*m):Wn;h>Wn&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${h} samples when the maximum is set to 20`);const _=[];let g=0;for(let e=0;e<Wn;++e){const t=e/m,n=Math.exp(-t*t/2);_.push(n),0===e?g+=n:e<h&&(g+=2*n);}for(let e=0;e<_.length;e++)_[e]=_[e]/g;u.envMap.value=e.texture,u.samples.value=h,u.weights.value=_,u.latitudinal.value="latitudinal"===a,s&&(u.poleAxis.value=s);const{_lodMax:v}=this;u.dTheta.value=p,u.mipInt.value=v-n;const E=this._sizeLods[i];ni(t,3*E*(i>v-4?i-v+4:0),4*(this._cubeSize-E),3*E,2*E),l.setRenderTarget(t),l.render(d,Xn);}}function ti(e,t,n){const i=new Si$1(e,t,n);return i.texture.mapping=dt,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function ni(e,t,n,i,r){e.viewport.set(t,n,i,r),e.scissor.set(t,n,i,r);}function ii(){return new Jn$1({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:ai(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:m$1,depthTest:!1,depthWrite:!1})}function ri(){return new Jn$1({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:ai(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:m$1,depthTest:!1,depthWrite:!1})}function ai(){return "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t"}function oi(e){let t=new WeakMap,n=null;function i(e){const n=e.target;n.removeEventListener("dispose",i);const r=t.get(n);void 0!==r&&(t.delete(n),r.dispose());}return {get:function(r){if(r&&r.isTexture){const a=r.mapping,o=a===ct||a===ut,s=a===ht||a===lt;if(o||s){let a=t.get(r);const l=void 0!==a?a.texture.pmremVersion:0;if(r.isRenderTargetTexture&&r.pmremVersion!==l)return null===n&&(n=new ei(e)),a=o?n.fromEquirectangular(r,a):n.fromCubemap(r,a),a.texture.pmremVersion=r.pmremVersion,t.set(r,a),a.texture;if(void 0!==a)return a.texture;{const l=r.image;return o&&l&&l.height>0||s&&l&&function(e){let t=0;const n=6;for(let i=0;i<n;i++)void 0!==e[i]&&t++;return t===n}(l)?(null===n&&(n=new ei(e)),a=o?n.fromEquirectangular(r):n.fromCubemap(r),a.texture.pmremVersion=r.pmremVersion,t.set(r,a),r.addEventListener("dispose",i),a.texture):null}}}return r},dispose:function(){t=new WeakMap,null!==n&&(n.dispose(),n=null);}}}function si(e){const t={};function n(n){if(void 0!==t[n])return t[n];let i;switch(n){case"WEBGL_depth_texture":i=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=e.getExtension(n);}return t[n]=i,i}return {has:function(e){return null!==n(e)},init:function(){n("EXT_color_buffer_float"),n("WEBGL_clip_cull_distance"),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture"),n("WEBGL_render_shared_exponent");},get:function(e){const t=n(e);return null===t&&ri$1("THREE.WebGLRenderer: "+e+" extension not supported."),t}}}function li(e,t,n,i){const r={},a=new WeakMap;function o(e){const s=e.target;null!==s.index&&t.remove(s.index);for(const e in s.attributes)t.remove(s.attributes[e]);s.removeEventListener("dispose",o),delete r[s.id];const l=a.get(s);l&&(t.remove(l),a.delete(s)),i.releaseStatesOfGeometry(s),!0===s.isInstancedBufferGeometry&&delete s._maxInstanceCount,n.memory.geometries--;}function s(e){const n=[],i=e.index,r=e.attributes.position;let o=0;if(null!==i){const e=i.array;o=i.version;for(let t=0,i=e.length;t<i;t+=3){const i=e[t+0],r=e[t+1],a=e[t+2];n.push(i,r,r,a,a,i);}}else {if(void 0===r)return;{const e=r.array;o=r.version;for(let t=0,i=e.length/3-1;t<i;t+=3){const e=t+0,i=t+1,r=t+2;n.push(e,i,i,r,r,e);}}}const s=new(Qs(n)?gn:yn$1)(n,1);s.version=o;const l=a.get(e);l&&t.remove(l),a.set(e,s);}return {get:function(e,t){return !0===r[t.id]||(t.addEventListener("dispose",o),r[t.id]=!0,n.memory.geometries++),t},update:function(n){const i=n.attributes;for(const n in i)t.update(i[n],e.ARRAY_BUFFER);},getWireframeAttribute:function(e){const t=a.get(e);if(t){const n=e.index;null!==n&&t.version<n.version&&s(e);}else s(e);return a.get(e)}}}function ci(e,t,n){let i,r,a;function o(t,o,s){0!==s&&(e.drawElementsInstanced(i,o,r,t*a,s),n.update(o,i,s));}this.setMode=function(e){i=e;},this.setIndex=function(e){r=e.type,a=e.bytesPerElement;},this.render=function(t,o){e.drawElements(i,o,r,t*a),n.update(o,i,1);},this.renderInstances=o,this.renderMultiDraw=function(e,a,o){if(0===o)return;t.get("WEBGL_multi_draw").multiDrawElementsWEBGL(i,a,0,r,e,0,o);let s=0;for(let e=0;e<o;e++)s+=a[e];n.update(s,i,1);},this.renderMultiDrawInstances=function(e,s,l,c){if(0===l)return;const d=t.get("WEBGL_multi_draw");if(null===d)for(let t=0;t<e.length;t++)o(e[t]/a,s[t],c[t]);else {d.multiDrawElementsInstancedWEBGL(i,s,0,r,e,0,c,0,l);let t=0;for(let e=0;e<l;e++)t+=s[e]*c[e];n.update(t,i,1);}};}function di(e){const t={frame:0,calls:0,triangles:0,points:0,lines:0};return {memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.calls=0,t.triangles=0,t.points=0,t.lines=0;},update:function(n,i,r){switch(t.calls++,i){case e.TRIANGLES:t.triangles+=r*(n/3);break;case e.LINES:t.lines+=r*(n/2);break;case e.LINE_STRIP:t.lines+=r*(n-1);break;case e.LINE_LOOP:t.lines+=r*n;break;case e.POINTS:t.points+=r*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",i);}}}}function ui(e,t,i){const r=new WeakMap,a=new wi$1;return {update:function(o,s,l){const c=o.morphTargetInfluences,d=s.morphAttributes.position||s.morphAttributes.normal||s.morphAttributes.color,u=void 0!==d?d.length:0;let f=r.get(s);if(void 0===f||f.count!==u){void 0!==f&&f.texture.dispose();const p=void 0!==s.morphAttributes.position,m=void 0!==s.morphAttributes.normal,h=void 0!==s.morphAttributes.color,_=s.morphAttributes.position||[],g=s.morphAttributes.normal||[],v=s.morphAttributes.color||[];let E=0;!0===p&&(E=1),!0===m&&(E=2),!0===h&&(E=3);let S=s.attributes.position.count*E,T=1;S>t.maxTextureSize&&(T=Math.ceil(S/t.maxTextureSize),S=t.maxTextureSize);const x=new Float32Array(S*T*4*u),R=new _i$1(x,S,T,u);R.type=Et,R.needsUpdate=!0;const A=4*E;for(let C=0;C<u;C++){const L=_[C],P=g[C],U=v[C],w=S*T*4*C;for(let D=0;D<L.count;D++){const y=D*A;!0===p&&(a.fromBufferAttribute(L,D),x[w+y+0]=a.x,x[w+y+1]=a.y,x[w+y+2]=a.z,x[w+y+3]=0),!0===m&&(a.fromBufferAttribute(P,D),x[w+y+4]=a.x,x[w+y+5]=a.y,x[w+y+6]=a.z,x[w+y+7]=0),!0===h&&(a.fromBufferAttribute(U,D),x[w+y+8]=a.x,x[w+y+9]=a.y,x[w+y+10]=a.z,x[w+y+11]=4===U.itemSize?a.w:1);}}function b(){R.dispose(),r.delete(s),s.removeEventListener("dispose",b);}f={count:u,texture:R,size:new Zs(S,T)},r.set(s,f),s.addEventListener("dispose",b);}if(!0===o.isInstancedMesh&&null!==o.morphTexture)l.getUniforms().setValue(e,"morphTexture",o.morphTexture,i);else {let I=0;for(let O=0;O<c.length;O++)I+=c[O];const N=s.morphTargetsRelative?1:1-I;l.getUniforms().setValue(e,"morphTargetBaseInfluence",N),l.getUniforms().setValue(e,"morphTargetInfluences",c);}l.getUniforms().setValue(e,"morphTargetsTexture",f.texture,i),l.getUniforms().setValue(e,"morphTargetsTextureSize",f.size);}}}function fi(e,t,n,i){let r=new WeakMap;function a(e){const t=e.target;t.removeEventListener("dispose",a),n.remove(t.instanceMatrix),null!==t.instanceColor&&n.remove(t.instanceColor);}return {update:function(o){const s=i.render.frame,l=o.geometry,c=t.get(o,l);if(r.get(c)!==s&&(t.update(c),r.set(c,s)),o.isInstancedMesh&&(!1===o.hasEventListener("dispose",a)&&o.addEventListener("dispose",a),r.get(o)!==s&&(n.update(o.instanceMatrix,e.ARRAY_BUFFER),null!==o.instanceColor&&n.update(o.instanceColor,e.ARRAY_BUFFER),r.set(o,s))),o.isSkinnedMesh){const e=o.skeleton;r.get(e)!==s&&(e.update(),r.set(e,s));}return c},dispose:function(){r=new WeakMap;}}}const pi$1=new vi$1,mi=new $a(1,1),hi=new _i$1,_i=new Ti$1,gi=new to,vi=[],Ei=[],Si=new Float32Array(16),Ti=new Float32Array(9),Mi=new Float32Array(4);function xi(e,t,n){const i=e[0];if(i<=0||i>0)return e;const r=t*n;let a=vi[r];if(void 0===a&&(a=new Float32Array(r),vi[r]=a),0!==t){i.toArray(a,0);for(let i=1,r=0;i!==t;++i)r+=n,e[i].toArray(a,r);}return a}function Ri(e,t){if(e.length!==t.length)return !1;for(let n=0,i=e.length;n<i;n++)if(e[n]!==t[n])return !1;return !0}function Ai(e,t){for(let n=0,i=t.length;n<i;n++)e[n]=t[n];}function bi(e,t){let n=Ei[t];void 0===n&&(n=new Int32Array(t),Ei[t]=n);for(let i=0;i!==t;++i)n[i]=e.allocateTextureUnit();return n}function Ci(e,t){const n=this.cache;n[0]!==t&&(e.uniform1f(this.addr,t),n[0]=t);}function Li(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2f(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else {if(Ri(n,t))return;e.uniform2fv(this.addr,t),Ai(n,t);}}function Pi(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3f(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else if(void 0!==t.r)n[0]===t.r&&n[1]===t.g&&n[2]===t.b||(e.uniform3f(this.addr,t.r,t.g,t.b),n[0]=t.r,n[1]=t.g,n[2]=t.b);else {if(Ri(n,t))return;e.uniform3fv(this.addr,t),Ai(n,t);}}function Ui(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else {if(Ri(n,t))return;e.uniform4fv(this.addr,t),Ai(n,t);}}function wi(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(Ri(n,t))return;e.uniformMatrix2fv(this.addr,!1,t),Ai(n,t);}else {if(Ri(n,i))return;Mi.set(i),e.uniformMatrix2fv(this.addr,!1,Mi),Ai(n,i);}}function Di(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(Ri(n,t))return;e.uniformMatrix3fv(this.addr,!1,t),Ai(n,t);}else {if(Ri(n,i))return;Ti.set(i),e.uniformMatrix3fv(this.addr,!1,Ti),Ai(n,i);}}function yi(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(Ri(n,t))return;e.uniformMatrix4fv(this.addr,!1,t),Ai(n,t);}else {if(Ri(n,i))return;Si.set(i),e.uniformMatrix4fv(this.addr,!1,Si),Ai(n,i);}}function Ii(e,t){const n=this.cache;n[0]!==t&&(e.uniform1i(this.addr,t),n[0]=t);}function Ni(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2i(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else {if(Ri(n,t))return;e.uniform2iv(this.addr,t),Ai(n,t);}}function Oi(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3i(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else {if(Ri(n,t))return;e.uniform3iv(this.addr,t),Ai(n,t);}}function Fi(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4i(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else {if(Ri(n,t))return;e.uniform4iv(this.addr,t),Ai(n,t);}}function Bi(e,t){const n=this.cache;n[0]!==t&&(e.uniform1ui(this.addr,t),n[0]=t);}function Hi(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2ui(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else {if(Ri(n,t))return;e.uniform2uiv(this.addr,t),Ai(n,t);}}function Gi(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3ui(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else {if(Ri(n,t))return;e.uniform3uiv(this.addr,t),Ai(n,t);}}function Vi(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4ui(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else {if(Ri(n,t))return;e.uniform4uiv(this.addr,t),Ai(n,t);}}function zi(e,t,n){const i=this.cache,r=n.allocateTextureUnit();let a;i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),this.type===e.SAMPLER_2D_SHADOW?(mi.compareFunction=bs,a=mi):a=pi$1,n.setTexture2D(t||a,r);}function ki(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTexture3D(t||_i,r);}function Wi(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTextureCube(t||gi,r);}function Xi(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTexture2DArray(t||hi,r);}function Yi(e,t){e.uniform1fv(this.addr,t);}function ji(e,t){const n=xi(t,this.size,2);e.uniform2fv(this.addr,n);}function Ki(e,t){const n=xi(t,this.size,3);e.uniform3fv(this.addr,n);}function qi(e,t){const n=xi(t,this.size,4);e.uniform4fv(this.addr,n);}function Zi(e,t){const n=xi(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,n);}function $i(e,t){const n=xi(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,n);}function Qi(e,t){const n=xi(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,n);}function Ji(e,t){e.uniform1iv(this.addr,t);}function er(e,t){e.uniform2iv(this.addr,t);}function tr(e,t){e.uniform3iv(this.addr,t);}function nr(e,t){e.uniform4iv(this.addr,t);}function ir(e,t){e.uniform1uiv(this.addr,t);}function rr(e,t){e.uniform2uiv(this.addr,t);}function ar(e,t){e.uniform3uiv(this.addr,t);}function or(e,t){e.uniform4uiv(this.addr,t);}function sr(e,t,n){const i=this.cache,r=t.length,a=bi(n,r);Ri(i,a)||(e.uniform1iv(this.addr,a),Ai(i,a));for(let e=0;e!==r;++e)n.setTexture2D(t[e]||pi$1,a[e]);}function lr(e,t,n){const i=this.cache,r=t.length,a=bi(n,r);Ri(i,a)||(e.uniform1iv(this.addr,a),Ai(i,a));for(let e=0;e!==r;++e)n.setTexture3D(t[e]||_i,a[e]);}function cr(e,t,n){const i=this.cache,r=t.length,a=bi(n,r);Ri(i,a)||(e.uniform1iv(this.addr,a),Ai(i,a));for(let e=0;e!==r;++e)n.setTextureCube(t[e]||gi,a[e]);}function dr(e,t,n){const i=this.cache,r=t.length,a=bi(n,r);Ri(i,a)||(e.uniform1iv(this.addr,a),Ai(i,a));for(let e=0;e!==r;++e)n.setTexture2DArray(t[e]||hi,a[e]);}class ur{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.setValue=function(e){switch(e){case 5126:return Ci;case 35664:return Li;case 35665:return Pi;case 35666:return Ui;case 35674:return wi;case 35675:return Di;case 35676:return yi;case 5124:case 35670:return Ii;case 35667:case 35671:return Ni;case 35668:case 35672:return Oi;case 35669:case 35673:return Fi;case 5125:return Bi;case 36294:return Hi;case 36295:return Gi;case 36296:return Vi;case 35678:case 36198:case 36298:case 36306:case 35682:return zi;case 35679:case 36299:case 36307:return ki;case 35680:case 36300:case 36308:case 36293:return Wi;case 36289:case 36303:case 36311:case 36292:return Xi}}(t.type);}}class fr{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=function(e){switch(e){case 5126:return Yi;case 35664:return ji;case 35665:return Ki;case 35666:return qi;case 35674:return Zi;case 35675:return $i;case 35676:return Qi;case 5124:case 35670:return Ji;case 35667:case 35671:return er;case 35668:case 35672:return tr;case 35669:case 35673:return nr;case 5125:return ir;case 36294:return rr;case 36295:return ar;case 36296:return or;case 35678:case 36198:case 36298:case 36306:case 35682:return sr;case 35679:case 36299:case 36307:return lr;case 35680:case 36300:case 36308:case 36293:return cr;case 36289:case 36303:case 36311:case 36292:return dr}}(t.type);}}class pr{constructor(e){this.id=e,this.seq=[],this.map={};}setValue(e,t,n){const i=this.seq;for(let r=0,a=i.length;r!==a;++r){const a=i[r];a.setValue(e,t[a.id],n);}}}const mr=/(\w+)(\])?(\[|\.)?/g;function hr(e,t){e.seq.push(t),e.map[t.id]=t;}function _r(e,t,n){const i=e.name,r=i.length;for(mr.lastIndex=0;;){const a=mr.exec(i),o=mr.lastIndex;let s=a[1];const l="]"===a[2],c=a[3];if(l&&(s|=0),void 0===c||"["===c&&o+2===r){hr(n,void 0===c?new ur(s,e,t):new fr(s,e,t));break}{let e=n.map[s];void 0===e&&(e=new pr(s),hr(n,e)),n=e;}}}class gr{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const n=e.getActiveUniform(t,i);_r(n,e.getUniformLocation(t,n.name),this);}}setValue(e,t,n,i){const r=this.map[t];void 0!==r&&r.setValue(e,n,i);}setOptional(e,t,n){const i=t[n];void 0!==i&&this.setValue(e,n,i);}static upload(e,t,n,i){for(let r=0,a=t.length;r!==a;++r){const a=t[r],o=n[a.id];!1!==o.needsUpdate&&a.setValue(e,o.value,i);}}static seqWithValue(e,t){const n=[];for(let i=0,r=e.length;i!==r;++i){const r=e[i];r.id in t&&n.push(r);}return n}}function vr(e,t,n){const i=e.createShader(t);return e.shaderSource(i,n),e.compileShader(i),i}const Er=37297;let Sr=0;const Tr=new Gs;function Mr(e,t,n){const i=e.getShaderParameter(t,e.COMPILE_STATUS),r=e.getShaderInfoLog(t).trim();if(i&&""===r)return "";const a=/ERROR: 0:(\d+)/.exec(r);if(a){const i=parseInt(a[1]);return n.toUpperCase()+"\n\n"+r+"\n\n"+function(e,t){const n=e.split("\n"),i=[],r=Math.max(t-6,0),a=Math.min(t+6,n.length);for(let e=r;e<a;e++){const r=e+1;i.push(`${r===t?">":" "} ${r}: ${n[e]}`);}return i.join("\n")}(e.getShaderSource(t),i)}return r}function xr(e,t){const n=function(e){ui$1._getMatrix(Tr,ui$1.workingColorSpace,e);const t=`mat3( ${Tr.elements.map((e=>e.toFixed(4)))} )`;switch(ui$1.getTransfer(e)){case Qe:return [t,"LinearTransferOETF"];case Ke:return [t,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",e),[t,"LinearTransferOETF"]}}(t);return [`vec4 ${e}( vec4 value ) {`,`\treturn ${n[1]}( vec4( value.rgb * ${n[0]}, value.a ) );`,"}"].join("\n")}function Rr(e,t){let n;switch(t){case Q$1:n="Linear";break;case K$1:n="Reinhard";break;case tt:n="Cineon";break;case et$1:n="ACESFilmic";break;case it:n="AgX";break;case rt:n="Neutral";break;case st:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),n="Linear";}return "vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}const Ar=new Ii$1;function br(){ui$1.getLuminanceCoefficients(Ar);return ["float luminance( const in vec3 rgb ) {",`\tconst vec3 weights = vec3( ${Ar.x.toFixed(4)}, ${Ar.y.toFixed(4)}, ${Ar.z.toFixed(4)} );`,"\treturn dot( weights, rgb );","}"].join("\n")}function Cr(e){return ""!==e}function Lr(e,t){const n=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,n).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function Pr(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const Ur=/^[ \t]*#include +<([\w\d./]+)>/gm;function wr(e){return e.replace(Ur,yr)}const Dr=new Map;function yr(e,t){let n=wn[t];if(void 0===n){const e=Dr.get(t);if(void 0===e)throw new Error("Can not resolve #include <"+t+">");n=wn[e],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,e);}return wr(n)}const Ir=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Nr(e){return e.replace(Ir,Or)}function Or(e,t,n,i){let r="";for(let e=parseInt(t);e<parseInt(n);e++)r+=i.replace(/\[\s*i\s*\]/g,"[ "+e+" ]").replace(/UNROLLED_LOOP_INDEX/g,e);return r}function Fr(e){let t=`precision ${e.precision} float;\n\tprecision ${e.precision} int;\n\tprecision ${e.precision} sampler2D;\n\tprecision ${e.precision} samplerCube;\n\tprecision ${e.precision} sampler3D;\n\tprecision ${e.precision} sampler2DArray;\n\tprecision ${e.precision} sampler2DShadow;\n\tprecision ${e.precision} samplerCubeShadow;\n\tprecision ${e.precision} sampler2DArrayShadow;\n\tprecision ${e.precision} isampler2D;\n\tprecision ${e.precision} isampler3D;\n\tprecision ${e.precision} isamplerCube;\n\tprecision ${e.precision} isampler2DArray;\n\tprecision ${e.precision} usampler2D;\n\tprecision ${e.precision} usampler3D;\n\tprecision ${e.precision} usamplerCube;\n\tprecision ${e.precision} usampler2DArray;\n\t`;return "highp"===e.precision?t+="\n#define HIGH_PRECISION":"mediump"===e.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(t+="\n#define LOW_PRECISION"),t}function Br(e,t,n,i){const r=e.getContext(),o=n.defines;let s=n.vertexShader,l=n.fragmentShader;const c=function(e){let t="SHADOWMAP_TYPE_BASIC";return e.shadowMapType===h$1?t="SHADOWMAP_TYPE_PCF":e.shadowMapType===l$1?t="SHADOWMAP_TYPE_PCF_SOFT":e.shadowMapType===c$1&&(t="SHADOWMAP_TYPE_VSM"),t}(n),d=function(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case ht:case lt:t="ENVMAP_TYPE_CUBE";break;case dt:t="ENVMAP_TYPE_CUBE_UV";}return t}(n),u=function(e){let t="ENVMAP_MODE_REFLECTION";e.envMap&&e.envMapMode===lt&&(t="ENVMAP_MODE_REFRACTION");return t}(n),f=function(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case Y:t="ENVMAP_BLENDING_MULTIPLY";break;case Z:t="ENVMAP_BLENDING_MIX";break;case G$1:t="ENVMAP_BLENDING_ADD";}return t}(n),p=function(e){const t=e.envMapCubeUVHeight;if(null===t)return null;const n=Math.log2(t)-2,i=1/t;return {texelWidth:1/(3*Math.max(Math.pow(2,n),112)),texelHeight:i,maxMip:n}}(n),m=function(e){return [e.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",e.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(Cr).join("\n")}(n),h=function(e){const t=[];for(const n in e){const i=e[n];!1!==i&&t.push("#define "+n+" "+i);}return t.join("\n")}(o),_=r.createProgram();let g,v,E=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(g=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,h].filter(Cr).join("\n"),g.length>0&&(g+="\n"),v=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,h].filter(Cr).join("\n"),v.length>0&&(v+="\n")):(g=[Fr(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,h,n.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",n.batching?"#define USE_BATCHING":"",n.batchingColor?"#define USE_BATCHING_COLOR":"",n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.instancingMorph?"#define USE_INSTANCING_MORPH":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+u:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.displacementMap?"#define USE_DISPLACEMENTMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.mapUv?"#define MAP_UV "+n.mapUv:"",n.alphaMapUv?"#define ALPHAMAP_UV "+n.alphaMapUv:"",n.lightMapUv?"#define LIGHTMAP_UV "+n.lightMapUv:"",n.aoMapUv?"#define AOMAP_UV "+n.aoMapUv:"",n.emissiveMapUv?"#define EMISSIVEMAP_UV "+n.emissiveMapUv:"",n.bumpMapUv?"#define BUMPMAP_UV "+n.bumpMapUv:"",n.normalMapUv?"#define NORMALMAP_UV "+n.normalMapUv:"",n.displacementMapUv?"#define DISPLACEMENTMAP_UV "+n.displacementMapUv:"",n.metalnessMapUv?"#define METALNESSMAP_UV "+n.metalnessMapUv:"",n.roughnessMapUv?"#define ROUGHNESSMAP_UV "+n.roughnessMapUv:"",n.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+n.anisotropyMapUv:"",n.clearcoatMapUv?"#define CLEARCOATMAP_UV "+n.clearcoatMapUv:"",n.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+n.clearcoatNormalMapUv:"",n.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+n.clearcoatRoughnessMapUv:"",n.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+n.iridescenceMapUv:"",n.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+n.iridescenceThicknessMapUv:"",n.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+n.sheenColorMapUv:"",n.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+n.sheenRoughnessMapUv:"",n.specularMapUv?"#define SPECULARMAP_UV "+n.specularMapUv:"",n.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+n.specularColorMapUv:"",n.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+n.specularIntensityMapUv:"",n.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+n.transmissionMapUv:"",n.thicknessMapUv?"#define THICKNESSMAP_UV "+n.thicknessMapUv:"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.morphColors?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+c:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","\tuniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","\tattribute vec2 uv1;","#endif","#ifdef USE_UV2","\tattribute vec2 uv2;","#endif","#ifdef USE_UV3","\tattribute vec2 uv3;","#endif","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Cr).join("\n"),v=[Fr(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,h,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+d:"",n.envMap?"#define "+u:"",n.envMap?"#define "+f:"",p?"#define CUBEUV_TEXEL_WIDTH "+p.texelWidth:"",p?"#define CUBEUV_TEXEL_HEIGHT "+p.texelHeight:"",p?"#define CUBEUV_MAX_MIP "+p.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.dispersion?"#define USE_DISPERSION":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor||n.batchingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+c:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==$?"#define TONE_MAPPING":"",n.toneMapping!==$?wn.tonemapping_pars_fragment:"",n.toneMapping!==$?Rr("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",wn.colorspace_pars_fragment,xr("linearToOutputTexel",n.outputColorSpace),br(),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(Cr).join("\n")),s=wr(s),s=Lr(s,n),s=Pr(s,n),l=wr(l),l=Lr(l,n),l=Pr(l,n),s=Nr(s),l=Nr(l),!0!==n.isRawShaderMaterial&&(E="#version 300 es\n",g=[m,"#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+g,v=["#define varying in",n.glslVersion===Ps?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===Ps?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+v);const S=E+g+s,T=E+v+l,M=vr(r,r.VERTEX_SHADER,S),x=vr(r,r.FRAGMENT_SHADER,T);function R(t){if(e.debug.checkShaderErrors){const n=r.getProgramInfoLog(_).trim(),i=r.getShaderInfoLog(M).trim(),a=r.getShaderInfoLog(x).trim();let o=!0,s=!0;if(!1===r.getProgramParameter(_,r.LINK_STATUS))if(o=!1,"function"==typeof e.debug.onShaderError)e.debug.onShaderError(r,_,M,x);else {const e=Mr(r,M,"vertex"),i=Mr(r,x,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(_,r.VALIDATE_STATUS)+"\n\nMaterial Name: "+t.name+"\nMaterial Type: "+t.type+"\n\nProgram Info Log: "+n+"\n"+e+"\n"+i);}else ""!==n?console.warn("THREE.WebGLProgram: Program Info Log:",n):""!==i&&""!==a||(s=!1);s&&(t.diagnostics={runnable:o,programLog:n,vertexShader:{log:i,prefix:g},fragmentShader:{log:a,prefix:v}});}r.deleteShader(M),r.deleteShader(x),A=new gr(r,_),b=function(e,t){const n={},i=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES);for(let r=0;r<i;r++){const i=e.getActiveAttrib(t,r),a=i.name;let o=1;i.type===e.FLOAT_MAT2&&(o=2),i.type===e.FLOAT_MAT3&&(o=3),i.type===e.FLOAT_MAT4&&(o=4),n[a]={type:i.type,location:e.getAttribLocation(t,a),locationSize:o};}return n}(r,_);}let A,b;r.attachShader(_,M),r.attachShader(_,x),void 0!==n.index0AttributeName?r.bindAttribLocation(_,0,n.index0AttributeName):!0===n.morphTargets&&r.bindAttribLocation(_,0,"position"),r.linkProgram(_),this.getUniforms=function(){return void 0===A&&R(this),A},this.getAttributes=function(){return void 0===b&&R(this),b};let P=!1===n.rendererExtensionParallelShaderCompile;return this.isReady=function(){return !1===P&&(P=r.getProgramParameter(_,Er)),P},this.destroy=function(){i.releaseStatesOfProgram(this),r.deleteProgram(_),this.program=void 0;},this.type=n.shaderType,this.name=n.shaderName,this.id=Sr++,this.cacheKey=t,this.usedTimes=1,this.program=_,this.vertexShader=M,this.fragmentShader=x,this}let Hr=0;class Gr{constructor(){this.shaderCache=new Map,this.materialCache=new Map;}update(e){const t=e.vertexShader,n=e.fragmentShader,i=this._getShaderStage(t),r=this._getShaderStage(n),a=this._getShaderCacheForMaterial(e);return !1===a.has(i)&&(a.add(i),i.usedTimes++),!1===a.has(r)&&(a.add(r),r.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const e of t)e.usedTimes--,0===e.usedTimes&&this.shaderCache.delete(e.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear();}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return void 0===n&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return void 0===n&&(n=new Vr(e),t.set(e,n)),n}}class Vr{constructor(e){this.id=Hr++,this.code=e,this.usedTimes=0;}}function zr(e,t,n,i,r,o,s){const l=new fr$1,c=new Gr,p=new Set,m=[],h=r.logarithmicDepthBuffer,_=r.vertexTextures;let g=r.precision;const v={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function E(e){return p.add(e),0===e?"uv":`uv${e}`}return {getParameters:function(o,l,m,S,T){const M=S.fog,x=T.geometry,R=o.isMeshStandardMaterial?S.environment:null,A=(o.isMeshStandardMaterial?n:t).get(o.envMap||R),b=A&&A.mapping===dt?A.image.height:null,C=v[o.type];null!==o.precision&&(g=r.getMaxPrecision(o.precision),g!==o.precision&&console.warn("THREE.WebGLProgram.getParameters:",o.precision,"not supported, using",g,"instead."));const L=x.morphAttributes.position||x.morphAttributes.normal||x.morphAttributes.color,P=void 0!==L?L.length:0;let w,D,y,I,N=0;if(void 0!==x.morphAttributes.position&&(N=1),void 0!==x.morphAttributes.normal&&(N=2),void 0!==x.morphAttributes.color&&(N=3),C){const e=yn[C];w=e.vertexShader,D=e.fragmentShader;}else w=o.vertexShader,D=o.fragmentShader,c.update(o),y=c.getVertexShaderID(o),I=c.getFragmentShaderID(o);const O=e.getRenderTarget(),F=e.state.buffers.depth.getReversed(),H=!0===T.isInstancedMesh,G=!0===T.isBatchedMesh,V=!!o.map,z=!!o.matcap,k=!!A,W=!!o.aoMap,X=!!o.lightMap,Y=!!o.bumpMap,j=!!o.normalMap,K=!!o.displacementMap,q=!!o.emissiveMap,Z=!!o.metalnessMap,$$1=!!o.roughnessMap,Q=o.anisotropy>0,J=o.clearcoat>0,ee=o.dispersion>0,te=o.iridescence>0,ne=o.sheen>0,ie=o.transmission>0,re=Q&&!!o.anisotropyMap,ae=J&&!!o.clearcoatMap,oe=J&&!!o.clearcoatNormalMap,se=J&&!!o.clearcoatRoughnessMap,le=te&&!!o.iridescenceMap,ce=te&&!!o.iridescenceThicknessMap,de=ne&&!!o.sheenColorMap,he=ne&&!!o.sheenRoughnessMap,_e=!!o.specularMap,ge=!!o.specularColorMap,ve=!!o.specularIntensityMap,Ee=ie&&!!o.transmissionMap,Se=ie&&!!o.thicknessMap,Te=!!o.gradientMap,Me=!!o.alphaMap,xe=o.alphaTest>0,Re=!!o.alphaHash,Ae=!!o.extensions;let be=$;o.toneMapped&&(null!==O&&!0!==O.isXRRenderTarget||(be=e.toneMapping));const Ce={shaderID:C,shaderType:o.type,shaderName:o.name,vertexShader:w,fragmentShader:D,defines:o.defines,customVertexShaderID:y,customFragmentShaderID:I,isRawShaderMaterial:!0===o.isRawShaderMaterial,glslVersion:o.glslVersion,precision:g,batching:G,batchingColor:G&&null!==T._colorsTexture,instancing:H,instancingColor:H&&null!==T.instanceColor,instancingMorph:H&&null!==T.morphTexture,supportsVertexTextures:_,outputColorSpace:null===O?e.outputColorSpace:!0===O.isXRRenderTarget?O.texture.colorSpace:$e,alphaToCoverage:!!o.alphaToCoverage,map:V,matcap:z,envMap:k,envMapMode:k&&A.mapping,envMapCubeUVHeight:b,aoMap:W,lightMap:X,bumpMap:Y,normalMap:j,displacementMap:_&&K,emissiveMap:q,normalMapObjectSpace:j&&o.normalMapType===Ye,normalMapTangentSpace:j&&o.normalMapType===Xe,metalnessMap:Z,roughnessMap:$$1,anisotropy:Q,anisotropyMap:re,clearcoat:J,clearcoatMap:ae,clearcoatNormalMap:oe,clearcoatRoughnessMap:se,dispersion:ee,iridescence:te,iridescenceMap:le,iridescenceThicknessMap:ce,sheen:ne,sheenColorMap:de,sheenRoughnessMap:he,specularMap:_e,specularColorMap:ge,specularIntensityMap:ve,transmission:ie,transmissionMap:Ee,thicknessMap:Se,gradientMap:Te,opaque:!1===o.transparent&&o.blending===y$1&&!1===o.alphaToCoverage,alphaMap:Me,alphaTest:xe,alphaHash:Re,combine:o.combine,mapUv:V&&E(o.map.channel),aoMapUv:W&&E(o.aoMap.channel),lightMapUv:X&&E(o.lightMap.channel),bumpMapUv:Y&&E(o.bumpMap.channel),normalMapUv:j&&E(o.normalMap.channel),displacementMapUv:K&&E(o.displacementMap.channel),emissiveMapUv:q&&E(o.emissiveMap.channel),metalnessMapUv:Z&&E(o.metalnessMap.channel),roughnessMapUv:$$1&&E(o.roughnessMap.channel),anisotropyMapUv:re&&E(o.anisotropyMap.channel),clearcoatMapUv:ae&&E(o.clearcoatMap.channel),clearcoatNormalMapUv:oe&&E(o.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:se&&E(o.clearcoatRoughnessMap.channel),iridescenceMapUv:le&&E(o.iridescenceMap.channel),iridescenceThicknessMapUv:ce&&E(o.iridescenceThicknessMap.channel),sheenColorMapUv:de&&E(o.sheenColorMap.channel),sheenRoughnessMapUv:he&&E(o.sheenRoughnessMap.channel),specularMapUv:_e&&E(o.specularMap.channel),specularColorMapUv:ge&&E(o.specularColorMap.channel),specularIntensityMapUv:ve&&E(o.specularIntensityMap.channel),transmissionMapUv:Ee&&E(o.transmissionMap.channel),thicknessMapUv:Se&&E(o.thicknessMap.channel),alphaMapUv:Me&&E(o.alphaMap.channel),vertexTangents:!!x.attributes.tangent&&(j||Q),vertexColors:o.vertexColors,vertexAlphas:!0===o.vertexColors&&!!x.attributes.color&&4===x.attributes.color.itemSize,pointsUvs:!0===T.isPoints&&!!x.attributes.uv&&(V||Me),fog:!!M,useFog:!0===o.fog,fogExp2:!!M&&M.isFogExp2,flatShading:!0===o.flatShading,sizeAttenuation:!0===o.sizeAttenuation,logarithmicDepthBuffer:h,reverseDepthBuffer:F,skinning:!0===T.isSkinnedMesh,morphTargets:void 0!==x.morphAttributes.position,morphNormals:void 0!==x.morphAttributes.normal,morphColors:void 0!==x.morphAttributes.color,morphTargetsCount:P,morphTextureStride:N,numDirLights:l.directional.length,numPointLights:l.point.length,numSpotLights:l.spot.length,numSpotLightMaps:l.spotLightMap.length,numRectAreaLights:l.rectArea.length,numHemiLights:l.hemi.length,numDirLightShadows:l.directionalShadowMap.length,numPointLightShadows:l.pointShadowMap.length,numSpotLightShadows:l.spotShadowMap.length,numSpotLightShadowsWithMaps:l.numSpotLightShadowsWithMaps,numLightProbes:l.numLightProbes,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:o.dithering,shadowMapEnabled:e.shadowMap.enabled&&m.length>0,shadowMapType:e.shadowMap.type,toneMapping:be,decodeVideoTexture:V&&!0===o.map.isVideoTexture&&ui$1.getTransfer(o.map.colorSpace)===Ke,decodeVideoTextureEmissive:q&&!0===o.emissiveMap.isVideoTexture&&ui$1.getTransfer(o.emissiveMap.colorSpace)===Ke,premultipliedAlpha:o.premultipliedAlpha,doubleSided:o.side===p$1,flipSided:o.side===d$1,useDepthPacking:o.depthPacking>=0,depthPacking:o.depthPacking||0,index0AttributeName:o.index0AttributeName,extensionClipCullDistance:Ae&&!0===o.extensions.clipCullDistance&&i.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(Ae&&!0===o.extensions.multiDraw||G)&&i.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:i.has("KHR_parallel_shader_compile"),customProgramCacheKey:o.customProgramCacheKey()};return Ce.vertexUv1s=p.has(1),Ce.vertexUv2s=p.has(2),Ce.vertexUv3s=p.has(3),p.clear(),Ce},getProgramCacheKey:function(t){const n=[];if(t.shaderID?n.push(t.shaderID):(n.push(t.customVertexShaderID),n.push(t.customFragmentShaderID)),void 0!==t.defines)for(const e in t.defines)n.push(e),n.push(t.defines[e]);return !1===t.isRawShaderMaterial&&(!function(e,t){e.push(t.precision),e.push(t.outputColorSpace),e.push(t.envMapMode),e.push(t.envMapCubeUVHeight),e.push(t.mapUv),e.push(t.alphaMapUv),e.push(t.lightMapUv),e.push(t.aoMapUv),e.push(t.bumpMapUv),e.push(t.normalMapUv),e.push(t.displacementMapUv),e.push(t.emissiveMapUv),e.push(t.metalnessMapUv),e.push(t.roughnessMapUv),e.push(t.anisotropyMapUv),e.push(t.clearcoatMapUv),e.push(t.clearcoatNormalMapUv),e.push(t.clearcoatRoughnessMapUv),e.push(t.iridescenceMapUv),e.push(t.iridescenceThicknessMapUv),e.push(t.sheenColorMapUv),e.push(t.sheenRoughnessMapUv),e.push(t.specularMapUv),e.push(t.specularColorMapUv),e.push(t.specularIntensityMapUv),e.push(t.transmissionMapUv),e.push(t.thicknessMapUv),e.push(t.combine),e.push(t.fogExp2),e.push(t.sizeAttenuation),e.push(t.morphTargetsCount),e.push(t.morphAttributeCount),e.push(t.numDirLights),e.push(t.numPointLights),e.push(t.numSpotLights),e.push(t.numSpotLightMaps),e.push(t.numHemiLights),e.push(t.numRectAreaLights),e.push(t.numDirLightShadows),e.push(t.numPointLightShadows),e.push(t.numSpotLightShadows),e.push(t.numSpotLightShadowsWithMaps),e.push(t.numLightProbes),e.push(t.shadowMapType),e.push(t.toneMapping),e.push(t.numClippingPlanes),e.push(t.numClipIntersection),e.push(t.depthPacking);}(n,t),function(e,t){l.disableAll(),t.supportsVertexTextures&&l.enable(0);t.instancing&&l.enable(1);t.instancingColor&&l.enable(2);t.instancingMorph&&l.enable(3);t.matcap&&l.enable(4);t.envMap&&l.enable(5);t.normalMapObjectSpace&&l.enable(6);t.normalMapTangentSpace&&l.enable(7);t.clearcoat&&l.enable(8);t.iridescence&&l.enable(9);t.alphaTest&&l.enable(10);t.vertexColors&&l.enable(11);t.vertexAlphas&&l.enable(12);t.vertexUv1s&&l.enable(13);t.vertexUv2s&&l.enable(14);t.vertexUv3s&&l.enable(15);t.vertexTangents&&l.enable(16);t.anisotropy&&l.enable(17);t.alphaHash&&l.enable(18);t.batching&&l.enable(19);t.dispersion&&l.enable(20);t.batchingColor&&l.enable(21);e.push(l.mask),l.disableAll(),t.fog&&l.enable(0);t.useFog&&l.enable(1);t.flatShading&&l.enable(2);t.logarithmicDepthBuffer&&l.enable(3);t.reverseDepthBuffer&&l.enable(4);t.skinning&&l.enable(5);t.morphTargets&&l.enable(6);t.morphNormals&&l.enable(7);t.morphColors&&l.enable(8);t.premultipliedAlpha&&l.enable(9);t.shadowMapEnabled&&l.enable(10);t.doubleSided&&l.enable(11);t.flipSided&&l.enable(12);t.useDepthPacking&&l.enable(13);t.dithering&&l.enable(14);t.transmission&&l.enable(15);t.sheen&&l.enable(16);t.opaque&&l.enable(17);t.pointsUvs&&l.enable(18);t.decodeVideoTexture&&l.enable(19);t.decodeVideoTextureEmissive&&l.enable(20);t.alphaToCoverage&&l.enable(21);e.push(l.mask);}(n,t),n.push(e.outputColorSpace)),n.push(t.customProgramCacheKey),n.join()},getUniforms:function(e){const t=v[e.type];let n;if(t){const e=yn[t];n=qn$1.clone(e.uniforms);}else n=e.uniforms;return n},acquireProgram:function(t,n){let i;for(let e=0,t=m.length;e<t;e++){const t=m[e];if(t.cacheKey===n){i=t,++i.usedTimes;break}}return void 0===i&&(i=new Br(e,n,t,o),m.push(i)),i},releaseProgram:function(e){if(0==--e.usedTimes){const t=m.indexOf(e);m[t]=m[m.length-1],m.pop(),e.destroy();}},releaseShaderCache:function(e){c.remove(e);},programs:m,dispose:function(){c.dispose();}}}function kr(){let e=new WeakMap;return {has:function(t){return e.has(t)},get:function(t){let n=e.get(t);return void 0===n&&(n={},e.set(t,n)),n},remove:function(t){e.delete(t);},update:function(t,n,i){e.get(t)[n]=i;},dispose:function(){e=new WeakMap;}}}function Wr(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function Xr(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Yr(){const e=[];let t=0;const n=[],i=[],r=[];function a(n,i,r,a,o,s){let l=e[t];return void 0===l?(l={id:n.id,object:n,geometry:i,material:r,groupOrder:a,renderOrder:n.renderOrder,z:o,group:s},e[t]=l):(l.id=n.id,l.object=n,l.geometry=i,l.material=r,l.groupOrder=a,l.renderOrder=n.renderOrder,l.z=o,l.group=s),t++,l}return {opaque:n,transmissive:i,transparent:r,init:function(){t=0,n.length=0,i.length=0,r.length=0;},push:function(e,t,o,s,l,c){const d=a(e,t,o,s,l,c);o.transmission>0?i.push(d):!0===o.transparent?r.push(d):n.push(d);},unshift:function(e,t,o,s,l,c){const d=a(e,t,o,s,l,c);o.transmission>0?i.unshift(d):!0===o.transparent?r.unshift(d):n.unshift(d);},finish:function(){for(let n=t,i=e.length;n<i;n++){const t=e[n];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.group=null;}},sort:function(e,t){n.length>1&&n.sort(e||Wr),i.length>1&&i.sort(t||Xr),r.length>1&&r.sort(t||Xr);}}}function jr(){let e=new WeakMap;return {get:function(t,n){const i=e.get(t);let r;return void 0===i?(r=new Yr,e.set(t,[r])):n>=i.length?(r=new Yr,i.push(r)):r=i[n],r},dispose:function(){e=new WeakMap;}}}function Kr(){const t={};return {get:function(n){if(void 0!==t[n.id])return t[n.id];let i;switch(n.type){case"DirectionalLight":i={direction:new Ii$1,color:new $r$1};break;case"SpotLight":i={position:new Ii$1,direction:new Ii$1,color:new $r$1,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":i={position:new Ii$1,color:new $r$1,distance:0,decay:0};break;case"HemisphereLight":i={direction:new Ii$1,skyColor:new $r$1,groundColor:new $r$1};break;case"RectAreaLight":i={color:new $r$1,position:new Ii$1,halfWidth:new Ii$1,halfHeight:new Ii$1};}return t[n.id]=i,i}}}let qr=0;function Zr(e,t){return (t.castShadow?2:0)-(e.castShadow?2:0)+(t.map?1:0)-(e.map?1:0)}function $r(e){const t=new Kr,i=function(){const e={};return {get:function(t){if(void 0!==e[t.id])return e[t.id];let i;switch(t.type){case"DirectionalLight":case"SpotLight":i={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Zs};break;case"PointLight":i={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Zs,shadowCameraNear:1,shadowCameraFar:1e3};}return e[t.id]=i,i}}}(),a={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let e=0;e<9;e++)a.probe.push(new Ii$1);const o=new Ii$1,s=new nr$1,l=new nr$1;return {setup:function(n){let r=0,o=0,s=0;for(let e=0;e<9;e++)a.probe[e].set(0,0,0);let l=0,c=0,d=0,u=0,f=0,p=0,m=0,h=0,_=0,g=0,v=0;n.sort(Zr);for(let e=0,E=n.length;e<E;e++){const E=n[e],S=E.color,T=E.intensity,M=E.distance,x=E.shadow&&E.shadow.map?E.shadow.map.texture:null;if(E.isAmbientLight)r+=S.r*T,o+=S.g*T,s+=S.b*T;else if(E.isLightProbe){for(let e=0;e<9;e++)a.probe[e].addScaledVector(E.sh.coefficients[e],T);v++;}else if(E.isDirectionalLight){const e=t.get(E);if(e.color.copy(E.color).multiplyScalar(E.intensity),E.castShadow){const e=E.shadow,t=i.get(E);t.shadowIntensity=e.intensity,t.shadowBias=e.bias,t.shadowNormalBias=e.normalBias,t.shadowRadius=e.radius,t.shadowMapSize=e.mapSize,a.directionalShadow[l]=t,a.directionalShadowMap[l]=x,a.directionalShadowMatrix[l]=E.shadow.matrix,p++;}a.directional[l]=e,l++;}else if(E.isSpotLight){const e=t.get(E);e.position.setFromMatrixPosition(E.matrixWorld),e.color.copy(S).multiplyScalar(T),e.distance=M,e.coneCos=Math.cos(E.angle),e.penumbraCos=Math.cos(E.angle*(1-E.penumbra)),e.decay=E.decay,a.spot[d]=e;const n=E.shadow;if(E.map&&(a.spotLightMap[_]=E.map,_++,n.updateMatrices(E),E.castShadow&&g++),a.spotLightMatrix[d]=n.matrix,E.castShadow){const e=i.get(E);e.shadowIntensity=n.intensity,e.shadowBias=n.bias,e.shadowNormalBias=n.normalBias,e.shadowRadius=n.radius,e.shadowMapSize=n.mapSize,a.spotShadow[d]=e,a.spotShadowMap[d]=x,h++;}d++;}else if(E.isRectAreaLight){const e=t.get(E);e.color.copy(S).multiplyScalar(T),e.halfWidth.set(.5*E.width,0,0),e.halfHeight.set(0,.5*E.height,0),a.rectArea[u]=e,u++;}else if(E.isPointLight){const e=t.get(E);if(e.color.copy(E.color).multiplyScalar(E.intensity),e.distance=E.distance,e.decay=E.decay,E.castShadow){const e=E.shadow,t=i.get(E);t.shadowIntensity=e.intensity,t.shadowBias=e.bias,t.shadowNormalBias=e.normalBias,t.shadowRadius=e.radius,t.shadowMapSize=e.mapSize,t.shadowCameraNear=e.camera.near,t.shadowCameraFar=e.camera.far,a.pointShadow[c]=t,a.pointShadowMap[c]=x,a.pointShadowMatrix[c]=E.shadow.matrix,m++;}a.point[c]=e,c++;}else if(E.isHemisphereLight){const e=t.get(E);e.skyColor.copy(E.color).multiplyScalar(T),e.groundColor.copy(E.groundColor).multiplyScalar(T),a.hemi[f]=e,f++;}}u>0&&(!0===e.has("OES_texture_float_linear")?(a.rectAreaLTC1=Dn.LTC_FLOAT_1,a.rectAreaLTC2=Dn.LTC_FLOAT_2):(a.rectAreaLTC1=Dn.LTC_HALF_1,a.rectAreaLTC2=Dn.LTC_HALF_2)),a.ambient[0]=r,a.ambient[1]=o,a.ambient[2]=s;const E=a.hash;E.directionalLength===l&&E.pointLength===c&&E.spotLength===d&&E.rectAreaLength===u&&E.hemiLength===f&&E.numDirectionalShadows===p&&E.numPointShadows===m&&E.numSpotShadows===h&&E.numSpotMaps===_&&E.numLightProbes===v||(a.directional.length=l,a.spot.length=d,a.rectArea.length=u,a.point.length=c,a.hemi.length=f,a.directionalShadow.length=p,a.directionalShadowMap.length=p,a.pointShadow.length=m,a.pointShadowMap.length=m,a.spotShadow.length=h,a.spotShadowMap.length=h,a.directionalShadowMatrix.length=p,a.pointShadowMatrix.length=m,a.spotLightMatrix.length=h+_-g,a.spotLightMap.length=_,a.numSpotLightShadowsWithMaps=g,a.numLightProbes=v,E.directionalLength=l,E.pointLength=c,E.spotLength=d,E.rectAreaLength=u,E.hemiLength=f,E.numDirectionalShadows=p,E.numPointShadows=m,E.numSpotShadows=h,E.numSpotMaps=_,E.numLightProbes=v,a.version=qr++);},setupView:function(e,t){let n=0,i=0,r=0,c=0,d=0;const u=t.matrixWorldInverse;for(let t=0,f=e.length;t<f;t++){const f=e[t];if(f.isDirectionalLight){const e=a.directional[n];e.direction.setFromMatrixPosition(f.matrixWorld),o.setFromMatrixPosition(f.target.matrixWorld),e.direction.sub(o),e.direction.transformDirection(u),n++;}else if(f.isSpotLight){const e=a.spot[r];e.position.setFromMatrixPosition(f.matrixWorld),e.position.applyMatrix4(u),e.direction.setFromMatrixPosition(f.matrixWorld),o.setFromMatrixPosition(f.target.matrixWorld),e.direction.sub(o),e.direction.transformDirection(u),r++;}else if(f.isRectAreaLight){const e=a.rectArea[c];e.position.setFromMatrixPosition(f.matrixWorld),e.position.applyMatrix4(u),l.identity(),s.copy(f.matrixWorld),s.premultiply(u),l.extractRotation(s),e.halfWidth.set(.5*f.width,0,0),e.halfHeight.set(0,.5*f.height,0),e.halfWidth.applyMatrix4(l),e.halfHeight.applyMatrix4(l),c++;}else if(f.isPointLight){const e=a.point[i];e.position.setFromMatrixPosition(f.matrixWorld),e.position.applyMatrix4(u),i++;}else if(f.isHemisphereLight){const e=a.hemi[d];e.direction.setFromMatrixPosition(f.matrixWorld),e.direction.transformDirection(u),d++;}}},state:a}}function Qr(e){const t=new $r(e),n=[],i=[];const r={lightsArray:n,shadowsArray:i,camera:null,lights:t,transmissionRenderTarget:{}};return {init:function(e){r.camera=e,n.length=0,i.length=0;},state:r,setupLights:function(){t.setup(n);},setupLightsView:function(e){t.setupView(n,e);},pushLight:function(e){n.push(e);},pushShadow:function(e){i.push(e);}}}function Jr(e){let t=new WeakMap;return {get:function(n,i=0){const r=t.get(n);let a;return void 0===r?(a=new Qr(e),t.set(n,[a])):i>=r.length?(a=new Qr(e),r.push(a)):a=r[i],a},dispose:function(){t=new WeakMap;}}}function ea(e,t,i){let r=new ra$1;const a=new Zs,s=new Zs,c=new wi$1,u=new Bl({depthPacking:He}),f=new kl,p={},h=i.maxTextureSize,_={[u$1]:d$1,[d$1]:u$1,[p$1]:p$1},g=new Jn$1({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Zs},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),v=g.clone();v.defines.HORIZONTAL_PASS=1;const E=new zn$1;E.setAttribute("position",new cn(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const S=new Vn$1(E,g),T=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=h$1;let M=this.type;function x(n,i){const r=t.update(S);g.defines.VSM_SAMPLES!==n.blurSamples&&(g.defines.VSM_SAMPLES=n.blurSamples,v.defines.VSM_SAMPLES=n.blurSamples,g.needsUpdate=!0,v.needsUpdate=!0),null===n.mapPass&&(n.mapPass=new Si$1(a.x,a.y)),g.uniforms.shadow_pass.value=n.map.texture,g.uniforms.resolution.value=n.mapSize,g.uniforms.radius.value=n.radius,e.setRenderTarget(n.mapPass),e.clear(),e.renderBufferDirect(i,null,r,g,S,null),v.uniforms.shadow_pass.value=n.mapPass.texture,v.uniforms.resolution.value=n.mapSize,v.uniforms.radius.value=n.radius,e.setRenderTarget(n.map),e.clear(),e.renderBufferDirect(i,null,r,v,S,null);}function R(t,n,i,r){let a=null;const o=!0===i.isPointLight?t.customDistanceMaterial:t.customDepthMaterial;if(void 0!==o)a=o;else if(a=!0===i.isPointLight?f:u,e.localClippingEnabled&&!0===n.clipShadows&&Array.isArray(n.clippingPlanes)&&0!==n.clippingPlanes.length||n.displacementMap&&0!==n.displacementScale||n.alphaMap&&n.alphaTest>0||n.map&&n.alphaTest>0){const e=a.uuid,t=n.uuid;let i=p[e];void 0===i&&(i={},p[e]=i);let r=i[t];void 0===r&&(r=a.clone(),i[t]=r,n.addEventListener("dispose",b)),a=r;}if(a.visible=n.visible,a.wireframe=n.wireframe,a.side=r===c$1?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:_[n.side],a.alphaMap=n.alphaMap,a.alphaTest=n.alphaTest,a.map=n.map,a.clipShadows=n.clipShadows,a.clippingPlanes=n.clippingPlanes,a.clipIntersection=n.clipIntersection,a.displacementMap=n.displacementMap,a.displacementScale=n.displacementScale,a.displacementBias=n.displacementBias,a.wireframeLinewidth=n.wireframeLinewidth,a.linewidth=n.linewidth,!0===i.isPointLight&&!0===a.isMeshDistanceMaterial){e.properties.get(a).light=i;}return a}function A(n,i,a,o,s){if(!1===n.visible)return;if(n.layers.test(i.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&s===c$1)&&(!n.frustumCulled||r.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,n.matrixWorld);const r=t.update(n),l=n.material;if(Array.isArray(l)){const t=r.groups;for(let c=0,d=t.length;c<d;c++){const d=t[c],u=l[d.materialIndex];if(u&&u.visible){const t=R(n,u,o,s);n.onBeforeShadow(e,n,i,a,r,t,d),e.renderBufferDirect(a,null,r,t,n,d),n.onAfterShadow(e,n,i,a,r,t,d);}}}else if(l.visible){const t=R(n,l,o,s);n.onBeforeShadow(e,n,i,a,r,t,null),e.renderBufferDirect(a,null,r,t,n,null),n.onAfterShadow(e,n,i,a,r,t,null);}}const l=n.children;for(let e=0,t=l.length;e<t;e++)A(l[e],i,a,o,s);}function b(e){e.target.removeEventListener("dispose",b);for(const t in p){const n=p[t],i=e.target.uuid;if(i in n){n[i].dispose(),delete n[i];}}}this.render=function(t,n,i){if(!1===T.enabled)return;if(!1===T.autoUpdate&&!1===T.needsUpdate)return;if(0===t.length)return;const o=e.getRenderTarget(),l=e.getActiveCubeFace(),d=e.getActiveMipmapLevel(),u=e.state;u.setBlending(m$1),u.buffers.color.setClear(1,1,1,1),u.buffers.depth.setTest(!0),u.setScissorTest(!1);const f=M!==c$1&&this.type===c$1,p=M===c$1&&this.type!==c$1;for(let o=0,l=t.length;o<l;o++){const l=t[o],d=l.shadow;if(void 0===d){console.warn("THREE.WebGLShadowMap:",l,"has no shadow.");continue}if(!1===d.autoUpdate&&!1===d.needsUpdate)continue;a.copy(d.mapSize);const m=d.getFrameExtents();if(a.multiply(m),s.copy(d.mapSize),(a.x>h||a.y>h)&&(a.x>h&&(s.x=Math.floor(h/m.x),a.x=s.x*m.x,d.mapSize.x=s.x),a.y>h&&(s.y=Math.floor(h/m.y),a.y=s.y*m.y,d.mapSize.y=s.y)),null===d.map||!0===f||!0===p){const e=this.type!==c$1?{minFilter:ft,magFilter:ft}:{};null!==d.map&&d.map.dispose(),d.map=new Si$1(a.x,a.y,e),d.map.texture.name=l.name+".shadowMap",d.camera.updateProjectionMatrix();}e.setRenderTarget(d.map),e.clear();const _=d.getViewportCount();for(let e=0;e<_;e++){const t=d.getViewport(e);c.set(s.x*t.x,s.y*t.y,s.x*t.z,s.y*t.w),u.viewport(c),d.updateMatrices(l,e),r=d.getFrustum(),A(n,i,d.camera,l,this.type);}!0!==d.isPointLightShadow&&this.type===c$1&&x(d,i),d.needsUpdate=!1;}M=this.type,T.needsUpdate=!1,e.setRenderTarget(o,l,d);};}const ta={[W$1]:U$1,[j$1]:J,[H$1]:X,[D$1]:q,[U$1]:W$1,[J]:j$1,[X]:H$1,[q]:D$1};function na(t,n$1){const i=new function(){let e=!1;const n=new wi$1;let i=null;const r=new wi$1(0,0,0,0);return {setMask:function(n){i===n||e||(t.colorMask(n,n,n,n),i=n);},setLocked:function(t){e=t;},setClear:function(e,i,a,o,s){!0===s&&(e*=o,i*=o,a*=o),n.set(e,i,a,o),!1===r.equals(n)&&(t.clearColor(e,i,a,o),r.copy(n));},reset:function(){e=!1,i=null,r.set(-1,0,0,0);}}},r$1=new function(){let e=!1,i=!1,r=null,a=null,o=null;return {setReversed:function(e){if(i!==e){const e=n$1.get("EXT_clip_control");i?e.clipControlEXT(e.LOWER_LEFT_EXT,e.ZERO_TO_ONE_EXT):e.clipControlEXT(e.LOWER_LEFT_EXT,e.NEGATIVE_ONE_TO_ONE_EXT);const t=o;o=null,this.setClear(t);}i=e;},getReversed:function(){return i},setTest:function(e){e?W(t.DEPTH_TEST):X$1(t.DEPTH_TEST);},setMask:function(n){r===n||e||(t.depthMask(n),r=n);},setFunc:function(e){if(i&&(e=ta[e]),a!==e){switch(e){case W$1:t.depthFunc(t.NEVER);break;case U$1:t.depthFunc(t.ALWAYS);break;case j$1:t.depthFunc(t.LESS);break;case D$1:t.depthFunc(t.LEQUAL);break;case H$1:t.depthFunc(t.EQUAL);break;case q:t.depthFunc(t.GEQUAL);break;case J:t.depthFunc(t.GREATER);break;case X:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL);}a=e;}},setLocked:function(t){e=t;},setClear:function(e){o!==e&&(i&&(e=1-e),t.clearDepth(e),o=e);},reset:function(){e=!1,r=null,a=null,o=null,i=!1;}}},a=new function(){let e=!1,n=null,i=null,r=null,a=null,o=null,s=null,l=null,c=null;return {setTest:function(n){e||(n?W(t.STENCIL_TEST):X$1(t.STENCIL_TEST));},setMask:function(i){n===i||e||(t.stencilMask(i),n=i);},setFunc:function(e,n,o){i===e&&r===n&&a===o||(t.stencilFunc(e,n,o),i=e,r=n,a=o);},setOp:function(e,n,i){o===e&&s===n&&l===i||(t.stencilOp(e,n,i),o=e,s=n,l=i);},setLocked:function(t){e=t;},setClear:function(e){c!==e&&(t.clearStencil(e),c=e);},reset:function(){e=!1,n=null,i=null,r=null,a=null,o=null,s=null,l=null,c=null;}}},o=new WeakMap,s=new WeakMap;let l={},c={},u=new WeakMap,f=[],p=null,m=!1,h=null,_=null,g=null,v=null,E=null,S=null,T=null,M=new $r$1(0,0,0),x=0,R=!1,A=null,b=null,C=null,L=null,P=null;const U=t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let w=!1,D=0;const y=t.getParameter(t.VERSION);-1!==y.indexOf("WebGL")?(D=parseFloat(/^WebGL (\d)/.exec(y)[1]),w=D>=1):-1!==y.indexOf("OpenGL ES")&&(D=parseFloat(/^OpenGL ES (\d)/.exec(y)[1]),w=D>=2);let I=null,O={};const F=t.getParameter(t.SCISSOR_BOX),B=t.getParameter(t.VIEWPORT),H=(new wi$1).fromArray(F),G=(new wi$1).fromArray(B);function V(e,n,i,r){const a=new Uint8Array(4),o=t.createTexture();t.bindTexture(e,o),t.texParameteri(e,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(e,t.TEXTURE_MAG_FILTER,t.NEAREST);for(let o=0;o<i;o++)e===t.TEXTURE_3D||e===t.TEXTURE_2D_ARRAY?t.texImage3D(n,0,t.RGBA,1,1,r,0,t.RGBA,t.UNSIGNED_BYTE,a):t.texImage2D(n+o,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,a);return o}const z={};function W(e){!0!==l[e]&&(t.enable(e),l[e]=!0);}function X$1(e){!1!==l[e]&&(t.disable(e),l[e]=!1);}z[t.TEXTURE_2D]=V(t.TEXTURE_2D,t.TEXTURE_2D,1),z[t.TEXTURE_CUBE_MAP]=V(t.TEXTURE_CUBE_MAP,t.TEXTURE_CUBE_MAP_POSITIVE_X,6),z[t.TEXTURE_2D_ARRAY]=V(t.TEXTURE_2D_ARRAY,t.TEXTURE_2D_ARRAY,1,1),z[t.TEXTURE_3D]=V(t.TEXTURE_3D,t.TEXTURE_3D,1,1),i.setClear(0,0,0,1),r$1.setClear(1),a.setClear(0),W(t.DEPTH_TEST),r$1.setFunc(D$1),q$1(!1),Z(r),W(t.CULL_FACE),K(m$1);const Y={[v$1]:t.FUNC_ADD,[w$1]:t.FUNC_SUBTRACT,[M$1]:t.FUNC_REVERSE_SUBTRACT};Y[S$1]=t.MIN,Y[_$1]=t.MAX;const j={[A$1]:t.ZERO,[T$1]:t.ONE,[z$1]:t.SRC_COLOR,[I$1]:t.SRC_ALPHA,[O$1]:t.SRC_ALPHA_SATURATE,[R$1]:t.DST_COLOR,[k$1]:t.DST_ALPHA,[C$1]:t.ONE_MINUS_SRC_COLOR,[B$1]:t.ONE_MINUS_SRC_ALPHA,[P$1]:t.ONE_MINUS_DST_COLOR,[E$1]:t.ONE_MINUS_DST_ALPHA,[F$1]:t.CONSTANT_COLOR,[N$1]:t.ONE_MINUS_CONSTANT_COLOR,[L$1]:t.CONSTANT_ALPHA,[V$1]:t.ONE_MINUS_CONSTANT_ALPHA};function K(e,n,i,r,a,o,s,l,c,d){if(e!==m$1){if(!1===m&&(W(t.BLEND),m=!0),e===b$1)a=a||n,o=o||i,s=s||r,n===_&&a===E||(t.blendEquationSeparate(Y[n],Y[a]),_=n,E=a),i===g&&r===v&&o===S&&s===T||(t.blendFuncSeparate(j[i],j[r],j[o],j[s]),g=i,v=r,S=o,T=s),!1!==l.equals(M)&&c===x||(t.blendColor(l.r,l.g,l.b,c),M.copy(l),x=c),h=e,R=!1;else if(e!==h||d!==R){if(_===v$1&&E===v$1||(t.blendEquation(t.FUNC_ADD),_=v$1,E=v$1),d)switch(e){case y$1:t.blendFuncSeparate(t.ONE,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA);break;case f$1:t.blendFunc(t.ONE,t.ONE);break;case g$1:t.blendFuncSeparate(t.ZERO,t.ONE_MINUS_SRC_COLOR,t.ZERO,t.ONE);break;case x$2:t.blendFuncSeparate(t.ZERO,t.SRC_COLOR,t.ZERO,t.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",e);}else switch(e){case y$1:t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA);break;case f$1:t.blendFunc(t.SRC_ALPHA,t.ONE);break;case g$1:t.blendFuncSeparate(t.ZERO,t.ONE_MINUS_SRC_COLOR,t.ZERO,t.ONE);break;case x$2:t.blendFunc(t.ZERO,t.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",e);}g=null,v=null,S=null,T=null,M.set(0,0,0),x=0,h=e,R=d;}}else !0===m&&(X$1(t.BLEND),m=!1);}function q$1(e){A!==e&&(e?t.frontFace(t.CW):t.frontFace(t.CCW),A=e);}function Z(e){e!==i$1?(W(t.CULL_FACE),e!==b&&(e===r?t.cullFace(t.BACK):e===n?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):X$1(t.CULL_FACE),b=e;}function $(e,n,i){e?(W(t.POLYGON_OFFSET_FILL),L===n&&P===i||(t.polygonOffset(n,i),L=n,P=i)):X$1(t.POLYGON_OFFSET_FILL);}return {buffers:{color:i,depth:r$1,stencil:a},enable:W,disable:X$1,bindFramebuffer:function(e,n){return c[e]!==n&&(t.bindFramebuffer(e,n),c[e]=n,e===t.DRAW_FRAMEBUFFER&&(c[t.FRAMEBUFFER]=n),e===t.FRAMEBUFFER&&(c[t.DRAW_FRAMEBUFFER]=n),!0)},drawBuffers:function(e,n){let i=f,r=!1;if(e){i=u.get(n),void 0===i&&(i=[],u.set(n,i));const a=e.textures;if(i.length!==a.length||i[0]!==t.COLOR_ATTACHMENT0){for(let e=0,n=a.length;e<n;e++)i[e]=t.COLOR_ATTACHMENT0+e;i.length=a.length,r=!0;}}else i[0]!==t.BACK&&(i[0]=t.BACK,r=!0);r&&t.drawBuffers(i);},useProgram:function(e){return p!==e&&(t.useProgram(e),p=e,!0)},setBlending:K,setMaterial:function(e,n){e.side===p$1?X$1(t.CULL_FACE):W(t.CULL_FACE);let o=e.side===d$1;n&&(o=!o),q$1(o),e.blending===y$1&&!1===e.transparent?K(m$1):K(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.blendColor,e.blendAlpha,e.premultipliedAlpha),r$1.setFunc(e.depthFunc),r$1.setTest(e.depthTest),r$1.setMask(e.depthWrite),i.setMask(e.colorWrite);const s=e.stencilWrite;a.setTest(s),s&&(a.setMask(e.stencilWriteMask),a.setFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),a.setOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),$(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),!0===e.alphaToCoverage?W(t.SAMPLE_ALPHA_TO_COVERAGE):X$1(t.SAMPLE_ALPHA_TO_COVERAGE);},setFlipSided:q$1,setCullFace:Z,setLineWidth:function(e){e!==C&&(w&&t.lineWidth(e),C=e);},setPolygonOffset:$,setScissorTest:function(e){e?W(t.SCISSOR_TEST):X$1(t.SCISSOR_TEST);},activeTexture:function(e){void 0===e&&(e=t.TEXTURE0+U-1),I!==e&&(t.activeTexture(e),I=e);},bindTexture:function(e,n,i){void 0===i&&(i=null===I?t.TEXTURE0+U-1:I);let r=O[i];void 0===r&&(r={type:void 0,texture:void 0},O[i]=r),r.type===e&&r.texture===n||(I!==i&&(t.activeTexture(i),I=i),t.bindTexture(e,n||z[e]),r.type=e,r.texture=n);},unbindTexture:function(){const e=O[I];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0);},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments);}catch(e){console.error("THREE.WebGLState:",e);}},compressedTexImage3D:function(){try{t.compressedTexImage3D.apply(t,arguments);}catch(e){console.error("THREE.WebGLState:",e);}},texImage2D:function(){try{t.texImage2D.apply(t,arguments);}catch(e){console.error("THREE.WebGLState:",e);}},texImage3D:function(){try{t.texImage3D.apply(t,arguments);}catch(e){console.error("THREE.WebGLState:",e);}},updateUBOMapping:function(e,n){let i=s.get(n);void 0===i&&(i=new WeakMap,s.set(n,i));let r=i.get(e);void 0===r&&(r=t.getUniformBlockIndex(n,e.name),i.set(e,r));},uniformBlockBinding:function(e,n){const i=s.get(n).get(e);o.get(n)!==i&&(t.uniformBlockBinding(n,i,e.__bindingPointIndex),o.set(n,i));},texStorage2D:function(){try{t.texStorage2D.apply(t,arguments);}catch(e){console.error("THREE.WebGLState:",e);}},texStorage3D:function(){try{t.texStorage3D.apply(t,arguments);}catch(e){console.error("THREE.WebGLState:",e);}},texSubImage2D:function(){try{t.texSubImage2D.apply(t,arguments);}catch(e){console.error("THREE.WebGLState:",e);}},texSubImage3D:function(){try{t.texSubImage3D.apply(t,arguments);}catch(e){console.error("THREE.WebGLState:",e);}},compressedTexSubImage2D:function(){try{t.compressedTexSubImage2D.apply(t,arguments);}catch(e){console.error("THREE.WebGLState:",e);}},compressedTexSubImage3D:function(){try{t.compressedTexSubImage3D.apply(t,arguments);}catch(e){console.error("THREE.WebGLState:",e);}},scissor:function(e){!1===H.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),H.copy(e));},viewport:function(e){!1===G.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),G.copy(e));},reset:function(){t.disable(t.BLEND),t.disable(t.CULL_FACE),t.disable(t.DEPTH_TEST),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SCISSOR_TEST),t.disable(t.STENCIL_TEST),t.disable(t.SAMPLE_ALPHA_TO_COVERAGE),t.blendEquation(t.FUNC_ADD),t.blendFunc(t.ONE,t.ZERO),t.blendFuncSeparate(t.ONE,t.ZERO,t.ONE,t.ZERO),t.blendColor(0,0,0,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(t.LESS),r$1.setReversed(!1),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(t.ALWAYS,0,4294967295),t.stencilOp(t.KEEP,t.KEEP,t.KEEP),t.clearStencil(0),t.cullFace(t.BACK),t.frontFace(t.CCW),t.polygonOffset(0,0),t.activeTexture(t.TEXTURE0),t.bindFramebuffer(t.FRAMEBUFFER,null),t.bindFramebuffer(t.DRAW_FRAMEBUFFER,null),t.bindFramebuffer(t.READ_FRAMEBUFFER,null),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),l={},I=null,O={},c={},u=new WeakMap,f=[],p=null,m=!1,h=null,_=null,g=null,v=null,E=null,S=null,T=null,M=new $r$1(0,0,0),x=0,R=!1,A=null,b=null,C=null,L=null,P=null,H.set(0,0,t.canvas.width,t.canvas.height),G.set(0,0,t.canvas.width,t.canvas.height),i.reset(),r$1.reset(),a.reset();}}}function ia(e,t,i,r,a,o,s){const l=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,c="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),d=new Zs,p=new WeakMap;let m;const h=new WeakMap;let _=!1;try{_="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d");}catch(e){}function g(e,t){return _?new OffscreenCanvas(e,t):ei$1("canvas")}function v(e,t,n){let i=1;const r=Z(e);if((r.width>n||r.height>n)&&(i=n/Math.max(r.width,r.height)),i<1){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||"undefined"!=typeof VideoFrame&&e instanceof VideoFrame){const n=Math.floor(i*r.width),a=Math.floor(i*r.height);void 0===m&&(m=g(n,a));const o=t?g(n,a):m;o.width=n,o.height=a;return o.getContext("2d").drawImage(e,0,0,n,a),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+r.width+"x"+r.height+") to ("+n+"x"+a+")."),o}return "data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+r.width+"x"+r.height+")."),e}return e}function S(e){return e.generateMipmaps}function x(t){e.generateMipmap(t);}function R(t){return t.isWebGLCubeRenderTarget?e.TEXTURE_CUBE_MAP:t.isWebGL3DRenderTarget?e.TEXTURE_3D:t.isWebGLArrayRenderTarget||t.isCompressedArrayTexture?e.TEXTURE_2D_ARRAY:e.TEXTURE_2D}function A(n,i,r,a,o=!1){if(null!==n){if(void 0!==e[n])return e[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'");}let s=i;if(i===e.RED&&(r===e.FLOAT&&(s=e.R32F),r===e.HALF_FLOAT&&(s=e.R16F),r===e.UNSIGNED_BYTE&&(s=e.R8)),i===e.RED_INTEGER&&(r===e.UNSIGNED_BYTE&&(s=e.R8UI),r===e.UNSIGNED_SHORT&&(s=e.R16UI),r===e.UNSIGNED_INT&&(s=e.R32UI),r===e.BYTE&&(s=e.R8I),r===e.SHORT&&(s=e.R16I),r===e.INT&&(s=e.R32I)),i===e.RG&&(r===e.FLOAT&&(s=e.RG32F),r===e.HALF_FLOAT&&(s=e.RG16F),r===e.UNSIGNED_BYTE&&(s=e.RG8)),i===e.RG_INTEGER&&(r===e.UNSIGNED_BYTE&&(s=e.RG8UI),r===e.UNSIGNED_SHORT&&(s=e.RG16UI),r===e.UNSIGNED_INT&&(s=e.RG32UI),r===e.BYTE&&(s=e.RG8I),r===e.SHORT&&(s=e.RG16I),r===e.INT&&(s=e.RG32I)),i===e.RGB_INTEGER&&(r===e.UNSIGNED_BYTE&&(s=e.RGB8UI),r===e.UNSIGNED_SHORT&&(s=e.RGB16UI),r===e.UNSIGNED_INT&&(s=e.RGB32UI),r===e.BYTE&&(s=e.RGB8I),r===e.SHORT&&(s=e.RGB16I),r===e.INT&&(s=e.RGB32I)),i===e.RGBA_INTEGER&&(r===e.UNSIGNED_BYTE&&(s=e.RGBA8UI),r===e.UNSIGNED_SHORT&&(s=e.RGBA16UI),r===e.UNSIGNED_INT&&(s=e.RGBA32UI),r===e.BYTE&&(s=e.RGBA8I),r===e.SHORT&&(s=e.RGBA16I),r===e.INT&&(s=e.RGBA32I)),i===e.RGB&&r===e.UNSIGNED_INT_5_9_9_9_REV&&(s=e.RGB9_E5),i===e.RGBA){const t=o?Qe:ui$1.getTransfer(a);r===e.FLOAT&&(s=e.RGBA32F),r===e.HALF_FLOAT&&(s=e.RGBA16F),r===e.UNSIGNED_BYTE&&(s=t===Ke?e.SRGB8_ALPHA8:e.RGBA8),r===e.UNSIGNED_SHORT_4_4_4_4&&(s=e.RGBA4),r===e.UNSIGNED_SHORT_5_5_5_1&&(s=e.RGB5_A1);}return s!==e.R16F&&s!==e.R32F&&s!==e.RG16F&&s!==e.RG32F&&s!==e.RGBA16F&&s!==e.RGBA32F||t.get("EXT_color_buffer_float"),s}function b(t,n){let i;return t?null===n||n===kt||n===Ft?i=e.DEPTH24_STENCIL8:n===Et?i=e.DEPTH32F_STENCIL8:n===It&&(i=e.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):null===n||n===kt||n===Ft?i=e.DEPTH_COMPONENT24:n===Et?i=e.DEPTH_COMPONENT32F:n===It&&(i=e.DEPTH_COMPONENT16),i}function C(e,t){return !0===S(e)||e.isFramebufferTexture&&e.minFilter!==ft&&e.minFilter!==wt?Math.log2(Math.max(t.width,t.height))+1:void 0!==e.mipmaps&&e.mipmaps.length>0?e.mipmaps.length:e.isCompressedTexture&&Array.isArray(e.image)?t.mipmaps.length:1}function L(e){const t=e.target;t.removeEventListener("dispose",L),function(e){const t=r.get(e);if(void 0===t.__webglInit)return;const n=e.source,i=h.get(n);if(i){const r=i[t.__cacheKey];r.usedTimes--,0===r.usedTimes&&U(e),0===Object.keys(i).length&&h.delete(n);}r.remove(e);}(t),t.isVideoTexture&&p.delete(t);}function P(t){const n=t.target;n.removeEventListener("dispose",P),function(t){const n=r.get(t);t.depthTexture&&(t.depthTexture.dispose(),r.remove(t.depthTexture));if(t.isWebGLCubeRenderTarget)for(let t=0;t<6;t++){if(Array.isArray(n.__webglFramebuffer[t]))for(let i=0;i<n.__webglFramebuffer[t].length;i++)e.deleteFramebuffer(n.__webglFramebuffer[t][i]);else e.deleteFramebuffer(n.__webglFramebuffer[t]);n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer[t]);}else {if(Array.isArray(n.__webglFramebuffer))for(let t=0;t<n.__webglFramebuffer.length;t++)e.deleteFramebuffer(n.__webglFramebuffer[t]);else e.deleteFramebuffer(n.__webglFramebuffer);if(n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer),n.__webglMultisampledFramebuffer&&e.deleteFramebuffer(n.__webglMultisampledFramebuffer),n.__webglColorRenderbuffer)for(let t=0;t<n.__webglColorRenderbuffer.length;t++)n.__webglColorRenderbuffer[t]&&e.deleteRenderbuffer(n.__webglColorRenderbuffer[t]);n.__webglDepthRenderbuffer&&e.deleteRenderbuffer(n.__webglDepthRenderbuffer);}const i=t.textures;for(let t=0,n=i.length;t<n;t++){const n=r.get(i[t]);n.__webglTexture&&(e.deleteTexture(n.__webglTexture),s.memory.textures--),r.remove(i[t]);}r.remove(t);}(n);}function U(t){const n=r.get(t);e.deleteTexture(n.__webglTexture);const i=t.source;delete h.get(i)[n.__cacheKey],s.memory.textures--;}let w=0;function D(t,n){const a=r.get(t);if(t.isVideoTexture&&function(e){const t=s.render.frame;p.get(e)!==t&&(p.set(e,t),e.update());}(t),!1===t.isRenderTargetTexture&&t.version>0&&a.__version!==t.version){const e=t.image;if(null===e)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else {if(!1!==e.complete)return void G(a,t,n);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");}}i.bindTexture(e.TEXTURE_2D,a.__webglTexture,e.TEXTURE0+n);}const y={[pt]:e.REPEAT,[mt]:e.CLAMP_TO_EDGE,[yt]:e.MIRRORED_REPEAT},I={[ft]:e.NEAREST,[gt]:e.NEAREST_MIPMAP_NEAREST,[bt]:e.NEAREST_MIPMAP_LINEAR,[wt]:e.LINEAR,[Mt]:e.LINEAR_MIPMAP_NEAREST,[_t]:e.LINEAR_MIPMAP_LINEAR},N={[fs]:e.NEVER,[Ss]:e.ALWAYS,[gs]:e.LESS,[bs]:e.LEQUAL,[xs]:e.EQUAL,[Ms]:e.GEQUAL,[vs]:e.GREATER,[ws]:e.NOTEQUAL};function O(n,i){if(i.type!==Et||!1!==t.has("OES_texture_float_linear")||i.magFilter!==wt&&i.magFilter!==Mt&&i.magFilter!==bt&&i.magFilter!==_t&&i.minFilter!==wt&&i.minFilter!==Mt&&i.minFilter!==bt&&i.minFilter!==_t||console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),e.texParameteri(n,e.TEXTURE_WRAP_S,y[i.wrapS]),e.texParameteri(n,e.TEXTURE_WRAP_T,y[i.wrapT]),n!==e.TEXTURE_3D&&n!==e.TEXTURE_2D_ARRAY||e.texParameteri(n,e.TEXTURE_WRAP_R,y[i.wrapR]),e.texParameteri(n,e.TEXTURE_MAG_FILTER,I[i.magFilter]),e.texParameteri(n,e.TEXTURE_MIN_FILTER,I[i.minFilter]),i.compareFunction&&(e.texParameteri(n,e.TEXTURE_COMPARE_MODE,e.COMPARE_REF_TO_TEXTURE),e.texParameteri(n,e.TEXTURE_COMPARE_FUNC,N[i.compareFunction])),!0===t.has("EXT_texture_filter_anisotropic")){if(i.magFilter===ft)return;if(i.minFilter!==bt&&i.minFilter!==_t)return;if(i.type===Et&&!1===t.has("OES_texture_float_linear"))return;if(i.anisotropy>1||r.get(i).__currentAnisotropy){const o=t.get("EXT_texture_filter_anisotropic");e.texParameterf(n,o.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(i.anisotropy,a.getMaxAnisotropy())),r.get(i).__currentAnisotropy=i.anisotropy;}}}function H(t,n){let i=!1;void 0===t.__webglInit&&(t.__webglInit=!0,n.addEventListener("dispose",L));const r=n.source;let a=h.get(r);void 0===a&&(a={},h.set(r,a));const o=function(e){const t=[];return t.push(e.wrapS),t.push(e.wrapT),t.push(e.wrapR||0),t.push(e.magFilter),t.push(e.minFilter),t.push(e.anisotropy),t.push(e.internalFormat),t.push(e.format),t.push(e.type),t.push(e.generateMipmaps),t.push(e.premultiplyAlpha),t.push(e.flipY),t.push(e.unpackAlignment),t.push(e.colorSpace),t.join()}(n);if(o!==t.__cacheKey){void 0===a[o]&&(a[o]={texture:e.createTexture(),usedTimes:0},s.memory.textures++,i=!0),a[o].usedTimes++;const r=a[t.__cacheKey];void 0!==r&&(a[t.__cacheKey].usedTimes--,0===r.usedTimes&&U(n)),t.__cacheKey=o,t.__webglTexture=a[o].texture;}return i}function G(t,n,s){let l=e.TEXTURE_2D;(n.isDataArrayTexture||n.isCompressedArrayTexture)&&(l=e.TEXTURE_2D_ARRAY),n.isData3DTexture&&(l=e.TEXTURE_3D);const c=H(t,n),d=n.source;i.bindTexture(l,t.__webglTexture,e.TEXTURE0+s);const f=r.get(d);if(d.version!==f.__version||!0===c){i.activeTexture(e.TEXTURE0+s);const t=ui$1.getPrimaries(ui$1.workingColorSpace),r=n.colorSpace===Ze?null:ui$1.getPrimaries(n.colorSpace),p=n.colorSpace===Ze||t===r?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,n.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,n.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,p);let m=v(n.image,!1,a.maxTextureSize);m=q(n,m);const h=o.convert(n.format,n.colorSpace),_=o.convert(n.type);let g,T=A(n.internalFormat,h,_,n.colorSpace,n.isVideoTexture);O(l,n);const M=n.mipmaps,R=!0!==n.isVideoTexture,L=void 0===f.__version||!0===c,P=d.dataReady,U=C(n,m);if(n.isDepthTexture)T=b(n.format===Ht,n.type),L&&(R?i.texStorage2D(e.TEXTURE_2D,1,T,m.width,m.height):i.texImage2D(e.TEXTURE_2D,0,T,m.width,m.height,0,h,_,null));else if(n.isDataTexture)if(M.length>0){R&&L&&i.texStorage2D(e.TEXTURE_2D,U,T,M[0].width,M[0].height);for(let t=0,n=M.length;t<n;t++)g=M[t],R?P&&i.texSubImage2D(e.TEXTURE_2D,t,0,0,g.width,g.height,h,_,g.data):i.texImage2D(e.TEXTURE_2D,t,T,g.width,g.height,0,h,_,g.data);n.generateMipmaps=!1;}else R?(L&&i.texStorage2D(e.TEXTURE_2D,U,T,m.width,m.height),P&&i.texSubImage2D(e.TEXTURE_2D,0,0,0,m.width,m.height,h,_,m.data)):i.texImage2D(e.TEXTURE_2D,0,T,m.width,m.height,0,h,_,m.data);else if(n.isCompressedTexture)if(n.isCompressedArrayTexture){R&&L&&i.texStorage3D(e.TEXTURE_2D_ARRAY,U,T,M[0].width,M[0].height,m.depth);for(let t=0,r=M.length;t<r;t++)if(g=M[t],n.format!==Wt)if(null!==h)if(R){if(P)if(n.layerUpdates.size>0){const r=xd(g.width,g.height,n.format,n.type);for(const a of n.layerUpdates){const n=g.data.subarray(a*r/g.data.BYTES_PER_ELEMENT,(a+1)*r/g.data.BYTES_PER_ELEMENT);i.compressedTexSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,a,g.width,g.height,1,h,n);}n.clearLayerUpdates();}else i.compressedTexSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,0,g.width,g.height,m.depth,h,g.data);}else i.compressedTexImage3D(e.TEXTURE_2D_ARRAY,t,T,g.width,g.height,m.depth,0,g.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else R?P&&i.texSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,0,g.width,g.height,m.depth,h,_,g.data):i.texImage3D(e.TEXTURE_2D_ARRAY,t,T,g.width,g.height,m.depth,0,h,_,g.data);}else {R&&L&&i.texStorage2D(e.TEXTURE_2D,U,T,M[0].width,M[0].height);for(let t=0,r=M.length;t<r;t++)g=M[t],n.format!==Wt?null!==h?R?P&&i.compressedTexSubImage2D(e.TEXTURE_2D,t,0,0,g.width,g.height,h,g.data):i.compressedTexImage2D(e.TEXTURE_2D,t,T,g.width,g.height,0,g.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):R?P&&i.texSubImage2D(e.TEXTURE_2D,t,0,0,g.width,g.height,h,_,g.data):i.texImage2D(e.TEXTURE_2D,t,T,g.width,g.height,0,h,_,g.data);}else if(n.isDataArrayTexture)if(R){if(L&&i.texStorage3D(e.TEXTURE_2D_ARRAY,U,T,m.width,m.height,m.depth),P)if(n.layerUpdates.size>0){const t=xd(m.width,m.height,n.format,n.type);for(const r of n.layerUpdates){const n=m.data.subarray(r*t/m.data.BYTES_PER_ELEMENT,(r+1)*t/m.data.BYTES_PER_ELEMENT);i.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,r,m.width,m.height,1,h,_,n);}n.clearLayerUpdates();}else i.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,0,m.width,m.height,m.depth,h,_,m.data);}else i.texImage3D(e.TEXTURE_2D_ARRAY,0,T,m.width,m.height,m.depth,0,h,_,m.data);else if(n.isData3DTexture)R?(L&&i.texStorage3D(e.TEXTURE_3D,U,T,m.width,m.height,m.depth),P&&i.texSubImage3D(e.TEXTURE_3D,0,0,0,0,m.width,m.height,m.depth,h,_,m.data)):i.texImage3D(e.TEXTURE_3D,0,T,m.width,m.height,m.depth,0,h,_,m.data);else if(n.isFramebufferTexture){if(L)if(R)i.texStorage2D(e.TEXTURE_2D,U,T,m.width,m.height);else {let t=m.width,n=m.height;for(let r=0;r<U;r++)i.texImage2D(e.TEXTURE_2D,r,T,t,n,0,h,_,null),t>>=1,n>>=1;}}else if(M.length>0){if(R&&L){const t=Z(M[0]);i.texStorage2D(e.TEXTURE_2D,U,T,t.width,t.height);}for(let t=0,n=M.length;t<n;t++)g=M[t],R?P&&i.texSubImage2D(e.TEXTURE_2D,t,0,0,h,_,g):i.texImage2D(e.TEXTURE_2D,t,T,h,_,g);n.generateMipmaps=!1;}else if(R){if(L){const t=Z(m);i.texStorage2D(e.TEXTURE_2D,U,T,t.width,t.height);}P&&i.texSubImage2D(e.TEXTURE_2D,0,0,0,h,_,m);}else i.texImage2D(e.TEXTURE_2D,0,T,h,_,m);S(n)&&x(l),f.__version=d.version,n.onUpdate&&n.onUpdate(n);}t.__version=n.version;}function V(t,n,a,s,c,d){const u=o.convert(a.format,a.colorSpace),f=o.convert(a.type),p=A(a.internalFormat,u,f,a.colorSpace),m=r.get(n),h=r.get(a);if(h.__renderTarget=n,!m.__hasExternalTextures){const t=Math.max(1,n.width>>d),r=Math.max(1,n.height>>d);c===e.TEXTURE_3D||c===e.TEXTURE_2D_ARRAY?i.texImage3D(c,d,p,t,r,n.depth,0,u,f,null):i.texImage2D(c,d,p,t,r,0,u,f,null);}i.bindFramebuffer(e.FRAMEBUFFER,t),K(n)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,s,c,h.__webglTexture,0,j(n)):(c===e.TEXTURE_2D||c>=e.TEXTURE_CUBE_MAP_POSITIVE_X&&c<=e.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&e.framebufferTexture2D(e.FRAMEBUFFER,s,c,h.__webglTexture,d),i.bindFramebuffer(e.FRAMEBUFFER,null);}function z(t,n,i){if(e.bindRenderbuffer(e.RENDERBUFFER,t),n.depthBuffer){const r=n.depthTexture,a=r&&r.isDepthTexture?r.type:null,o=b(n.stencilBuffer,a),s=n.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,c=j(n);K(n)?l.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,c,o,n.width,n.height):i?e.renderbufferStorageMultisample(e.RENDERBUFFER,c,o,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,o,n.width,n.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,s,e.RENDERBUFFER,t);}else {const t=n.textures;for(let r=0;r<t.length;r++){const a=t[r],s=o.convert(a.format,a.colorSpace),c=o.convert(a.type),d=A(a.internalFormat,s,c,a.colorSpace),u=j(n);i&&!1===K(n)?e.renderbufferStorageMultisample(e.RENDERBUFFER,u,d,n.width,n.height):K(n)?l.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,u,d,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,d,n.width,n.height);}}e.bindRenderbuffer(e.RENDERBUFFER,null);}function k(t){const n=r.get(t),a=!0===t.isWebGLCubeRenderTarget;if(n.__boundDepthTexture!==t.depthTexture){const e=t.depthTexture;if(n.__depthDisposeCallback&&n.__depthDisposeCallback(),e){const t=()=>{delete n.__boundDepthTexture,delete n.__depthDisposeCallback,e.removeEventListener("dispose",t);};e.addEventListener("dispose",t),n.__depthDisposeCallback=t;}n.__boundDepthTexture=e;}if(t.depthTexture&&!n.__autoAllocateDepthBuffer){if(a)throw new Error("target.depthTexture not supported in Cube render targets");!function(t,n){if(n&&n.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(i.bindFramebuffer(e.FRAMEBUFFER,t),!n.depthTexture||!n.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const a=r.get(n.depthTexture);a.__renderTarget=n,a.__webglTexture&&n.depthTexture.image.width===n.width&&n.depthTexture.image.height===n.height||(n.depthTexture.image.width=n.width,n.depthTexture.image.height=n.height,n.depthTexture.needsUpdate=!0),D(n.depthTexture,0);const o=a.__webglTexture,s=j(n);if(n.depthTexture.format===Dt)K(n)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,o,0,s):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,o,0);else {if(n.depthTexture.format!==Ht)throw new Error("Unknown depthTexture format");K(n)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,o,0,s):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,o,0);}}(n.__webglFramebuffer,t);}else if(a){n.__webglDepthbuffer=[];for(let r=0;r<6;r++)if(i.bindFramebuffer(e.FRAMEBUFFER,n.__webglFramebuffer[r]),void 0===n.__webglDepthbuffer[r])n.__webglDepthbuffer[r]=e.createRenderbuffer(),z(n.__webglDepthbuffer[r],t,!1);else {const i=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,a=n.__webglDepthbuffer[r];e.bindRenderbuffer(e.RENDERBUFFER,a),e.framebufferRenderbuffer(e.FRAMEBUFFER,i,e.RENDERBUFFER,a);}}else if(i.bindFramebuffer(e.FRAMEBUFFER,n.__webglFramebuffer),void 0===n.__webglDepthbuffer)n.__webglDepthbuffer=e.createRenderbuffer(),z(n.__webglDepthbuffer,t,!1);else {const i=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,r=n.__webglDepthbuffer;e.bindRenderbuffer(e.RENDERBUFFER,r),e.framebufferRenderbuffer(e.FRAMEBUFFER,i,e.RENDERBUFFER,r);}i.bindFramebuffer(e.FRAMEBUFFER,null);}const W=[],Y=[];function j(e){return Math.min(a.maxSamples,e.samples)}function K(e){const n=r.get(e);return e.samples>0&&!0===t.has("WEBGL_multisampled_render_to_texture")&&!1!==n.__useRenderToTexture}function q(e,t){const n=e.colorSpace,i=e.format,r=e.type;return !0===e.isCompressedTexture||!0===e.isVideoTexture||n!==$e&&n!==Ze&&(ui$1.getTransfer(n)===Ke?i===Wt&&r===Tt||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",n)),t}function Z(e){return "undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement?(d.width=e.naturalWidth||e.width,d.height=e.naturalHeight||e.height):"undefined"!=typeof VideoFrame&&e instanceof VideoFrame?(d.width=e.displayWidth,d.height=e.displayHeight):(d.width=e.width,d.height=e.height),d}this.allocateTextureUnit=function(){const e=w;return e>=a.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+a.maxTextures),w+=1,e},this.resetTextureUnits=function(){w=0;},this.setTexture2D=D,this.setTexture2DArray=function(t,n){const a=r.get(t);t.version>0&&a.__version!==t.version?G(a,t,n):i.bindTexture(e.TEXTURE_2D_ARRAY,a.__webglTexture,e.TEXTURE0+n);},this.setTexture3D=function(t,n){const a=r.get(t);t.version>0&&a.__version!==t.version?G(a,t,n):i.bindTexture(e.TEXTURE_3D,a.__webglTexture,e.TEXTURE0+n);},this.setTextureCube=function(t,n){const s=r.get(t);t.version>0&&s.__version!==t.version?function(t,n,s){if(6!==n.image.length)return;const l=H(t,n),c=n.source;i.bindTexture(e.TEXTURE_CUBE_MAP,t.__webglTexture,e.TEXTURE0+s);const d=r.get(c);if(c.version!==d.__version||!0===l){i.activeTexture(e.TEXTURE0+s);const t=ui$1.getPrimaries(ui$1.workingColorSpace),r=n.colorSpace===Ze?null:ui$1.getPrimaries(n.colorSpace),f=n.colorSpace===Ze||t===r?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,n.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,n.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,f);const p=n.isCompressedTexture||n.image[0].isCompressedTexture,m=n.image[0]&&n.image[0].isDataTexture,h=[];for(let e=0;e<6;e++)h[e]=p||m?m?n.image[e].image:n.image[e]:v(n.image[e],!0,a.maxCubemapSize),h[e]=q(n,h[e]);const _=h[0],g=o.convert(n.format,n.colorSpace),T=o.convert(n.type),M=A(n.internalFormat,g,T,n.colorSpace),R=!0!==n.isVideoTexture,b=void 0===d.__version||!0===l,L=c.dataReady;let P,U=C(n,_);if(O(e.TEXTURE_CUBE_MAP,n),p){R&&b&&i.texStorage2D(e.TEXTURE_CUBE_MAP,U,M,_.width,_.height);for(let t=0;t<6;t++){P=h[t].mipmaps;for(let r=0;r<P.length;r++){const a=P[r];n.format!==Wt?null!==g?R?L&&i.compressedTexSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,0,0,a.width,a.height,g,a.data):i.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,M,a.width,a.height,0,a.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):R?L&&i.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,0,0,a.width,a.height,g,T,a.data):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,M,a.width,a.height,0,g,T,a.data);}}}else {if(P=n.mipmaps,R&&b){P.length>0&&U++;const t=Z(h[0]);i.texStorage2D(e.TEXTURE_CUBE_MAP,U,M,t.width,t.height);}for(let t=0;t<6;t++)if(m){R?L&&i.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,h[t].width,h[t].height,g,T,h[t].data):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,M,h[t].width,h[t].height,0,g,T,h[t].data);for(let n=0;n<P.length;n++){const r=P[n].image[t].image;R?L&&i.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,n+1,0,0,r.width,r.height,g,T,r.data):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,n+1,M,r.width,r.height,0,g,T,r.data);}}else {R?L&&i.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,g,T,h[t]):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,M,g,T,h[t]);for(let n=0;n<P.length;n++){const r=P[n];R?L&&i.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,n+1,0,0,g,T,r.image[t]):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,n+1,M,g,T,r.image[t]);}}}S(n)&&x(e.TEXTURE_CUBE_MAP),d.__version=c.version,n.onUpdate&&n.onUpdate(n);}t.__version=n.version;}(s,t,n):i.bindTexture(e.TEXTURE_CUBE_MAP,s.__webglTexture,e.TEXTURE0+n);},this.rebindTextures=function(t,n,i){const a=r.get(t);void 0!==n&&V(a.__webglFramebuffer,t,t.texture,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,0),void 0!==i&&k(t);},this.setupRenderTarget=function(t){const n=t.texture,a=r.get(t),l=r.get(n);t.addEventListener("dispose",P);const c=t.textures,d=!0===t.isWebGLCubeRenderTarget,u=c.length>1;if(u||(void 0===l.__webglTexture&&(l.__webglTexture=e.createTexture()),l.__version=n.version,s.memory.textures++),d){a.__webglFramebuffer=[];for(let t=0;t<6;t++)if(n.mipmaps&&n.mipmaps.length>0){a.__webglFramebuffer[t]=[];for(let i=0;i<n.mipmaps.length;i++)a.__webglFramebuffer[t][i]=e.createFramebuffer();}else a.__webglFramebuffer[t]=e.createFramebuffer();}else {if(n.mipmaps&&n.mipmaps.length>0){a.__webglFramebuffer=[];for(let t=0;t<n.mipmaps.length;t++)a.__webglFramebuffer[t]=e.createFramebuffer();}else a.__webglFramebuffer=e.createFramebuffer();if(u)for(let t=0,n=c.length;t<n;t++){const n=r.get(c[t]);void 0===n.__webglTexture&&(n.__webglTexture=e.createTexture(),s.memory.textures++);}if(t.samples>0&&!1===K(t)){a.__webglMultisampledFramebuffer=e.createFramebuffer(),a.__webglColorRenderbuffer=[],i.bindFramebuffer(e.FRAMEBUFFER,a.__webglMultisampledFramebuffer);for(let n=0;n<c.length;n++){const i=c[n];a.__webglColorRenderbuffer[n]=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,a.__webglColorRenderbuffer[n]);const r=o.convert(i.format,i.colorSpace),s=o.convert(i.type),l=A(i.internalFormat,r,s,i.colorSpace,!0===t.isXRRenderTarget),d=j(t);e.renderbufferStorageMultisample(e.RENDERBUFFER,d,l,t.width,t.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+n,e.RENDERBUFFER,a.__webglColorRenderbuffer[n]);}e.bindRenderbuffer(e.RENDERBUFFER,null),t.depthBuffer&&(a.__webglDepthRenderbuffer=e.createRenderbuffer(),z(a.__webglDepthRenderbuffer,t,!0)),i.bindFramebuffer(e.FRAMEBUFFER,null);}}if(d){i.bindTexture(e.TEXTURE_CUBE_MAP,l.__webglTexture),O(e.TEXTURE_CUBE_MAP,n);for(let i=0;i<6;i++)if(n.mipmaps&&n.mipmaps.length>0)for(let r=0;r<n.mipmaps.length;r++)V(a.__webglFramebuffer[i][r],t,n,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+i,r);else V(a.__webglFramebuffer[i],t,n,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+i,0);S(n)&&x(e.TEXTURE_CUBE_MAP),i.unbindTexture();}else if(u){for(let n=0,o=c.length;n<o;n++){const o=c[n],s=r.get(o);i.bindTexture(e.TEXTURE_2D,s.__webglTexture),O(e.TEXTURE_2D,o),V(a.__webglFramebuffer,t,o,e.COLOR_ATTACHMENT0+n,e.TEXTURE_2D,0),S(o)&&x(e.TEXTURE_2D);}i.unbindTexture();}else {let r=e.TEXTURE_2D;if((t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&(r=t.isWebGL3DRenderTarget?e.TEXTURE_3D:e.TEXTURE_2D_ARRAY),i.bindTexture(r,l.__webglTexture),O(r,n),n.mipmaps&&n.mipmaps.length>0)for(let i=0;i<n.mipmaps.length;i++)V(a.__webglFramebuffer[i],t,n,e.COLOR_ATTACHMENT0,r,i);else V(a.__webglFramebuffer,t,n,e.COLOR_ATTACHMENT0,r,0);S(n)&&x(r),i.unbindTexture();}t.depthBuffer&&k(t);},this.updateRenderTargetMipmap=function(e){const t=e.textures;for(let n=0,a=t.length;n<a;n++){const a=t[n];if(S(a)){const t=R(e),n=r.get(a).__webglTexture;i.bindTexture(t,n),x(t),i.unbindTexture();}}},this.updateMultisampleRenderTarget=function(t){if(t.samples>0)if(!1===K(t)){const n=t.textures,a=t.width,o=t.height;let s=e.COLOR_BUFFER_BIT;const l=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,d=r.get(t),u=n.length>1;if(u)for(let t=0;t<n.length;t++)i.bindFramebuffer(e.FRAMEBUFFER,d.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,null),i.bindFramebuffer(e.FRAMEBUFFER,d.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,null,0);i.bindFramebuffer(e.READ_FRAMEBUFFER,d.__webglMultisampledFramebuffer),i.bindFramebuffer(e.DRAW_FRAMEBUFFER,d.__webglFramebuffer);for(let i=0;i<n.length;i++){if(t.resolveDepthBuffer&&(t.depthBuffer&&(s|=e.DEPTH_BUFFER_BIT),t.stencilBuffer&&t.resolveStencilBuffer&&(s|=e.STENCIL_BUFFER_BIT)),u){e.framebufferRenderbuffer(e.READ_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.RENDERBUFFER,d.__webglColorRenderbuffer[i]);const t=r.get(n[i]).__webglTexture;e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0);}e.blitFramebuffer(0,0,a,o,0,0,a,o,s,e.NEAREST),!0===c&&(W.length=0,Y.length=0,W.push(e.COLOR_ATTACHMENT0+i),t.depthBuffer&&!1===t.resolveDepthBuffer&&(W.push(l),Y.push(l),e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,Y)),e.invalidateFramebuffer(e.READ_FRAMEBUFFER,W));}if(i.bindFramebuffer(e.READ_FRAMEBUFFER,null),i.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),u)for(let t=0;t<n.length;t++){i.bindFramebuffer(e.FRAMEBUFFER,d.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,d.__webglColorRenderbuffer[t]);const a=r.get(n[t]).__webglTexture;i.bindFramebuffer(e.FRAMEBUFFER,d.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,a,0);}i.bindFramebuffer(e.DRAW_FRAMEBUFFER,d.__webglMultisampledFramebuffer);}else if(t.depthBuffer&&!1===t.resolveDepthBuffer&&c){const n=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,[n]);}},this.setupDepthRenderbuffer=k,this.setupFrameBufferTexture=V,this.useMultisampledRTT=K;}function ra(e,t){return {convert:function(n,i=Ze){let r;const a=ui$1.getTransfer(i);if(n===Tt)return e.UNSIGNED_BYTE;if(n===Pt)return e.UNSIGNED_SHORT_4_4_4_4;if(n===Ot)return e.UNSIGNED_SHORT_5_5_5_1;if(n===Nt)return e.UNSIGNED_INT_5_9_9_9_REV;if(n===zt)return e.BYTE;if(n===Ct)return e.SHORT;if(n===It)return e.UNSIGNED_SHORT;if(n===Bt)return e.INT;if(n===kt)return e.UNSIGNED_INT;if(n===Et)return e.FLOAT;if(n===Rt)return e.HALF_FLOAT;if(n===Lt)return e.ALPHA;if(n===Vt)return e.RGB;if(n===Wt)return e.RGBA;if(n===Ut)return e.LUMINANCE;if(n===jt)return e.LUMINANCE_ALPHA;if(n===Dt)return e.DEPTH_COMPONENT;if(n===Ht)return e.DEPTH_STENCIL;if(n===qt)return e.RED;if(n===Jt)return e.RED_INTEGER;if(n===Xt)return e.RG;if(n===Yt)return e.RG_INTEGER;if(n===Gt)return e.RGBA_INTEGER;if(n===$t||n===Qt||n===Kt||n===te)if(a===Ke){if(r=t.get("WEBGL_compressed_texture_s3tc_srgb"),null===r)return null;if(n===$t)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===Qt)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===Kt)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===te)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else {if(r=t.get("WEBGL_compressed_texture_s3tc"),null===r)return null;if(n===$t)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===Qt)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===Kt)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===te)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(n===ee||n===se||n===ie||n===re){if(r=t.get("WEBGL_compressed_texture_pvrtc"),null===r)return null;if(n===ee)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===se)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===ie)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===re)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(n===ne||n===oe||n===ae){if(r=t.get("WEBGL_compressed_texture_etc"),null===r)return null;if(n===ne||n===oe)return a===Ke?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(n===ae)return a===Ke?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}if(n===he||n===le||n===ce||n===ue||n===de||n===pe||n===me||n===ye||n===fe||n===ge||n===xe||n===be||n===ve||n===we){if(r=t.get("WEBGL_compressed_texture_astc"),null===r)return null;if(n===he)return a===Ke?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===le)return a===Ke?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===ce)return a===Ke?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===ue)return a===Ke?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===de)return a===Ke?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===pe)return a===Ke?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===me)return a===Ke?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===ye)return a===Ke?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===fe)return a===Ke?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===ge)return a===Ke?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===xe)return a===Ke?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===be)return a===Ke?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===ve)return a===Ke?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===we)return a===Ke?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}if(n===Me||n===Se||n===_e){if(r=t.get("EXT_texture_compression_bptc"),null===r)return null;if(n===Me)return a===Ke?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===Se)return r.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===_e)return r.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}if(n===Ae||n===Te||n===ze||n===Ce){if(r=t.get("EXT_texture_compression_rgtc"),null===r)return null;if(n===Me)return r.COMPRESSED_RED_RGTC1_EXT;if(n===Te)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===ze)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===Ce)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return n===Ft?e.UNSIGNED_INT_24_8:void 0!==e[n]?e[n]:null}}}const aa={type:"move"};class oa{constructor(){this._targetRay=null,this._grip=null,this._hand=null;}getHandSpace(){return null===this._hand&&(this._hand=new Ha,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new Ha,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Ii$1,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Ii$1),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new Ha,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Ii$1,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Ii$1),this._grip}dispatchEvent(e){return null!==this._targetRay&&this._targetRay.dispatchEvent(e),null!==this._grip&&this._grip.dispatchEvent(e),null!==this._hand&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const n of e.hand.values())this._getHandJoint(t,n);}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(e,t,n){let i=null,r=null,a=null;const o=this._targetRay,s=this._grip,l=this._hand;if(e&&"visible-blurred"!==t.session.visibilityState){if(l&&e.hand){a=!0;for(const i of e.hand.values()){const e=t.getJointPose(i,n),r=this._getHandJoint(l,i);null!==e&&(r.matrix.fromArray(e.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.matrixWorldNeedsUpdate=!0,r.jointRadius=e.radius),r.visible=null!==e;}const i=l.joints["index-finger-tip"],r=l.joints["thumb-tip"],o=i.position.distanceTo(r.position),s=.02,c=.005;l.inputState.pinching&&o>s+c?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!l.inputState.pinching&&o<=s-c&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}));}else null!==s&&e.gripSpace&&(r=t.getPose(e.gripSpace,n),null!==r&&(s.matrix.fromArray(r.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale),s.matrixWorldNeedsUpdate=!0,r.linearVelocity?(s.hasLinearVelocity=!0,s.linearVelocity.copy(r.linearVelocity)):s.hasLinearVelocity=!1,r.angularVelocity?(s.hasAngularVelocity=!0,s.angularVelocity.copy(r.angularVelocity)):s.hasAngularVelocity=!1));null!==o&&(i=t.getPose(e.targetRaySpace,n),null===i&&null!==r&&(i=r),null!==i&&(o.matrix.fromArray(i.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,i.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(i.linearVelocity)):o.hasLinearVelocity=!1,i.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(i.angularVelocity)):o.hasAngularVelocity=!1,this.dispatchEvent(aa)));}return null!==o&&(o.visible=null!==i),null!==s&&(s.visible=null!==r),null!==l&&(l.visible=null!==a),this}_getHandJoint(e,t){if(void 0===e.joints[t.jointName]){const n=new Ha;n.matrixAutoUpdate=!1,n.visible=!1,e.joints[t.jointName]=n,e.add(n);}return e.joints[t.jointName]}}class sa{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0;}init(e,t,n){if(null===this.texture){const i=new vi$1;e.properties.get(i).__webglTexture=t.texture,t.depthNear==n.depthNear&&t.depthFar==n.depthFar||(this.depthNear=t.depthNear,this.depthFar=t.depthFar),this.texture=i;}}getMesh(e){if(null!==this.texture&&null===this.mesh){const t=e.cameras[0].viewport,n=new Jn$1({vertexShader:"\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}",fragmentShader:"\nuniform sampler2DArray depthColor;\nuniform float depthWidth;\nuniform float depthHeight;\n\nvoid main() {\n\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\n\n\tif ( coord.x >= 1.0 ) {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\n\n\t} else {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\n\n\t}\n\n}",uniforms:{depthColor:{value:this.texture},depthWidth:{value:t.z},depthHeight:{value:t.w}}});this.mesh=new Vn$1(new ul(20,20),n);}return this.mesh}reset(){this.texture=null,this.mesh=null;}getDepthTexture(){return this.texture}}class la extends Ns{constructor(e,t){super();const i=this;let a=null,o=1,s=null,l="local-floor",c=1,d=null,u=null,f=null,p=null,m=null,h=null;const _=new sa,g=t.getContextAttributes();let v=null,S=null;const M=[],x=[],R=new Zs;let A=null;const b=new $n$1;b.viewport=new wi$1;const C=new $n$1;C.viewport=new wi$1;const L=[b,C],U=new Zc;let w=null,D=null;function y(e){const t=x.indexOf(e.inputSource);if(-1===t)return;const n=M[t];void 0!==n&&(n.update(e.inputSource,e.frame,d||s),n.dispatchEvent({type:e.type,data:e.inputSource}));}function N(){a.removeEventListener("select",y),a.removeEventListener("selectstart",y),a.removeEventListener("selectend",y),a.removeEventListener("squeeze",y),a.removeEventListener("squeezestart",y),a.removeEventListener("squeezeend",y),a.removeEventListener("end",N),a.removeEventListener("inputsourceschange",O);for(let e=0;e<M.length;e++){const t=x[e];null!==t&&(x[e]=null,M[e].disconnect(t));}w=null,D=null,_.reset(),e.setRenderTarget(v),m=null,p=null,f=null,a=null,S=null,V.stop(),i.isPresenting=!1,e.setPixelRatio(A),e.setSize(R.width,R.height,!1),i.dispatchEvent({type:"sessionend"});}function O(e){for(let t=0;t<e.removed.length;t++){const n=e.removed[t],i=x.indexOf(n);i>=0&&(x[i]=null,M[i].disconnect(n));}for(let t=0;t<e.added.length;t++){const n=e.added[t];let i=x.indexOf(n);if(-1===i){for(let e=0;e<M.length;e++){if(e>=x.length){x.push(n),i=e;break}if(null===x[e]){x[e]=n,i=e;break}}if(-1===i)break}const r=M[i];r&&r.connect(n);}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(e){let t=M[e];return void 0===t&&(t=new oa,M[e]=t),t.getTargetRaySpace()},this.getControllerGrip=function(e){let t=M[e];return void 0===t&&(t=new oa,M[e]=t),t.getGripSpace()},this.getHand=function(e){let t=M[e];return void 0===t&&(t=new oa,M[e]=t),t.getHandSpace()},this.setFramebufferScaleFactor=function(e){o=e,!0===i.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");},this.setReferenceSpaceType=function(e){l=e,!0===i.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");},this.getReferenceSpace=function(){return d||s},this.setReferenceSpace=function(e){d=e;},this.getBaseLayer=function(){return null!==p?p:m},this.getBinding=function(){return f},this.getFrame=function(){return h},this.getSession=function(){return a},this.setSession=async function(n){if(a=n,null!==a){if(v=e.getRenderTarget(),a.addEventListener("select",y),a.addEventListener("selectstart",y),a.addEventListener("selectend",y),a.addEventListener("squeeze",y),a.addEventListener("squeezestart",y),a.addEventListener("squeezeend",y),a.addEventListener("end",N),a.addEventListener("inputsourceschange",O),!0!==g.xrCompatible&&await t.makeXRCompatible(),A=e.getPixelRatio(),e.getSize(R),void 0===a.renderState.layers){const n={antialias:g.antialias,alpha:!0,depth:g.depth,stencil:g.stencil,framebufferScaleFactor:o};m=new XRWebGLLayer(a,t,n),a.updateRenderState({baseLayer:m}),e.setPixelRatio(1),e.setSize(m.framebufferWidth,m.framebufferHeight,!1),S=new Si$1(m.framebufferWidth,m.framebufferHeight,{format:Wt,type:Tt,colorSpace:e.outputColorSpace,stencilBuffer:g.stencil});}else {let n=null,i=null,r=null;g.depth&&(r=g.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,n=g.stencil?Ht:Dt,i=g.stencil?Ft:kt);const s={colorFormat:t.RGBA8,depthFormat:r,scaleFactor:o};f=new XRWebGLBinding(a,t),p=f.createProjectionLayer(s),a.updateRenderState({layers:[p]}),e.setPixelRatio(1),e.setSize(p.textureWidth,p.textureHeight,!1),S=new Si$1(p.textureWidth,p.textureHeight,{format:Wt,type:Tt,depthTexture:new $a(p.textureWidth,p.textureHeight,i,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:g.stencil,colorSpace:e.outputColorSpace,samples:g.antialias?4:0,resolveDepthBuffer:!1===p.ignoreDepthValues});}S.isXRRenderTarget=!0,this.setFoveation(c),d=null,s=await a.requestReferenceSpace(l),V.setContext(a),V.start(),i.isPresenting=!0,i.dispatchEvent({type:"sessionstart"});}},this.getEnvironmentBlendMode=function(){if(null!==a)return a.environmentBlendMode},this.getDepthTexture=function(){return _.getDepthTexture()};const F=new Ii$1,B=new Ii$1;function H(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert();}this.updateCamera=function(e){if(null===a)return;let t=e.near,n=e.far;null!==_.texture&&(_.depthNear>0&&(t=_.depthNear),_.depthFar>0&&(n=_.depthFar)),U.near=C.near=b.near=t,U.far=C.far=b.far=n,w===U.near&&D===U.far||(a.updateRenderState({depthNear:U.near,depthFar:U.far}),w=U.near,D=U.far),b.layers.mask=2|e.layers.mask,C.layers.mask=4|e.layers.mask,U.layers.mask=b.layers.mask|C.layers.mask;const i=e.parent,r=U.cameras;H(U,i);for(let e=0;e<r.length;e++)H(r[e],i);2===r.length?function(e,t,n){F.setFromMatrixPosition(t.matrixWorld),B.setFromMatrixPosition(n.matrixWorld);const i=F.distanceTo(B),r=t.projectionMatrix.elements,a=n.projectionMatrix.elements,o=r[14]/(r[10]-1),s=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],d=(r[8]-1)/r[0],u=(a[8]+1)/a[0],f=o*d,p=o*u,m=i/(-d+u),h=m*-d;if(t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(h),e.translateZ(m),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert(),-1===r[10])e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse);else {const t=o+m,n=s+m,r=f-h,a=p+(i-h),d=l*s/n*t,u=c*s/n*t;e.projectionMatrix.makePerspective(r,a,d,u,t,n),e.projectionMatrixInverse.copy(e.projectionMatrix).invert();}}(U,b,C):U.projectionMatrix.copy(b.projectionMatrix),function(e,t,n){null===n?e.matrix.copy(t.matrixWorld):(e.matrix.copy(n.matrixWorld),e.matrix.invert(),e.matrix.multiply(t.matrixWorld));e.matrix.decompose(e.position,e.quaternion,e.scale),e.updateMatrixWorld(!0),e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse),e.isPerspectiveCamera&&(e.fov=2*Us*Math.atan(1/e.projectionMatrix.elements[5]),e.zoom=1);}(e,U,i);},this.getCamera=function(){return U},this.getFoveation=function(){if(null!==p||null!==m)return c},this.setFoveation=function(e){c=e,null!==p&&(p.fixedFoveation=e),null!==m&&void 0!==m.fixedFoveation&&(m.fixedFoveation=e);},this.hasDepthSensing=function(){return null!==_.texture},this.getDepthSensingMesh=function(){return _.getMesh(U)};let G=null;const V=new Pn;V.setAnimationLoop((function(t,n){if(u=n.getViewerPose(d||s),h=n,null!==u){const t=u.views;null!==m&&(e.setRenderTargetFramebuffer(S,m.framebuffer),e.setRenderTarget(S));let n=!1;t.length!==U.cameras.length&&(U.cameras.length=0,n=!0);for(let i=0;i<t.length;i++){const r=t[i];let a=null;if(null!==m)a=m.getViewport(r);else {const t=f.getViewSubImage(p,r);a=t.viewport,0===i&&(e.setRenderTargetTextures(S,t.colorTexture,p.ignoreDepthValues?void 0:t.depthStencilTexture),e.setRenderTarget(S));}let o=L[i];void 0===o&&(o=new $n$1,o.layers.enable(i),o.viewport=new wi$1,L[i]=o),o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.quaternion,o.scale),o.projectionMatrix.fromArray(r.projectionMatrix),o.projectionMatrixInverse.copy(o.projectionMatrix).invert(),o.viewport.set(a.x,a.y,a.width,a.height),0===i&&(U.matrix.copy(o.matrix),U.matrix.decompose(U.position,U.quaternion,U.scale)),!0===n&&U.cameras.push(o);}const i=a.enabledFeatures;if(i&&i.includes("depth-sensing")){const n=f.getDepthInformation(t[0]);n&&n.isValid&&n.texture&&_.init(e,n,a.renderState);}}for(let e=0;e<M.length;e++){const t=x[e],i=M[e];null!==t&&void 0!==i&&i.update(t,n,d||s);}G&&G(t,n),n.detectedPlanes&&i.dispatchEvent({type:"planesdetected",data:n}),h=null;})),this.setAnimationLoop=function(e){G=e;},this.dispose=function(){};}}const ca=new yr$1,da=new nr$1;function ua(e,t){function n(e,t){!0===e.matrixAutoUpdate&&e.updateMatrix(),t.value.copy(e.matrix);}function i(e,i){e.opacity.value=i.opacity,i.color&&e.diffuse.value.copy(i.color),i.emissive&&e.emissive.value.copy(i.emissive).multiplyScalar(i.emissiveIntensity),i.map&&(e.map.value=i.map,n(i.map,e.mapTransform)),i.alphaMap&&(e.alphaMap.value=i.alphaMap,n(i.alphaMap,e.alphaMapTransform)),i.bumpMap&&(e.bumpMap.value=i.bumpMap,n(i.bumpMap,e.bumpMapTransform),e.bumpScale.value=i.bumpScale,i.side===d$1&&(e.bumpScale.value*=-1)),i.normalMap&&(e.normalMap.value=i.normalMap,n(i.normalMap,e.normalMapTransform),e.normalScale.value.copy(i.normalScale),i.side===d$1&&e.normalScale.value.negate()),i.displacementMap&&(e.displacementMap.value=i.displacementMap,n(i.displacementMap,e.displacementMapTransform),e.displacementScale.value=i.displacementScale,e.displacementBias.value=i.displacementBias),i.emissiveMap&&(e.emissiveMap.value=i.emissiveMap,n(i.emissiveMap,e.emissiveMapTransform)),i.specularMap&&(e.specularMap.value=i.specularMap,n(i.specularMap,e.specularMapTransform)),i.alphaTest>0&&(e.alphaTest.value=i.alphaTest);const r=t.get(i),a=r.envMap,o=r.envMapRotation;a&&(e.envMap.value=a,ca.copy(o),ca.x*=-1,ca.y*=-1,ca.z*=-1,a.isCubeTexture&&!1===a.isRenderTargetTexture&&(ca.y*=-1,ca.z*=-1),e.envMapRotation.value.setFromMatrix4(da.makeRotationFromEuler(ca)),e.flipEnvMap.value=a.isCubeTexture&&!1===a.isRenderTargetTexture?-1:1,e.reflectivity.value=i.reflectivity,e.ior.value=i.ior,e.refractionRatio.value=i.refractionRatio),i.lightMap&&(e.lightMap.value=i.lightMap,e.lightMapIntensity.value=i.lightMapIntensity,n(i.lightMap,e.lightMapTransform)),i.aoMap&&(e.aoMap.value=i.aoMap,e.aoMapIntensity.value=i.aoMapIntensity,n(i.aoMap,e.aoMapTransform));}return {refreshFogUniforms:function(t,n){n.color.getRGB(t.fogColor.value,Hn$1(e)),n.isFog?(t.fogNear.value=n.near,t.fogFar.value=n.far):n.isFogExp2&&(t.fogDensity.value=n.density);},refreshMaterialUniforms:function(e,r,a,o,s){r.isMeshBasicMaterial||r.isMeshLambertMaterial?i(e,r):r.isMeshToonMaterial?(i(e,r),function(e,t){t.gradientMap&&(e.gradientMap.value=t.gradientMap);}(e,r)):r.isMeshPhongMaterial?(i(e,r),function(e,t){e.specular.value.copy(t.specular),e.shininess.value=Math.max(t.shininess,1e-4);}(e,r)):r.isMeshStandardMaterial?(i(e,r),function(e,t){e.metalness.value=t.metalness,t.metalnessMap&&(e.metalnessMap.value=t.metalnessMap,n(t.metalnessMap,e.metalnessMapTransform));e.roughness.value=t.roughness,t.roughnessMap&&(e.roughnessMap.value=t.roughnessMap,n(t.roughnessMap,e.roughnessMapTransform));t.envMap&&(e.envMapIntensity.value=t.envMapIntensity);}(e,r),r.isMeshPhysicalMaterial&&function(e,t,i){e.ior.value=t.ior,t.sheen>0&&(e.sheenColor.value.copy(t.sheenColor).multiplyScalar(t.sheen),e.sheenRoughness.value=t.sheenRoughness,t.sheenColorMap&&(e.sheenColorMap.value=t.sheenColorMap,n(t.sheenColorMap,e.sheenColorMapTransform)),t.sheenRoughnessMap&&(e.sheenRoughnessMap.value=t.sheenRoughnessMap,n(t.sheenRoughnessMap,e.sheenRoughnessMapTransform)));t.clearcoat>0&&(e.clearcoat.value=t.clearcoat,e.clearcoatRoughness.value=t.clearcoatRoughness,t.clearcoatMap&&(e.clearcoatMap.value=t.clearcoatMap,n(t.clearcoatMap,e.clearcoatMapTransform)),t.clearcoatRoughnessMap&&(e.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap,n(t.clearcoatRoughnessMap,e.clearcoatRoughnessMapTransform)),t.clearcoatNormalMap&&(e.clearcoatNormalMap.value=t.clearcoatNormalMap,n(t.clearcoatNormalMap,e.clearcoatNormalMapTransform),e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale),t.side===d$1&&e.clearcoatNormalScale.value.negate()));t.dispersion>0&&(e.dispersion.value=t.dispersion);t.iridescence>0&&(e.iridescence.value=t.iridescence,e.iridescenceIOR.value=t.iridescenceIOR,e.iridescenceThicknessMinimum.value=t.iridescenceThicknessRange[0],e.iridescenceThicknessMaximum.value=t.iridescenceThicknessRange[1],t.iridescenceMap&&(e.iridescenceMap.value=t.iridescenceMap,n(t.iridescenceMap,e.iridescenceMapTransform)),t.iridescenceThicknessMap&&(e.iridescenceThicknessMap.value=t.iridescenceThicknessMap,n(t.iridescenceThicknessMap,e.iridescenceThicknessMapTransform)));t.transmission>0&&(e.transmission.value=t.transmission,e.transmissionSamplerMap.value=i.texture,e.transmissionSamplerSize.value.set(i.width,i.height),t.transmissionMap&&(e.transmissionMap.value=t.transmissionMap,n(t.transmissionMap,e.transmissionMapTransform)),e.thickness.value=t.thickness,t.thicknessMap&&(e.thicknessMap.value=t.thicknessMap,n(t.thicknessMap,e.thicknessMapTransform)),e.attenuationDistance.value=t.attenuationDistance,e.attenuationColor.value.copy(t.attenuationColor));t.anisotropy>0&&(e.anisotropyVector.value.set(t.anisotropy*Math.cos(t.anisotropyRotation),t.anisotropy*Math.sin(t.anisotropyRotation)),t.anisotropyMap&&(e.anisotropyMap.value=t.anisotropyMap,n(t.anisotropyMap,e.anisotropyMapTransform)));e.specularIntensity.value=t.specularIntensity,e.specularColor.value.copy(t.specularColor),t.specularColorMap&&(e.specularColorMap.value=t.specularColorMap,n(t.specularColorMap,e.specularColorMapTransform));t.specularIntensityMap&&(e.specularIntensityMap.value=t.specularIntensityMap,n(t.specularIntensityMap,e.specularIntensityMapTransform));}(e,r,s)):r.isMeshMatcapMaterial?(i(e,r),function(e,t){t.matcap&&(e.matcap.value=t.matcap);}(e,r)):r.isMeshDepthMaterial?i(e,r):r.isMeshDistanceMaterial?(i(e,r),function(e,n){const i=t.get(n).light;e.referencePosition.value.setFromMatrixPosition(i.matrixWorld),e.nearDistance.value=i.shadow.camera.near,e.farDistance.value=i.shadow.camera.far;}(e,r)):r.isMeshNormalMaterial?i(e,r):r.isLineBasicMaterial?(function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,t.map&&(e.map.value=t.map,n(t.map,e.mapTransform));}(e,r),r.isLineDashedMaterial&&function(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale;}(e,r)):r.isPointsMaterial?function(e,t,i,r){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.size.value=t.size*i,e.scale.value=.5*r,t.map&&(e.map.value=t.map,n(t.map,e.uvTransform));t.alphaMap&&(e.alphaMap.value=t.alphaMap,n(t.alphaMap,e.alphaMapTransform));t.alphaTest>0&&(e.alphaTest.value=t.alphaTest);}(e,r,a,o):r.isSpriteMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.rotation.value=t.rotation,t.map&&(e.map.value=t.map,n(t.map,e.mapTransform));t.alphaMap&&(e.alphaMap.value=t.alphaMap,n(t.alphaMap,e.alphaMapTransform));t.alphaTest>0&&(e.alphaTest.value=t.alphaTest);}(e,r):r.isShadowMaterial?(e.color.value.copy(r.color),e.opacity.value=r.opacity):r.isShaderMaterial&&(r.uniformsNeedUpdate=!1);}}}function fa(e,t,n,i){let r={},a={},o=[];const s=e.getParameter(e.MAX_UNIFORM_BUFFER_BINDINGS);function l(e,t,n,i){const r=e.value,a=t+"_"+n;if(void 0===i[a])return i[a]="number"==typeof r||"boolean"==typeof r?r:r.clone(),!0;{const e=i[a];if("number"==typeof r||"boolean"==typeof r){if(e!==r)return i[a]=r,!0}else if(!1===e.equals(r))return e.copy(r),!0}return !1}function c(e){const t={boundary:0,storage:0};return "number"==typeof e||"boolean"==typeof e?(t.boundary=4,t.storage=4):e.isVector2?(t.boundary=8,t.storage=8):e.isVector3||e.isColor?(t.boundary=16,t.storage=12):e.isVector4?(t.boundary=16,t.storage=16):e.isMatrix3?(t.boundary=48,t.storage=48):e.isMatrix4?(t.boundary=64,t.storage=64):e.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",e),t}function d(t){const n=t.target;n.removeEventListener("dispose",d);const i=o.indexOf(n.__bindingPointIndex);o.splice(i,1),e.deleteBuffer(r[n.id]),delete r[n.id],delete a[n.id];}return {bind:function(e,t){const n=t.program;i.uniformBlockBinding(e,n);},update:function(n,u){let f=r[n.id];void 0===f&&(!function(e){const t=e.uniforms;let n=0;const i=16;for(let e=0,r=t.length;e<r;e++){const r=Array.isArray(t[e])?t[e]:[t[e]];for(let e=0,t=r.length;e<t;e++){const t=r[e],a=Array.isArray(t.value)?t.value:[t.value];for(let e=0,r=a.length;e<r;e++){const r=c(a[e]),o=n%i,s=o%r.boundary,l=o+s;n+=s,0!==l&&i-l<r.storage&&(n+=i-l),t.__data=new Float32Array(r.storage/Float32Array.BYTES_PER_ELEMENT),t.__offset=n,n+=r.storage;}}}const r=n%i;r>0&&(n+=i-r);e.__size=n,e.__cache={};}(n),f=function(t){const n=function(){for(let e=0;e<s;e++)if(-1===o.indexOf(e))return o.push(e),e;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}();t.__bindingPointIndex=n;const i=e.createBuffer(),r=t.__size,a=t.usage;return e.bindBuffer(e.UNIFORM_BUFFER,i),e.bufferData(e.UNIFORM_BUFFER,r,a),e.bindBuffer(e.UNIFORM_BUFFER,null),e.bindBufferBase(e.UNIFORM_BUFFER,n,i),i}(n),r[n.id]=f,n.addEventListener("dispose",d));const p=u.program;i.updateUBOMapping(n,p);const m=t.render.frame;a[n.id]!==m&&(!function(t){const n=r[t.id],i=t.uniforms,a=t.__cache;e.bindBuffer(e.UNIFORM_BUFFER,n);for(let t=0,n=i.length;t<n;t++){const n=Array.isArray(i[t])?i[t]:[i[t]];for(let i=0,r=n.length;i<r;i++){const r=n[i];if(!0===l(r,t,i,a)){const t=r.__offset,n=Array.isArray(r.value)?r.value:[r.value];let i=0;for(let a=0;a<n.length;a++){const o=n[a],s=c(o);"number"==typeof o||"boolean"==typeof o?(r.__data[0]=o,e.bufferSubData(e.UNIFORM_BUFFER,t+i,r.__data)):o.isMatrix3?(r.__data[0]=o.elements[0],r.__data[1]=o.elements[1],r.__data[2]=o.elements[2],r.__data[3]=0,r.__data[4]=o.elements[3],r.__data[5]=o.elements[4],r.__data[6]=o.elements[5],r.__data[7]=0,r.__data[8]=o.elements[6],r.__data[9]=o.elements[7],r.__data[10]=o.elements[8],r.__data[11]=0):(o.toArray(r.__data,i),i+=s.storage/Float32Array.BYTES_PER_ELEMENT);}e.bufferSubData(e.UNIFORM_BUFFER,t,r.__data);}}}e.bindBuffer(e.UNIFORM_BUFFER,null);}(n),a[n.id]=m);},dispose:function(){for(const t in r)e.deleteBuffer(r[t]);o=[],r={},a={};}}}class pa{constructor(t$1={}){const{canvas:n=si$1(),context:i=null,depth:a=!0,stencil:o=!1,alpha:s=!1,antialias:l=!1,premultipliedAlpha:c=!0,preserveDrawingBuffer:f=!1,powerPreference:p="default",failIfMajorPerformanceCaveat:h=!1,reverseDepthBuffer:_=!1}=t$1;let v;if(this.isWebGLRenderer=!0,null!==i){if("undefined"!=typeof WebGLRenderingContext&&i instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");v=i.getContextAttributes().alpha;}else v=s;const E=new Uint32Array(4),M=new Int32Array(4);let x=null,R=null;const A=[],b=[];this.domElement=n,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=Ge,this.toneMapping=$,this.toneMappingExposure=1;const C=this;let L=!1,P=0,w=0,D=null,y=-1,N=null;const O=new wi$1,F=new wi$1;let G=null;const V=new $r$1(0);let z=0,W=n.width,X=n.height,Y=1,j=null,K=null;const q=new wi$1(0,0,W,X),Z=new wi$1(0,0,W,X);let $$1=!1;const Q=new ra$1;let J=!1,ee=!1;const te=new nr$1,ne=new nr$1,ie=new Ii$1,re=new wi$1,ae={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let oe=!1;function se(){return null===D?Y:1}let le,ce,de,ue,fe,pe,he,_e,ve,Ee,Se,Te,Me,xe,Re,Ae,be,Ce,Le,Pe,Ue,we,De,ye,Ie=i;function Ne(e,t){return n.getContext(e,t)}try{const e={alpha:!0,depth:a,stencil:o,antialias:l,premultipliedAlpha:c,preserveDrawingBuffer:f,powerPreference:p,failIfMajorPerformanceCaveat:h};if("setAttribute"in n&&n.setAttribute("data-engine",`three.js r${t}`),n.addEventListener("webglcontextlost",Be,!1),n.addEventListener("webglcontextrestored",He,!1),n.addEventListener("webglcontextcreationerror",Ge$1,!1),null===Ie){const t="webgl2";if(Ie=Ne(t,e),null===Ie)throw Ne(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(e){throw console.error("THREE.WebGLRenderer: "+e.message),e}function Oe(){le=new si(Ie),le.init(),we=new ra(Ie,le),ce=new Gn(Ie,le,t$1,we),de=new na(Ie,le),ce.reverseDepthBuffer&&_&&de.buffers.depth.setReversed(!0),ue=new di(Ie),fe=new kr,pe=new ia(Ie,le,de,fe,ce,we,ue),he=new zn(C),_e=new oi(C),ve=new Un(Ie),De=new Bn(Ie,ve),Ee=new li(Ie,ve,ue,De),Se=new fi(Ie,Ee,ve,ue),Le=new ui(Ie,ce,pe),Ae=new Vn(fe),Te=new zr(C,he,_e,le,ce,De,Ae),Me=new ua(C,fe),xe=new jr,Re=new Jr(le),Ce=new Fn(C,he,_e,de,Se,v,c),be=new ea(C,Se,ce),ye=new fa(Ie,ue,ce,de),Pe=new Hn(Ie,le,ue),Ue=new ci(Ie,le,ue),ue.programs=Te.programs,C.capabilities=ce,C.extensions=le,C.properties=fe,C.renderLists=xe,C.shadowMap=be,C.state=de,C.info=ue;}Oe();const Fe=new la(C,Ie);function Be(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),L=!0;}function He(){console.log("THREE.WebGLRenderer: Context Restored."),L=!1;const e=ue.autoReset,t=be.enabled,n=be.autoUpdate,i=be.needsUpdate,r=be.type;Oe(),ue.autoReset=e,be.enabled=t,be.autoUpdate=n,be.needsUpdate=i,be.type=r;}function Ge$1(e){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",e.statusMessage);}function Ve(e){const t=e.target;t.removeEventListener("dispose",Ve),function(e){((function(e){const t=fe.get(e).programs;void 0!==t&&(t.forEach((function(e){Te.releaseProgram(e);})),e.isShaderMaterial&&Te.releaseShaderCache(e));}))(e),fe.remove(e);}(t);}function ze(e,t,n){!0===e.transparent&&e.side===p$1&&!1===e.forceSinglePass?(e.side=d$1,e.needsUpdate=!0,Qe(e,t,n),e.side=u$1,e.needsUpdate=!0,Qe(e,t,n),e.side=p$1):Qe(e,t,n);}this.xr=Fe,this.getContext=function(){return Ie},this.getContextAttributes=function(){return Ie.getContextAttributes()},this.forceContextLoss=function(){const e=le.get("WEBGL_lose_context");e&&e.loseContext();},this.forceContextRestore=function(){const e=le.get("WEBGL_lose_context");e&&e.restoreContext();},this.getPixelRatio=function(){return Y},this.setPixelRatio=function(e){void 0!==e&&(Y=e,this.setSize(W,X,!1));},this.getSize=function(e){return e.set(W,X)},this.setSize=function(e,t,i=!0){Fe.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(W=e,X=t,n.width=Math.floor(e*Y),n.height=Math.floor(t*Y),!0===i&&(n.style.width=e+"px",n.style.height=t+"px"),this.setViewport(0,0,e,t));},this.getDrawingBufferSize=function(e){return e.set(W*Y,X*Y).floor()},this.setDrawingBufferSize=function(e,t,i){W=e,X=t,Y=i,n.width=Math.floor(e*i),n.height=Math.floor(t*i),this.setViewport(0,0,e,t);},this.getCurrentViewport=function(e){return e.copy(O)},this.getViewport=function(e){return e.copy(q)},this.setViewport=function(e,t,n,i){e.isVector4?q.set(e.x,e.y,e.z,e.w):q.set(e,t,n,i),de.viewport(O.copy(q).multiplyScalar(Y).round());},this.getScissor=function(e){return e.copy(Z)},this.setScissor=function(e,t,n,i){e.isVector4?Z.set(e.x,e.y,e.z,e.w):Z.set(e,t,n,i),de.scissor(F.copy(Z).multiplyScalar(Y).round());},this.getScissorTest=function(){return $$1},this.setScissorTest=function(e){de.setScissorTest($$1=e);},this.setOpaqueSort=function(e){j=e;},this.setTransparentSort=function(e){K=e;},this.getClearColor=function(e){return e.copy(Ce.getClearColor())},this.setClearColor=function(){Ce.setClearColor.apply(Ce,arguments);},this.getClearAlpha=function(){return Ce.getClearAlpha()},this.setClearAlpha=function(){Ce.setClearAlpha.apply(Ce,arguments);},this.clear=function(e=!0,t=!0,n=!0){let i=0;if(e){let e=!1;if(null!==D){const t=D.texture.format;e=t===Gt||t===Yt||t===Jt;}if(e){const e=D.texture.type,t=e===Tt||e===kt||e===It||e===Ft||e===Pt||e===Ot,n=Ce.getClearColor(),i=Ce.getClearAlpha(),r=n.r,a=n.g,o=n.b;t?(E[0]=r,E[1]=a,E[2]=o,E[3]=i,Ie.clearBufferuiv(Ie.COLOR,0,E)):(M[0]=r,M[1]=a,M[2]=o,M[3]=i,Ie.clearBufferiv(Ie.COLOR,0,M));}else i|=Ie.COLOR_BUFFER_BIT;}t&&(i|=Ie.DEPTH_BUFFER_BIT),n&&(i|=Ie.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),Ie.clear(i);},this.clearColor=function(){this.clear(!0,!1,!1);},this.clearDepth=function(){this.clear(!1,!0,!1);},this.clearStencil=function(){this.clear(!1,!1,!0);},this.dispose=function(){n.removeEventListener("webglcontextlost",Be,!1),n.removeEventListener("webglcontextrestored",He,!1),n.removeEventListener("webglcontextcreationerror",Ge$1,!1),Ce.dispose(),xe.dispose(),Re.dispose(),fe.dispose(),he.dispose(),_e.dispose(),Se.dispose(),De.dispose(),ye.dispose(),Te.dispose(),Fe.dispose(),Fe.removeEventListener("sessionstart",We),Fe.removeEventListener("sessionend",Xe),Ye.stop();},this.renderBufferDirect=function(e,t,n,i,r,a){null===t&&(t=ae);const o=r.isMesh&&r.matrixWorld.determinant()<0,s=function(e,t,n,i,r){!0!==t.isScene&&(t=ae);pe.resetTextureUnits();const a=t.fog,o=i.isMeshStandardMaterial?t.environment:null,s=null===D?C.outputColorSpace:!0===D.isXRRenderTarget?D.texture.colorSpace:$e,l=(i.isMeshStandardMaterial?_e:he).get(i.envMap||o),c=!0===i.vertexColors&&!!n.attributes.color&&4===n.attributes.color.itemSize,d=!!n.attributes.tangent&&(!!i.normalMap||i.anisotropy>0),u=!!n.morphAttributes.position,f=!!n.morphAttributes.normal,p=!!n.morphAttributes.color;let m=$;i.toneMapped&&(null!==D&&!0!==D.isXRRenderTarget||(m=C.toneMapping));const h=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,_=void 0!==h?h.length:0,g=fe.get(i),v=R.state.lights;if(!0===J&&(!0===ee||e!==N)){const t=e===N&&i.id===y;Ae.setState(i,e,t);}let E=!1;i.version===g.__version?g.needsLights&&g.lightsStateVersion!==v.state.version||g.outputColorSpace!==s||r.isBatchedMesh&&!1===g.batching?E=!0:r.isBatchedMesh||!0!==g.batching?r.isBatchedMesh&&!0===g.batchingColor&&null===r.colorTexture||r.isBatchedMesh&&!1===g.batchingColor&&null!==r.colorTexture||r.isInstancedMesh&&!1===g.instancing?E=!0:r.isInstancedMesh||!0!==g.instancing?r.isSkinnedMesh&&!1===g.skinning?E=!0:r.isSkinnedMesh||!0!==g.skinning?r.isInstancedMesh&&!0===g.instancingColor&&null===r.instanceColor||r.isInstancedMesh&&!1===g.instancingColor&&null!==r.instanceColor||r.isInstancedMesh&&!0===g.instancingMorph&&null===r.morphTexture||r.isInstancedMesh&&!1===g.instancingMorph&&null!==r.morphTexture||g.envMap!==l||!0===i.fog&&g.fog!==a?E=!0:void 0===g.numClippingPlanes||g.numClippingPlanes===Ae.numPlanes&&g.numIntersection===Ae.numIntersection?(g.vertexAlphas!==c||g.vertexTangents!==d||g.morphTargets!==u||g.morphNormals!==f||g.morphColors!==p||g.toneMapping!==m||g.morphTargetsCount!==_)&&(E=!0):E=!0:E=!0:E=!0:E=!0:(E=!0,g.__version=i.version);let S=g.currentProgram;!0===E&&(S=Qe(i,t,r));let T=!1,M=!1,x=!1;const A=S.getUniforms(),b=g.uniforms;de.useProgram(S.program)&&(T=!0,M=!0,x=!0);i.id!==y&&(y=i.id,M=!0);if(T||N!==e){de.buffers.depth.getReversed()?(te.copy(e.projectionMatrix),oi$1(te),ai$1(te),A.setValue(Ie,"projectionMatrix",te)):A.setValue(Ie,"projectionMatrix",e.projectionMatrix),A.setValue(Ie,"viewMatrix",e.matrixWorldInverse);const t=A.map.cameraPosition;void 0!==t&&t.setValue(Ie,ie.setFromMatrixPosition(e.matrixWorld)),ce.logarithmicDepthBuffer&&A.setValue(Ie,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial)&&A.setValue(Ie,"isOrthographic",!0===e.isOrthographicCamera),N!==e&&(N=e,M=!0,x=!0);}if(r.isSkinnedMesh){A.setOptional(Ie,r,"bindMatrix"),A.setOptional(Ie,r,"bindMatrixInverse");const e=r.skeleton;e&&(null===e.boneTexture&&e.computeBoneTexture(),A.setValue(Ie,"boneTexture",e.boneTexture,pe));}r.isBatchedMesh&&(A.setOptional(Ie,r,"batchingTexture"),A.setValue(Ie,"batchingTexture",r._matricesTexture,pe),A.setOptional(Ie,r,"batchingIdTexture"),A.setValue(Ie,"batchingIdTexture",r._indirectTexture,pe),A.setOptional(Ie,r,"batchingColorTexture"),null!==r._colorsTexture&&A.setValue(Ie,"batchingColorTexture",r._colorsTexture,pe));const L=n.morphAttributes;void 0===L.position&&void 0===L.normal&&void 0===L.color||Le.update(r,n,S);(M||g.receiveShadow!==r.receiveShadow)&&(g.receiveShadow=r.receiveShadow,A.setValue(Ie,"receiveShadow",r.receiveShadow));i.isMeshGouraudMaterial&&null!==i.envMap&&(b.envMap.value=l,b.flipEnvMap.value=l.isCubeTexture&&!1===l.isRenderTargetTexture?-1:1);i.isMeshStandardMaterial&&null===i.envMap&&null!==t.environment&&(b.envMapIntensity.value=t.environmentIntensity);M&&(A.setValue(Ie,"toneMappingExposure",C.toneMappingExposure),g.needsLights&&(w=x,(P=b).ambientLightColor.needsUpdate=w,P.lightProbe.needsUpdate=w,P.directionalLights.needsUpdate=w,P.directionalLightShadows.needsUpdate=w,P.pointLights.needsUpdate=w,P.pointLightShadows.needsUpdate=w,P.spotLights.needsUpdate=w,P.spotLightShadows.needsUpdate=w,P.rectAreaLights.needsUpdate=w,P.hemisphereLights.needsUpdate=w),a&&!0===i.fog&&Me.refreshFogUniforms(b,a),Me.refreshMaterialUniforms(b,i,Y,X,R.state.transmissionRenderTarget[e.id]),gr.upload(Ie,Je(g),b,pe));var P,w;i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(gr.upload(Ie,Je(g),b,pe),i.uniformsNeedUpdate=!1);i.isSpriteMaterial&&A.setValue(Ie,"center",r.center);if(A.setValue(Ie,"modelViewMatrix",r.modelViewMatrix),A.setValue(Ie,"normalMatrix",r.normalMatrix),A.setValue(Ie,"modelMatrix",r.matrixWorld),i.isShaderMaterial||i.isRawShaderMaterial){const e=i.uniformsGroups;for(let t=0,n=e.length;t<n;t++){const n=e[t];ye.update(n,S),ye.bind(n,S);}}return S}(e,t,n,i,r);de.setMaterial(i,o);let l=n.index,c=1;if(!0===i.wireframe){if(l=Ee.getWireframeAttribute(n),void 0===l)return;c=2;}const d=n.drawRange,u=n.attributes.position;let f=d.start*c,p=(d.start+d.count)*c;null!==a&&(f=Math.max(f,a.start*c),p=Math.min(p,(a.start+a.count)*c)),null!==l?(f=Math.max(f,0),p=Math.min(p,l.count)):null!=u&&(f=Math.max(f,0),p=Math.min(p,u.count));const m=p-f;if(m<0||m===1/0)return;let h;De.setup(r,i,s,n,l);let _=Pe;if(null!==l&&(h=ve.get(l),_=Ue,_.setIndex(h)),r.isMesh)!0===i.wireframe?(de.setLineWidth(i.wireframeLinewidth*se()),_.setMode(Ie.LINES)):_.setMode(Ie.TRIANGLES);else if(r.isLine){let e=i.linewidth;void 0===e&&(e=1),de.setLineWidth(e*se()),r.isLineSegments?_.setMode(Ie.LINES):r.isLineLoop?_.setMode(Ie.LINE_LOOP):_.setMode(Ie.LINE_STRIP);}else r.isPoints?_.setMode(Ie.POINTS):r.isSprite&&_.setMode(Ie.TRIANGLES);if(r.isBatchedMesh)if(null!==r._multiDrawInstances)_.renderMultiDrawInstances(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount,r._multiDrawInstances);else if(le.get("WEBGL_multi_draw"))_.renderMultiDraw(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount);else {const e=r._multiDrawStarts,t=r._multiDrawCounts,n=r._multiDrawCount,a=l?ve.get(l).bytesPerElement:1,o=fe.get(i).currentProgram.getUniforms();for(let i=0;i<n;i++)o.setValue(Ie,"_gl_DrawID",i),_.render(e[i]/a,t[i]);}else if(r.isInstancedMesh)_.renderInstances(f,m,r.count);else if(n.isInstancedBufferGeometry){const e=void 0!==n._maxInstanceCount?n._maxInstanceCount:1/0,t=Math.min(n.instanceCount,e);_.renderInstances(f,m,t);}else _.render(f,m);},this.compile=function(e,t,n=null){null===n&&(n=e),R=Re.get(n),R.init(t),b.push(R),n.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&(R.pushLight(e),e.castShadow&&R.pushShadow(e));})),e!==n&&e.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&(R.pushLight(e),e.castShadow&&R.pushShadow(e));})),R.setupLights();const i=new Set;return e.traverse((function(e){if(!(e.isMesh||e.isPoints||e.isLine||e.isSprite))return;const t=e.material;if(t)if(Array.isArray(t))for(let r=0;r<t.length;r++){const a=t[r];ze(a,n,e),i.add(a);}else ze(t,n,e),i.add(t);})),b.pop(),R=null,i},this.compileAsync=function(e,t,n=null){const i=this.compile(e,t,n);return new Promise((t=>{function n(){i.forEach((function(e){fe.get(e).currentProgram.isReady()&&i.delete(e);})),0!==i.size?setTimeout(n,10):t(e);}null!==le.get("KHR_parallel_shader_compile")?n():setTimeout(n,10);}))};let ke=null;function We(){Ye.stop();}function Xe(){Ye.start();}const Ye=new Pn;function je(e,t,n,i){if(!1===e.visible)return;if(e.layers.test(t.layers))if(e.isGroup)n=e.renderOrder;else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)R.pushLight(e),e.castShadow&&R.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||Q.intersectsSprite(e)){i&&re.setFromMatrixPosition(e.matrixWorld).applyMatrix4(ne);const t=Se.update(e),r=e.material;r.visible&&x.push(e,t,r,n,re.z,null);}}else if((e.isMesh||e.isLine||e.isPoints)&&(!e.frustumCulled||Q.intersectsObject(e))){const t=Se.update(e),r=e.material;if(i&&(void 0!==e.boundingSphere?(null===e.boundingSphere&&e.computeBoundingSphere(),re.copy(e.boundingSphere.center)):(null===t.boundingSphere&&t.computeBoundingSphere(),re.copy(t.boundingSphere.center)),re.applyMatrix4(e.matrixWorld).applyMatrix4(ne)),Array.isArray(r)){const i=t.groups;for(let a=0,o=i.length;a<o;a++){const o=i[a],s=r[o.materialIndex];s&&s.visible&&x.push(e,t,s,n,re.z,o);}}else r.visible&&x.push(e,t,r,n,re.z,null);}const r=e.children;for(let e=0,a=r.length;e<a;e++)je(r[e],t,n,i);}function Ke(e,t,n,i){const r=e.opaque,a=e.transmissive,o=e.transparent;R.setupLightsView(n),!0===J&&Ae.setGlobalState(C.clippingPlanes,n),i&&de.viewport(O.copy(i)),r.length>0&&Ze(r,t,n),a.length>0&&Ze(a,t,n),o.length>0&&Ze(o,t,n),de.buffers.depth.setTest(!0),de.buffers.depth.setMask(!0),de.buffers.color.setMask(!0),de.setPolygonOffset(!1);}function qe(e,t,n,i){if(null!==(!0===n.isScene?n.overrideMaterial:null))return;void 0===R.state.transmissionRenderTarget[i.id]&&(R.state.transmissionRenderTarget[i.id]=new Si$1(1,1,{generateMipmaps:!0,type:le.has("EXT_color_buffer_half_float")||le.has("EXT_color_buffer_float")?Rt:Tt,minFilter:_t,samples:4,stencilBuffer:o,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:ui$1.workingColorSpace}));const r=R.state.transmissionRenderTarget[i.id],a=i.viewport||O;r.setSize(a.z,a.w);const s=C.getRenderTarget();C.setRenderTarget(r),C.getClearColor(V),z=C.getClearAlpha(),z<1&&C.setClearColor(16777215,.5),C.clear(),oe&&Ce.render(n);const l=C.toneMapping;C.toneMapping=$;const c=i.viewport;if(void 0!==i.viewport&&(i.viewport=void 0),R.setupLightsView(i),!0===J&&Ae.setGlobalState(C.clippingPlanes,i),Ze(e,n,i),pe.updateMultisampleRenderTarget(r),pe.updateRenderTargetMipmap(r),!1===le.has("WEBGL_multisampled_render_to_texture")){let e=!1;for(let r=0,a=t.length;r<a;r++){const a=t[r],o=a.object,s=a.geometry,l=a.material,c=a.group;if(l.side===p$1&&o.layers.test(i.layers)){const t=l.side;l.side=d$1,l.needsUpdate=!0,$e$1(o,n,i,s,l,c),l.side=t,l.needsUpdate=!0,e=!0;}}!0===e&&(pe.updateMultisampleRenderTarget(r),pe.updateRenderTargetMipmap(r));}C.setRenderTarget(s),C.setClearColor(V,z),void 0!==c&&(i.viewport=c),C.toneMapping=l;}function Ze(e,t,n){const i=!0===t.isScene?t.overrideMaterial:null;for(let r=0,a=e.length;r<a;r++){const a=e[r],o=a.object,s=a.geometry,l=null===i?a.material:i,c=a.group;o.layers.test(n.layers)&&$e$1(o,t,n,s,l,c);}}function $e$1(e,t,n,i,r,a){e.onBeforeRender(C,t,n,i,r,a),e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),r.onBeforeRender(C,t,n,i,e,a),!0===r.transparent&&r.side===p$1&&!1===r.forceSinglePass?(r.side=d$1,r.needsUpdate=!0,C.renderBufferDirect(n,t,i,r,e,a),r.side=u$1,r.needsUpdate=!0,C.renderBufferDirect(n,t,i,r,e,a),r.side=p$1):C.renderBufferDirect(n,t,i,r,e,a),e.onAfterRender(C,t,n,i,r,a);}function Qe(e,t,n){!0!==t.isScene&&(t=ae);const i=fe.get(e),r=R.state.lights,a=R.state.shadowsArray,o=r.state.version,s=Te.getParameters(e,r.state,a,t,n),l=Te.getProgramCacheKey(s);let c=i.programs;i.environment=e.isMeshStandardMaterial?t.environment:null,i.fog=t.fog,i.envMap=(e.isMeshStandardMaterial?_e:he).get(e.envMap||i.environment),i.envMapRotation=null!==i.environment&&null===e.envMap?t.environmentRotation:e.envMapRotation,void 0===c&&(e.addEventListener("dispose",Ve),c=new Map,i.programs=c);let d=c.get(l);if(void 0!==d){if(i.currentProgram===d&&i.lightsStateVersion===o)return et(e,s),d}else s.uniforms=Te.getUniforms(e),e.onBeforeCompile(s,C),d=Te.acquireProgram(s,l),c.set(l,d),i.uniforms=s.uniforms;const u=i.uniforms;return (e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(u.clippingPlanes=Ae.uniform),et(e,s),i.needsLights=function(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&!0===e.lights}(e),i.lightsStateVersion=o,i.needsLights&&(u.ambientLightColor.value=r.state.ambient,u.lightProbe.value=r.state.probe,u.directionalLights.value=r.state.directional,u.directionalLightShadows.value=r.state.directionalShadow,u.spotLights.value=r.state.spot,u.spotLightShadows.value=r.state.spotShadow,u.rectAreaLights.value=r.state.rectArea,u.ltc_1.value=r.state.rectAreaLTC1,u.ltc_2.value=r.state.rectAreaLTC2,u.pointLights.value=r.state.point,u.pointLightShadows.value=r.state.pointShadow,u.hemisphereLights.value=r.state.hemi,u.directionalShadowMap.value=r.state.directionalShadowMap,u.directionalShadowMatrix.value=r.state.directionalShadowMatrix,u.spotShadowMap.value=r.state.spotShadowMap,u.spotLightMatrix.value=r.state.spotLightMatrix,u.spotLightMap.value=r.state.spotLightMap,u.pointShadowMap.value=r.state.pointShadowMap,u.pointShadowMatrix.value=r.state.pointShadowMatrix),i.currentProgram=d,i.uniformsList=null,d}function Je(e){if(null===e.uniformsList){const t=e.currentProgram.getUniforms();e.uniformsList=gr.seqWithValue(t.seq,e.uniforms);}return e.uniformsList}function et(e,t){const n=fe.get(e);n.outputColorSpace=t.outputColorSpace,n.batching=t.batching,n.batchingColor=t.batchingColor,n.instancing=t.instancing,n.instancingColor=t.instancingColor,n.instancingMorph=t.instancingMorph,n.skinning=t.skinning,n.morphTargets=t.morphTargets,n.morphNormals=t.morphNormals,n.morphColors=t.morphColors,n.morphTargetsCount=t.morphTargetsCount,n.numClippingPlanes=t.numClippingPlanes,n.numIntersection=t.numClipIntersection,n.vertexAlphas=t.vertexAlphas,n.vertexTangents=t.vertexTangents,n.toneMapping=t.toneMapping;}Ye.setAnimationLoop((function(e){ke&&ke(e);})),"undefined"!=typeof self&&Ye.setContext(self),this.setAnimationLoop=function(e){ke=e,Fe.setAnimationLoop(e),null===e?Ye.stop():Ye.start();},Fe.addEventListener("sessionstart",We),Fe.addEventListener("sessionend",Xe),this.render=function(e,t){if(void 0!==t&&!0!==t.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===L)return;if(!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),null===t.parent&&!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),!0===Fe.enabled&&!0===Fe.isPresenting&&(!0===Fe.cameraAutoUpdate&&Fe.updateCamera(t),t=Fe.getCamera()),!0===e.isScene&&e.onBeforeRender(C,e,t,D),R=Re.get(e,b.length),R.init(t),b.push(R),ne.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),Q.setFromProjectionMatrix(ne),ee=this.localClippingEnabled,J=Ae.init(this.clippingPlanes,ee),x=xe.get(e,A.length),x.init(),A.push(x),!0===Fe.enabled&&!0===Fe.isPresenting){const e=C.xr.getDepthSensingMesh();null!==e&&je(e,t,-1/0,C.sortObjects);}je(e,t,0,C.sortObjects),x.finish(),!0===C.sortObjects&&x.sort(j,K),oe=!1===Fe.enabled||!1===Fe.isPresenting||!1===Fe.hasDepthSensing(),oe&&Ce.addToRenderList(x,e),this.info.render.frame++,!0===J&&Ae.beginShadows();const n=R.state.shadowsArray;be.render(n,e,t),!0===J&&Ae.endShadows(),!0===this.info.autoReset&&this.info.reset();const i=x.opaque,r=x.transmissive;if(R.setupLights(),t.isArrayCamera){const n=t.cameras;if(r.length>0)for(let t=0,a=n.length;t<a;t++){qe(i,r,e,n[t]);}oe&&Ce.render(e);for(let t=0,i=n.length;t<i;t++){const i=n[t];Ke(x,e,i,i.viewport);}}else r.length>0&&qe(i,r,e,t),oe&&Ce.render(e),Ke(x,e,t);null!==D&&(pe.updateMultisampleRenderTarget(D),pe.updateRenderTargetMipmap(D)),!0===e.isScene&&e.onAfterRender(C,e,t),De.resetDefaultState(),y=-1,N=null,b.pop(),b.length>0?(R=b[b.length-1],!0===J&&Ae.setGlobalState(C.clippingPlanes,R.state.camera)):R=null,A.pop(),x=A.length>0?A[A.length-1]:null;},this.getActiveCubeFace=function(){return P},this.getActiveMipmapLevel=function(){return w},this.getRenderTarget=function(){return D},this.setRenderTargetTextures=function(e,t,n){fe.get(e.texture).__webglTexture=t,fe.get(e.depthTexture).__webglTexture=n;const i=fe.get(e);i.__hasExternalTextures=!0,i.__autoAllocateDepthBuffer=void 0===n,i.__autoAllocateDepthBuffer||!0===le.has("WEBGL_multisampled_render_to_texture")&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),i.__useRenderToTexture=!1);},this.setRenderTargetFramebuffer=function(e,t){const n=fe.get(e);n.__webglFramebuffer=t,n.__useDefaultFramebuffer=void 0===t;},this.setRenderTarget=function(e,t=0,n=0){D=e,P=t,w=n;let i=!0,r=null,a=!1,o=!1;if(e){const s=fe.get(e);if(void 0!==s.__useDefaultFramebuffer)de.bindFramebuffer(Ie.FRAMEBUFFER,null),i=!1;else if(void 0===s.__webglFramebuffer)pe.setupRenderTarget(e);else if(s.__hasExternalTextures)pe.rebindTextures(e,fe.get(e.texture).__webglTexture,fe.get(e.depthTexture).__webglTexture);else if(e.depthBuffer){const t=e.depthTexture;if(s.__boundDepthTexture!==t){if(null!==t&&fe.has(t)&&(e.width!==t.image.width||e.height!==t.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");pe.setupDepthRenderbuffer(e);}}const l=e.texture;(l.isData3DTexture||l.isDataArrayTexture||l.isCompressedArrayTexture)&&(o=!0);const c=fe.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget?(r=Array.isArray(c[t])?c[t][n]:c[t],a=!0):r=e.samples>0&&!1===pe.useMultisampledRTT(e)?fe.get(e).__webglMultisampledFramebuffer:Array.isArray(c)?c[n]:c,O.copy(e.viewport),F.copy(e.scissor),G=e.scissorTest;}else O.copy(q).multiplyScalar(Y).floor(),F.copy(Z).multiplyScalar(Y).floor(),G=$$1;if(de.bindFramebuffer(Ie.FRAMEBUFFER,r)&&i&&de.drawBuffers(e,r),de.viewport(O),de.scissor(F),de.setScissorTest(G),a){const i=fe.get(e.texture);Ie.framebufferTexture2D(Ie.FRAMEBUFFER,Ie.COLOR_ATTACHMENT0,Ie.TEXTURE_CUBE_MAP_POSITIVE_X+t,i.__webglTexture,n);}else if(o){const i=fe.get(e.texture),r=t||0;Ie.framebufferTextureLayer(Ie.FRAMEBUFFER,Ie.COLOR_ATTACHMENT0,i.__webglTexture,n||0,r);}y=-1;},this.readRenderTargetPixels=function(e,t,n,i,r,a,o){if(!e||!e.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let s=fe.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&void 0!==o&&(s=s[o]),s){de.bindFramebuffer(Ie.FRAMEBUFFER,s);try{const o=e.texture,s=o.format,l=o.type;if(!ce.textureFormatReadable(s))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!ce.textureTypeReadable(l))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");t>=0&&t<=e.width-i&&n>=0&&n<=e.height-r&&Ie.readPixels(t,n,i,r,we.convert(s),we.convert(l),a);}finally{const e=null!==D?fe.get(D).__webglFramebuffer:null;de.bindFramebuffer(Ie.FRAMEBUFFER,e);}}},this.readRenderTargetPixelsAsync=async function(e,t,n,i,r,a,o){if(!e||!e.isWebGLRenderTarget)throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let s=fe.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&void 0!==o&&(s=s[o]),s){const o=e.texture,l=o.format,c=o.type;if(!ce.textureFormatReadable(l))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!ce.textureTypeReadable(c))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(t>=0&&t<=e.width-i&&n>=0&&n<=e.height-r){de.bindFramebuffer(Ie.FRAMEBUFFER,s);const e=Ie.createBuffer();Ie.bindBuffer(Ie.PIXEL_PACK_BUFFER,e),Ie.bufferData(Ie.PIXEL_PACK_BUFFER,a.byteLength,Ie.STREAM_READ),Ie.readPixels(t,n,i,r,we.convert(l),we.convert(c),0);const o=null!==D?fe.get(D).__webglFramebuffer:null;de.bindFramebuffer(Ie.FRAMEBUFFER,o);const d=Ie.fenceSync(Ie.SYNC_GPU_COMMANDS_COMPLETE,0);return Ie.flush(),await ni$1(Ie,d,4),Ie.bindBuffer(Ie.PIXEL_PACK_BUFFER,e),Ie.getBufferSubData(Ie.PIXEL_PACK_BUFFER,0,a),Ie.deleteBuffer(e),Ie.deleteSync(d),a}throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(e,t=null,n=0){!0!==e.isTexture&&(ri$1("WebGLRenderer: copyFramebufferToTexture function signature has changed."),t=arguments[0]||null,e=arguments[1]);const i=Math.pow(2,-n),r=Math.floor(e.image.width*i),a=Math.floor(e.image.height*i),o=null!==t?t.x:0,s=null!==t?t.y:0;pe.setTexture2D(e,0),Ie.copyTexSubImage2D(Ie.TEXTURE_2D,n,0,0,o,s,r,a),de.unbindTexture();};const tt=Ie.createFramebuffer(),nt=Ie.createFramebuffer();this.copyTextureToTexture=function(e,t,n=null,i=null,r=0,a=null){let o,s,l,c,d,u,f,p,m;!0!==e.isTexture&&(ri$1("WebGLRenderer: copyTextureToTexture function signature has changed."),i=arguments[0]||null,e=arguments[1],t=arguments[2],a=arguments[3]||0,n=null),null===a&&(0!==r?(ri$1("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),a=r,r=0):a=0);const h=e.isCompressedTexture?e.mipmaps[a]:e.image;if(null!==n)o=n.max.x-n.min.x,s=n.max.y-n.min.y,l=n.isBox3?n.max.z-n.min.z:1,c=n.min.x,d=n.min.y,u=n.isBox3?n.min.z:0;else {const t=Math.pow(2,-r);o=Math.floor(h.width*t),s=Math.floor(h.height*t),l=e.isDataArrayTexture?h.depth:e.isData3DTexture?Math.floor(h.depth*t):1,c=0,d=0,u=0;}null!==i?(f=i.x,p=i.y,m=i.z):(f=0,p=0,m=0);const _=we.convert(t.format),g=we.convert(t.type);let v;t.isData3DTexture?(pe.setTexture3D(t,0),v=Ie.TEXTURE_3D):t.isDataArrayTexture||t.isCompressedArrayTexture?(pe.setTexture2DArray(t,0),v=Ie.TEXTURE_2D_ARRAY):(pe.setTexture2D(t,0),v=Ie.TEXTURE_2D),Ie.pixelStorei(Ie.UNPACK_FLIP_Y_WEBGL,t.flipY),Ie.pixelStorei(Ie.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),Ie.pixelStorei(Ie.UNPACK_ALIGNMENT,t.unpackAlignment);const E=Ie.getParameter(Ie.UNPACK_ROW_LENGTH),S=Ie.getParameter(Ie.UNPACK_IMAGE_HEIGHT),T=Ie.getParameter(Ie.UNPACK_SKIP_PIXELS),M=Ie.getParameter(Ie.UNPACK_SKIP_ROWS),x=Ie.getParameter(Ie.UNPACK_SKIP_IMAGES);Ie.pixelStorei(Ie.UNPACK_ROW_LENGTH,h.width),Ie.pixelStorei(Ie.UNPACK_IMAGE_HEIGHT,h.height),Ie.pixelStorei(Ie.UNPACK_SKIP_PIXELS,c),Ie.pixelStorei(Ie.UNPACK_SKIP_ROWS,d),Ie.pixelStorei(Ie.UNPACK_SKIP_IMAGES,u);const R=e.isDataArrayTexture||e.isData3DTexture,A=t.isDataArrayTexture||t.isData3DTexture;if(e.isDepthTexture){const n=fe.get(e),i=fe.get(t),h=fe.get(n.__renderTarget),_=fe.get(i.__renderTarget);de.bindFramebuffer(Ie.READ_FRAMEBUFFER,h.__webglFramebuffer),de.bindFramebuffer(Ie.DRAW_FRAMEBUFFER,_.__webglFramebuffer);for(let n=0;n<l;n++)R&&(Ie.framebufferTextureLayer(Ie.READ_FRAMEBUFFER,Ie.COLOR_ATTACHMENT0,fe.get(e).__webglTexture,r,u+n),Ie.framebufferTextureLayer(Ie.DRAW_FRAMEBUFFER,Ie.COLOR_ATTACHMENT0,fe.get(t).__webglTexture,a,m+n)),Ie.blitFramebuffer(c,d,o,s,f,p,o,s,Ie.DEPTH_BUFFER_BIT,Ie.NEAREST);de.bindFramebuffer(Ie.READ_FRAMEBUFFER,null),de.bindFramebuffer(Ie.DRAW_FRAMEBUFFER,null);}else if(0!==r||e.isRenderTargetTexture||fe.has(e)){const n=fe.get(e),i=fe.get(t);de.bindFramebuffer(Ie.READ_FRAMEBUFFER,tt),de.bindFramebuffer(Ie.DRAW_FRAMEBUFFER,nt);for(let e=0;e<l;e++)R?Ie.framebufferTextureLayer(Ie.READ_FRAMEBUFFER,Ie.COLOR_ATTACHMENT0,n.__webglTexture,r,u+e):Ie.framebufferTexture2D(Ie.READ_FRAMEBUFFER,Ie.COLOR_ATTACHMENT0,Ie.TEXTURE_2D,n.__webglTexture,r),A?Ie.framebufferTextureLayer(Ie.DRAW_FRAMEBUFFER,Ie.COLOR_ATTACHMENT0,i.__webglTexture,a,m+e):Ie.framebufferTexture2D(Ie.DRAW_FRAMEBUFFER,Ie.COLOR_ATTACHMENT0,Ie.TEXTURE_2D,i.__webglTexture,a),0!==r?Ie.blitFramebuffer(c,d,o,s,f,p,o,s,Ie.COLOR_BUFFER_BIT,Ie.NEAREST):A?Ie.copyTexSubImage3D(v,a,f,p,m+e,c,d,o,s):Ie.copyTexSubImage2D(v,a,f,p,c,d,o,s);de.bindFramebuffer(Ie.READ_FRAMEBUFFER,null),de.bindFramebuffer(Ie.DRAW_FRAMEBUFFER,null);}else A?e.isDataTexture||e.isData3DTexture?Ie.texSubImage3D(v,a,f,p,m,o,s,l,_,g,h.data):t.isCompressedArrayTexture?Ie.compressedTexSubImage3D(v,a,f,p,m,o,s,l,_,h.data):Ie.texSubImage3D(v,a,f,p,m,o,s,l,_,g,h):e.isDataTexture?Ie.texSubImage2D(Ie.TEXTURE_2D,a,f,p,o,s,_,g,h.data):e.isCompressedTexture?Ie.compressedTexSubImage2D(Ie.TEXTURE_2D,a,f,p,h.width,h.height,_,h.data):Ie.texSubImage2D(Ie.TEXTURE_2D,a,f,p,o,s,_,g,h);Ie.pixelStorei(Ie.UNPACK_ROW_LENGTH,E),Ie.pixelStorei(Ie.UNPACK_IMAGE_HEIGHT,S),Ie.pixelStorei(Ie.UNPACK_SKIP_PIXELS,T),Ie.pixelStorei(Ie.UNPACK_SKIP_ROWS,M),Ie.pixelStorei(Ie.UNPACK_SKIP_IMAGES,x),0===a&&t.generateMipmaps&&Ie.generateMipmap(v),de.unbindTexture();},this.copyTextureToTexture3D=function(e,t,n=null,i=null,r=0){return !0!==e.isTexture&&(ri$1("WebGLRenderer: copyTextureToTexture3D function signature has changed."),n=arguments[0]||null,i=arguments[1]||null,e=arguments[2],t=arguments[3],r=arguments[4]||0),ri$1('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(e,t,n,i,r)},this.initRenderTarget=function(e){void 0===fe.get(e).__webglFramebuffer&&pe.setupRenderTarget(e);},this.initTexture=function(e){e.isCubeTexture?pe.setTextureCube(e,0):e.isData3DTexture?pe.setTexture3D(e,0):e.isDataArrayTexture||e.isCompressedArrayTexture?pe.setTexture2DArray(e,0):pe.setTexture2D(e,0),de.unbindTexture();},this.resetState=function(){P=0,w=0,D=null,de.reset(),De.reset();},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}));}get coordinateSystem(){return Os}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorspace=ui$1._getDrawingBufferColorSpace(e),t.unpackColorSpace=ui$1._getUnpackColorSpace();}}

    /*!
    fflate - fast JavaScript compression/decompression
    <https://101arrowz.github.io/fflate>
    Licensed under MIT. https://github.com/101arrowz/fflate/blob/master/LICENSE
    version 0.8.2
    */


    // aliases for shorter compressed code (most minifers don't do this)
    var u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;
    // fixed length extra bits
    var fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);
    // fixed distance extra bits
    var fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);
    // code length index map
    var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
    // get base, reverse index map from extra bits
    var freb = function (eb, start) {
        var b = new u16(31);
        for (var i = 0; i < 31; ++i) {
            b[i] = start += 1 << eb[i - 1];
        }
        // numbers here are at max 18 bits
        var r = new i32(b[30]);
        for (var i = 1; i < 30; ++i) {
            for (var j = b[i]; j < b[i + 1]; ++j) {
                r[j] = ((j - b[i]) << 5) | i;
            }
        }
        return { b: b, r: r };
    };
    var _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;
    // we can ignore the fact that the other numbers are wrong; they never happen anyway
    fl[28] = 258, revfl[258] = 28;
    var _b = freb(fdeb, 0), fd = _b.b;
    // map of value to reverse (assuming 16 bits)
    var rev = new u16(32768);
    for (var i = 0; i < 32768; ++i) {
        // reverse table algorithm from SO
        var x$1 = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);
        x$1 = ((x$1 & 0xCCCC) >> 2) | ((x$1 & 0x3333) << 2);
        x$1 = ((x$1 & 0xF0F0) >> 4) | ((x$1 & 0x0F0F) << 4);
        rev[i] = (((x$1 & 0xFF00) >> 8) | ((x$1 & 0x00FF) << 8)) >> 1;
    }
    // create huffman tree from u8 "map": index -> code length for code index
    // mb (max bits) must be at most 15
    // TODO: optimize/split up?
    var hMap = (function (cd, mb, r) {
        var s = cd.length;
        // index
        var i = 0;
        // u16 "map": index -> # of codes with bit length = index
        var l = new u16(mb);
        // length of cd must be 288 (total # of codes)
        for (; i < s; ++i) {
            if (cd[i])
                ++l[cd[i] - 1];
        }
        // u16 "map": index -> minimum code for bit length = index
        var le = new u16(mb);
        for (i = 1; i < mb; ++i) {
            le[i] = (le[i - 1] + l[i - 1]) << 1;
        }
        var co;
        if (r) {
            // u16 "map": index -> number of actual bits, symbol for code
            co = new u16(1 << mb);
            // bits to remove for reverser
            var rvb = 15 - mb;
            for (i = 0; i < s; ++i) {
                // ignore 0 lengths
                if (cd[i]) {
                    // num encoding both symbol and bits read
                    var sv = (i << 4) | cd[i];
                    // free bits
                    var r_1 = mb - cd[i];
                    // start value
                    var v = le[cd[i] - 1]++ << r_1;
                    // m is end value
                    for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {
                        // every 16 bit value starting with the code yields the same result
                        co[rev[v] >> rvb] = sv;
                    }
                }
            }
        }
        else {
            co = new u16(s);
            for (i = 0; i < s; ++i) {
                if (cd[i]) {
                    co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);
                }
            }
        }
        return co;
    });
    // fixed length tree
    var flt = new u8(288);
    for (var i = 0; i < 144; ++i)
        flt[i] = 8;
    for (var i = 144; i < 256; ++i)
        flt[i] = 9;
    for (var i = 256; i < 280; ++i)
        flt[i] = 7;
    for (var i = 280; i < 288; ++i)
        flt[i] = 8;
    // fixed distance tree
    var fdt = new u8(32);
    for (var i = 0; i < 32; ++i)
        fdt[i] = 5;
    // fixed length map
    var flrm = /*#__PURE__*/ hMap(flt, 9, 1);
    // fixed distance map
    var fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);
    // find max of array
    var max = function (a) {
        var m = a[0];
        for (var i = 1; i < a.length; ++i) {
            if (a[i] > m)
                m = a[i];
        }
        return m;
    };
    // read d, starting at bit p and mask with m
    var bits = function (d, p, m) {
        var o = (p / 8) | 0;
        return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;
    };
    // read d, starting at bit p continuing for at least 16 bits
    var bits16 = function (d, p) {
        var o = (p / 8) | 0;
        return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));
    };
    // get end of byte
    var shft = function (p) { return ((p + 7) / 8) | 0; };
    // typed array slice - allows garbage collector to free original reference,
    // while being more compatible than .slice
    var slc = function (v, s, e) {
        if (e == null || e > v.length)
            e = v.length;
        // can't use .constructor in case user-supplied
        return new u8(v.subarray(s, e));
    };
    // error codes
    var ec = [
        'unexpected EOF',
        'invalid block type',
        'invalid length/literal',
        'invalid distance',
        'stream finished',
        'no stream handler',
        ,
        'no callback',
        'invalid UTF-8 data',
        'extra field too long',
        'date not in range 1980-2099',
        'filename too long',
        'stream finishing',
        'invalid zip data'
        // determined by unknown compression method
    ];
    var err$1 = function (ind, msg, nt) {
        var e = new Error(msg || ec[ind]);
        e.code = ind;
        if (Error.captureStackTrace)
            Error.captureStackTrace(e, err$1);
        if (!nt)
            throw e;
        return e;
    };
    // expands raw DEFLATE data
    var inflt = function (dat, st, buf, dict) {
        // source length       dict length
        var sl = dat.length, dl = 0;
        if (!sl || st.f && !st.l)
            return buf || new u8(0);
        var noBuf = !buf;
        // have to estimate size
        var resize = noBuf || st.i != 2;
        // no state
        var noSt = st.i;
        // Assumes roughly 33% compression ratio average
        if (noBuf)
            buf = new u8(sl * 3);
        // ensure buffer can fit at least l elements
        var cbuf = function (l) {
            var bl = buf.length;
            // need to increase size to fit
            if (l > bl) {
                // Double or set to necessary, whichever is greater
                var nbuf = new u8(Math.max(bl * 2, l));
                nbuf.set(buf);
                buf = nbuf;
            }
        };
        //  last chunk         bitpos           bytes
        var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
        // total bits
        var tbts = sl * 8;
        do {
            if (!lm) {
                // BFINAL - this is only 1 when last chunk is next
                final = bits(dat, pos, 1);
                // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman
                var type = bits(dat, pos + 1, 3);
                pos += 3;
                if (!type) {
                    // go to end of byte boundary
                    var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;
                    if (t > sl) {
                        if (noSt)
                            err$1(0);
                        break;
                    }
                    // ensure size
                    if (resize)
                        cbuf(bt + l);
                    // Copy over uncompressed data
                    buf.set(dat.subarray(s, t), bt);
                    // Get new bitpos, update byte count
                    st.b = bt += l, st.p = pos = t * 8, st.f = final;
                    continue;
                }
                else if (type == 1)
                    lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
                else if (type == 2) {
                    //  literal                            lengths
                    var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
                    var tl = hLit + bits(dat, pos + 5, 31) + 1;
                    pos += 14;
                    // length+distance tree
                    var ldt = new u8(tl);
                    // code length tree
                    var clt = new u8(19);
                    for (var i = 0; i < hcLen; ++i) {
                        // use index map to get real code
                        clt[clim[i]] = bits(dat, pos + i * 3, 7);
                    }
                    pos += hcLen * 3;
                    // code lengths bits
                    var clb = max(clt), clbmsk = (1 << clb) - 1;
                    // code lengths map
                    var clm = hMap(clt, clb, 1);
                    for (var i = 0; i < tl;) {
                        var r = clm[bits(dat, pos, clbmsk)];
                        // bits read
                        pos += r & 15;
                        // symbol
                        var s = r >> 4;
                        // code length to copy
                        if (s < 16) {
                            ldt[i++] = s;
                        }
                        else {
                            //  copy   count
                            var c = 0, n = 0;
                            if (s == 16)
                                n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
                            else if (s == 17)
                                n = 3 + bits(dat, pos, 7), pos += 3;
                            else if (s == 18)
                                n = 11 + bits(dat, pos, 127), pos += 7;
                            while (n--)
                                ldt[i++] = c;
                        }
                    }
                    //    length tree                 distance tree
                    var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
                    // max length bits
                    lbt = max(lt);
                    // max dist bits
                    dbt = max(dt);
                    lm = hMap(lt, lbt, 1);
                    dm = hMap(dt, dbt, 1);
                }
                else
                    err$1(1);
                if (pos > tbts) {
                    if (noSt)
                        err$1(0);
                    break;
                }
            }
            // Make sure the buffer can hold this + the largest possible addition
            // Maximum chunk size (practically, theoretically infinite) is 2^17
            if (resize)
                cbuf(bt + 131072);
            var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
            var lpos = pos;
            for (;; lpos = pos) {
                // bits read, code
                var c = lm[bits16(dat, pos) & lms], sym = c >> 4;
                pos += c & 15;
                if (pos > tbts) {
                    if (noSt)
                        err$1(0);
                    break;
                }
                if (!c)
                    err$1(2);
                if (sym < 256)
                    buf[bt++] = sym;
                else if (sym == 256) {
                    lpos = pos, lm = null;
                    break;
                }
                else {
                    var add = sym - 254;
                    // no extra bits needed if less
                    if (sym > 264) {
                        // index
                        var i = sym - 257, b = fleb[i];
                        add = bits(dat, pos, (1 << b) - 1) + fl[i];
                        pos += b;
                    }
                    // dist
                    var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;
                    if (!d)
                        err$1(3);
                    pos += d & 15;
                    var dt = fd[dsym];
                    if (dsym > 3) {
                        var b = fdeb[dsym];
                        dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
                    }
                    if (pos > tbts) {
                        if (noSt)
                            err$1(0);
                        break;
                    }
                    if (resize)
                        cbuf(bt + 131072);
                    var end = bt + add;
                    if (bt < dt) {
                        var shift = dl - dt, dend = Math.min(dt, end);
                        if (shift + bt < 0)
                            err$1(3);
                        for (; bt < dend; ++bt)
                            buf[bt] = dict[shift + bt];
                    }
                    for (; bt < end; ++bt)
                        buf[bt] = buf[bt - dt];
                }
            }
            st.l = lm, st.p = lpos, st.b = bt, st.f = final;
            if (lm)
                final = 1, st.m = lbt, st.d = dm, st.n = dbt;
        } while (!final);
        // don't reallocate for streams or user buffers
        return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);
    };
    // empty
    var et = /*#__PURE__*/ new u8(0);
    // zlib start
    var zls = function (d, dict) {
        if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))
            err$1(6, 'invalid zlib data');
        if ((d[1] >> 5 & 1) == +!dict)
            err$1(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');
        return (d[1] >> 3 & 4) + 2;
    };
    /**
     * Expands Zlib data
     * @param data The data to decompress
     * @param opts The decompression options
     * @returns The decompressed version of the data
     */
    function unzlibSync(data, opts) {
        return inflt(data.subarray(zls(data, opts), -4), { i: 2 }, opts, opts);
    }
    // text decoder
    var td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();
    // text decoder stream
    var tds = 0;
    try {
        td.decode(et, { stream: true });
        tds = 1;
    }
    catch (e) { }

    /**
     * NURBS utils
     *
     * See NURBSCurve and NURBSSurface.
     **/


    /**************************************************************
     *	NURBS Utils
     **************************************************************/

    /*
    Finds knot vector span.

    p : degree
    u : parametric value
    U : knot vector

    returns the span
    */
    function findSpan( p, u, U ) {

    	const n = U.length - p - 1;

    	if ( u >= U[ n ] ) {

    		return n - 1;

    	}

    	if ( u <= U[ p ] ) {

    		return p;

    	}

    	let low = p;
    	let high = n;
    	let mid = Math.floor( ( low + high ) / 2 );

    	while ( u < U[ mid ] || u >= U[ mid + 1 ] ) {

    		if ( u < U[ mid ] ) {

    			high = mid;

    		} else {

    			low = mid;

    		}

    		mid = Math.floor( ( low + high ) / 2 );

    	}

    	return mid;

    }


    /*
    Calculate basis functions. See The NURBS Book, page 70, algorithm A2.2

    span : span in which u lies
    u    : parametric point
    p    : degree
    U    : knot vector

    returns array[p+1] with basis functions values.
    */
    function calcBasisFunctions( span, u, p, U ) {

    	const N = [];
    	const left = [];
    	const right = [];
    	N[ 0 ] = 1.0;

    	for ( let j = 1; j <= p; ++ j ) {

    		left[ j ] = u - U[ span + 1 - j ];
    		right[ j ] = U[ span + j ] - u;

    		let saved = 0.0;

    		for ( let r = 0; r < j; ++ r ) {

    			const rv = right[ r + 1 ];
    			const lv = left[ j - r ];
    			const temp = N[ r ] / ( rv + lv );
    			N[ r ] = saved + rv * temp;
    			saved = lv * temp;

    		}

    		N[ j ] = saved;

    	}

    	return N;

    }


    /*
    Calculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.

    p : degree of B-Spline
    U : knot vector
    P : control points (x, y, z, w)
    u : parametric point

    returns point for given u
    */
    function calcBSplinePoint( p, U, P, u ) {

    	const span = findSpan( p, u, U );
    	const N = calcBasisFunctions( span, u, p, U );
    	const C = new wi$1( 0, 0, 0, 0 );

    	for ( let j = 0; j <= p; ++ j ) {

    		const point = P[ span - p + j ];
    		const Nj = N[ j ];
    		const wNj = point.w * Nj;
    		C.x += point.x * wNj;
    		C.y += point.y * wNj;
    		C.z += point.z * wNj;
    		C.w += point.w * Nj;

    	}

    	return C;

    }


    /*
    Calculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.

    span : span in which u lies
    u    : parametric point
    p    : degree
    n    : number of derivatives to calculate
    U    : knot vector

    returns array[n+1][p+1] with basis functions derivatives
    */
    function calcBasisFunctionDerivatives( span, u, p, n, U ) {

    	const zeroArr = [];
    	for ( let i = 0; i <= p; ++ i )
    		zeroArr[ i ] = 0.0;

    	const ders = [];

    	for ( let i = 0; i <= n; ++ i )
    		ders[ i ] = zeroArr.slice( 0 );

    	const ndu = [];

    	for ( let i = 0; i <= p; ++ i )
    		ndu[ i ] = zeroArr.slice( 0 );

    	ndu[ 0 ][ 0 ] = 1.0;

    	const left = zeroArr.slice( 0 );
    	const right = zeroArr.slice( 0 );

    	for ( let j = 1; j <= p; ++ j ) {

    		left[ j ] = u - U[ span + 1 - j ];
    		right[ j ] = U[ span + j ] - u;

    		let saved = 0.0;

    		for ( let r = 0; r < j; ++ r ) {

    			const rv = right[ r + 1 ];
    			const lv = left[ j - r ];
    			ndu[ j ][ r ] = rv + lv;

    			const temp = ndu[ r ][ j - 1 ] / ndu[ j ][ r ];
    			ndu[ r ][ j ] = saved + rv * temp;
    			saved = lv * temp;

    		}

    		ndu[ j ][ j ] = saved;

    	}

    	for ( let j = 0; j <= p; ++ j ) {

    		ders[ 0 ][ j ] = ndu[ j ][ p ];

    	}

    	for ( let r = 0; r <= p; ++ r ) {

    		let s1 = 0;
    		let s2 = 1;

    		const a = [];
    		for ( let i = 0; i <= p; ++ i ) {

    			a[ i ] = zeroArr.slice( 0 );

    		}

    		a[ 0 ][ 0 ] = 1.0;

    		for ( let k = 1; k <= n; ++ k ) {

    			let d = 0.0;
    			const rk = r - k;
    			const pk = p - k;

    			if ( r >= k ) {

    				a[ s2 ][ 0 ] = a[ s1 ][ 0 ] / ndu[ pk + 1 ][ rk ];
    				d = a[ s2 ][ 0 ] * ndu[ rk ][ pk ];

    			}

    			const j1 = ( rk >= - 1 ) ? 1 : - rk;
    			const j2 = ( r - 1 <= pk ) ? k - 1 : p - r;

    			for ( let j = j1; j <= j2; ++ j ) {

    				a[ s2 ][ j ] = ( a[ s1 ][ j ] - a[ s1 ][ j - 1 ] ) / ndu[ pk + 1 ][ rk + j ];
    				d += a[ s2 ][ j ] * ndu[ rk + j ][ pk ];

    			}

    			if ( r <= pk ) {

    				a[ s2 ][ k ] = - a[ s1 ][ k - 1 ] / ndu[ pk + 1 ][ r ];
    				d += a[ s2 ][ k ] * ndu[ r ][ pk ];

    			}

    			ders[ k ][ r ] = d;

    			const j = s1;
    			s1 = s2;
    			s2 = j;

    		}

    	}

    	let r = p;

    	for ( let k = 1; k <= n; ++ k ) {

    		for ( let j = 0; j <= p; ++ j ) {

    			ders[ k ][ j ] *= r;

    		}

    		r *= p - k;

    	}

    	return ders;

    }


    /*
    	Calculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.

    	p  : degree
    	U  : knot vector
    	P  : control points
    	u  : Parametric points
    	nd : number of derivatives

    	returns array[d+1] with derivatives
    	*/
    function calcBSplineDerivatives( p, U, P, u, nd ) {

    	const du = nd < p ? nd : p;
    	const CK = [];
    	const span = findSpan( p, u, U );
    	const nders = calcBasisFunctionDerivatives( span, u, p, du, U );
    	const Pw = [];

    	for ( let i = 0; i < P.length; ++ i ) {

    		const point = P[ i ].clone();
    		const w = point.w;

    		point.x *= w;
    		point.y *= w;
    		point.z *= w;

    		Pw[ i ] = point;

    	}

    	for ( let k = 0; k <= du; ++ k ) {

    		const point = Pw[ span - p ].clone().multiplyScalar( nders[ k ][ 0 ] );

    		for ( let j = 1; j <= p; ++ j ) {

    			point.add( Pw[ span - p + j ].clone().multiplyScalar( nders[ k ][ j ] ) );

    		}

    		CK[ k ] = point;

    	}

    	for ( let k = du + 1; k <= nd + 1; ++ k ) {

    		CK[ k ] = new wi$1( 0, 0, 0 );

    	}

    	return CK;

    }


    /*
    Calculate "K over I"

    returns k!/(i!(k-i)!)
    */
    function calcKoverI( k, i ) {

    	let nom = 1;

    	for ( let j = 2; j <= k; ++ j ) {

    		nom *= j;

    	}

    	let denom = 1;

    	for ( let j = 2; j <= i; ++ j ) {

    		denom *= j;

    	}

    	for ( let j = 2; j <= k - i; ++ j ) {

    		denom *= j;

    	}

    	return nom / denom;

    }


    /*
    Calculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.

    Pders : result of function calcBSplineDerivatives

    returns array with derivatives for rational curve.
    */
    function calcRationalCurveDerivatives( Pders ) {

    	const nd = Pders.length;
    	const Aders = [];
    	const wders = [];

    	for ( let i = 0; i < nd; ++ i ) {

    		const point = Pders[ i ];
    		Aders[ i ] = new Ii$1( point.x, point.y, point.z );
    		wders[ i ] = point.w;

    	}

    	const CK = [];

    	for ( let k = 0; k < nd; ++ k ) {

    		const v = Aders[ k ].clone();

    		for ( let i = 1; i <= k; ++ i ) {

    			v.sub( CK[ k - i ].clone().multiplyScalar( calcKoverI( k, i ) * wders[ i ] ) );

    		}

    		CK[ k ] = v.divideScalar( wders[ 0 ] );

    	}

    	return CK;

    }


    /*
    Calculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.

    p  : degree
    U  : knot vector
    P  : control points in homogeneous space
    u  : parametric points
    nd : number of derivatives

    returns array with derivatives.
    */
    function calcNURBSDerivatives( p, U, P, u, nd ) {

    	const Pders = calcBSplineDerivatives( p, U, P, u, nd );
    	return calcRationalCurveDerivatives( Pders );

    }

    /**
     * NURBS curve object
     *
     * Derives from Curve, overriding getPoint and getTangent.
     *
     * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.
     *
     **/

    class NURBSCurve extends Qa {

    	constructor(
    		degree,
    		knots /* array of reals */,
    		controlPoints /* array of Vector(2|3|4) */,
    		startKnot /* index in knots */,
    		endKnot /* index in knots */
    	) {

    		super();

    		const knotsLength = knots ? knots.length - 1 : 0;
    		const pointsLength = controlPoints ? controlPoints.length : 0;

    		this.degree = degree;
    		this.knots = knots;
    		this.controlPoints = [];
    		// Used by periodic NURBS to remove hidden spans
    		this.startKnot = startKnot || 0;
    		this.endKnot = endKnot || knotsLength;

    		for ( let i = 0; i < pointsLength; ++ i ) {

    			// ensure Vector4 for control points
    			const point = controlPoints[ i ];
    			this.controlPoints[ i ] = new wi$1( point.x, point.y, point.z, point.w );

    		}

    	}

    	getPoint( t, optionalTarget = new Ii$1() ) {

    		const point = optionalTarget;

    		const u = this.knots[ this.startKnot ] + t * ( this.knots[ this.endKnot ] - this.knots[ this.startKnot ] ); // linear mapping t->u

    		// following results in (wx, wy, wz, w) homogeneous point
    		const hpoint = calcBSplinePoint( this.degree, this.knots, this.controlPoints, u );

    		if ( hpoint.w !== 1.0 ) {

    			// project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)
    			hpoint.divideScalar( hpoint.w );

    		}

    		return point.set( hpoint.x, hpoint.y, hpoint.z );

    	}

    	getTangent( t, optionalTarget = new Ii$1() ) {

    		const tangent = optionalTarget;

    		const u = this.knots[ 0 ] + t * ( this.knots[ this.knots.length - 1 ] - this.knots[ 0 ] );
    		const ders = calcNURBSDerivatives( this.degree, this.knots, this.controlPoints, u, 1 );
    		tangent.copy( ders[ 1 ] ).normalize();

    		return tangent;

    	}

    	toJSON() {

    		const data = super.toJSON();

    		data.degree = this.degree;
    		data.knots = [ ...this.knots ];
    		data.controlPoints = this.controlPoints.map( p => p.toArray() );
    		data.startKnot = this.startKnot;
    		data.endKnot = this.endKnot;

    		return data;

    	}

    	fromJSON( json ) {

    		super.fromJSON( json );

    		this.degree = json.degree;
    		this.knots = [ ...json.knots ];
    		this.controlPoints = json.controlPoints.map( p => new wi$1( p[ 0 ], p[ 1 ], p[ 2 ], p[ 3 ] ) );
    		this.startKnot = json.startKnot;
    		this.endKnot = json.endKnot;

    		return this;

    	}

    }

    /**
     * Loader loads FBX file and generates Group representing FBX scene.
     * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format
     * Versions lower than this may load but will probably have errors
     *
     * Needs Support:
     *  Morph normals / blend shape normals
     *
     * FBX format references:
     * 	https://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)
     *
     * Binary format specification:
     *	https://code.blender.org/2013/08/fbx-binary-file-format-specification/
     */
     
     /**
      * Modifications for UserData support for pxlNav by Kevin Edzenga / ProcStack; 2024
    	*/


    let fbxTree;
    let connections;
    let sceneGraph;

    class FBXLoader extends ic {

    	constructor( manager ) {

    		super( manager );

    	}

    	load( url, onLoad, onProgress, onError ) {

    		const scope = this;

    		const path = ( scope.path === '' ) ? Pc.extractUrlBase( url ) : scope.path;

    		const loader = new oc( this.manager );
    		loader.setPath( scope.path );
    		loader.setResponseType( 'arraybuffer' );
    		loader.setRequestHeader( scope.requestHeader );
    		loader.setWithCredentials( scope.withCredentials );

    		loader.load( url, function ( buffer ) {

    			try {

    				onLoad( scope.parse( buffer, path ) );

    			} catch ( e ) {

    				if ( onError ) {

    					onError( e );

    				} else {

    					console.error( e );

    				}

    				scope.manager.itemError( url );

    			}

    		}, onProgress, onError );

    	}

    	parse( FBXBuffer, path ) {

    		if ( isFbxFormatBinary( FBXBuffer ) ) {

    			fbxTree = new BinaryParser().parse( FBXBuffer );

    		} else {

    			const FBXText = convertArrayBufferToString( FBXBuffer );

    			if ( ! isFbxFormatASCII( FBXText ) ) {

    				throw new Error( 'THREE.FBXLoader: Unknown format.' );

    			}

    			if ( getFbxVersion( FBXText ) < 7000 ) {

    				throw new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion( FBXText ) );

    			}

    			fbxTree = new TextParser().parse( FBXText );

    		}

    		// console.log( fbxTree );

    		const textureLoader = new dc( this.manager ).setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );

    		return new FBXTreeParser( textureLoader, this.manager ).parse( fbxTree );

    	}

    }

    // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group
    class FBXTreeParser {

    	constructor( textureLoader, manager ) {

    		this.textureLoader = textureLoader;
    		this.manager = manager;

    	}

    	parse() {

    		connections = this.parseConnections();

    		const images = this.parseImages();
    		const textures = this.parseTextures( images );
    		const materials = this.parseMaterials( textures );
    		const deformers = this.parseDeformers();
    		const geometryMap = new GeometryParser().parse( deformers );

    		this.parseScene( deformers, geometryMap, materials );

    		return sceneGraph;

    	}

    	// Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )
    	// and details the connection type
    	parseConnections() {

    		const connectionMap = new Map();

    		if ( 'Connections' in fbxTree ) {

    			const rawConnections = fbxTree.Connections.connections;

    			rawConnections.forEach( function ( rawConnection ) {

    				const fromID = rawConnection[ 0 ];
    				const toID = rawConnection[ 1 ];
    				const relationship = rawConnection[ 2 ];

    				if ( ! connectionMap.has( fromID ) ) {

    					connectionMap.set( fromID, {
    						parents: [],
    						children: []
    					} );

    				}

    				const parentRelationship = { ID: toID, relationship: relationship };
    				connectionMap.get( fromID ).parents.push( parentRelationship );

    				if ( ! connectionMap.has( toID ) ) {

    					connectionMap.set( toID, {
    						parents: [],
    						children: []
    					} );

    				}

    				const childRelationship = { ID: fromID, relationship: relationship };
    				connectionMap.get( toID ).children.push( childRelationship );

    			} );

    		}

    		return connectionMap;

    	}

    	// Parse FBXTree.Objects.Video for embedded image data
    	// These images are connected to textures in FBXTree.Objects.Textures
    	// via FBXTree.Connections.
    	parseImages() {

    		const images = {};
    		const blobs = {};

    		if ( 'Video' in fbxTree.Objects ) {

    			const videoNodes = fbxTree.Objects.Video;

    			for ( const nodeID in videoNodes ) {

    				const videoNode = videoNodes[ nodeID ];

    				const id = parseInt( nodeID );

    				images[ id ] = videoNode.RelativeFilename || videoNode.Filename;

    				// raw image data is in videoNode.Content
    				if ( 'Content' in videoNode ) {

    					const arrayBufferContent = ( videoNode.Content instanceof ArrayBuffer ) && ( videoNode.Content.byteLength > 0 );
    					const base64Content = ( typeof videoNode.Content === 'string' ) && ( videoNode.Content !== '' );

    					if ( arrayBufferContent || base64Content ) {

    						const image = this.parseImage( videoNodes[ nodeID ] );

    						blobs[ videoNode.RelativeFilename || videoNode.Filename ] = image;

    					}

    				}

    			}

    		}

    		for ( const id in images ) {

    			const filename = images[ id ];

    			if ( blobs[ filename ] !== undefined ) images[ id ] = blobs[ filename ];
    			else images[ id ] = images[ id ].split( '\\' ).pop();

    		}

    		return images;

    	}

    	// Parse embedded image data in FBXTree.Video.Content
    	parseImage( videoNode ) {

    		const content = videoNode.Content;
    		const fileName = videoNode.RelativeFilename || videoNode.Filename;
    		const extension = fileName.slice( fileName.lastIndexOf( '.' ) + 1 ).toLowerCase();

    		let type;

    		switch ( extension ) {

    			case 'bmp':

    				type = 'image/bmp';
    				break;

    			case 'jpg':
    			case 'jpeg':

    				type = 'image/jpeg';
    				break;

    			case 'png':

    				type = 'image/png';
    				break;

    			case 'tif':

    				type = 'image/tiff';
    				break;

    			case 'tga':

    				if ( this.manager.getHandler( '.tga' ) === null ) {

    					console.warn( 'FBXLoader: TGA loader not found, skipping ', fileName );

    				}

    				type = 'image/tga';
    				break;

    			default:

    				console.warn( 'FBXLoader: Image type "' + extension + '" is not supported.' );
    				return;

    		}

    		if ( typeof content === 'string' ) { // ASCII format

    			return 'data:' + type + ';base64,' + content;

    		} else { // Binary Format

    			const array = new Uint8Array( content );
    			return window.URL.createObjectURL( new Blob( [ array ], { type: type } ) );

    		}

    	}

    	// Parse nodes in FBXTree.Objects.Texture
    	// These contain details such as UV scaling, cropping, rotation etc and are connected
    	// to images in FBXTree.Objects.Video
    	parseTextures( images ) {

    		const textureMap = new Map();

    		if ( 'Texture' in fbxTree.Objects ) {

    			const textureNodes = fbxTree.Objects.Texture;
    			for ( const nodeID in textureNodes ) {

    				const texture = this.parseTexture( textureNodes[ nodeID ], images );
    				textureMap.set( parseInt( nodeID ), texture );

    			}

    		}

    		return textureMap;

    	}

    	// Parse individual node in FBXTree.Objects.Texture
    	parseTexture( textureNode, images ) {

    		const texture = this.loadTexture( textureNode, images );

    		texture.ID = textureNode.id;

    		texture.name = textureNode.attrName;

    		const wrapModeU = textureNode.WrapModeU;
    		const wrapModeV = textureNode.WrapModeV;

    		const valueU = wrapModeU !== undefined ? wrapModeU.value : 0;
    		const valueV = wrapModeV !== undefined ? wrapModeV.value : 0;

    		// http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a
    		// 0: repeat(default), 1: clamp

    		texture.wrapS = valueU === 0 ? pt : mt;
    		texture.wrapT = valueV === 0 ? pt : mt;

    		if ( 'Scaling' in textureNode ) {

    			const values = textureNode.Scaling.value;

    			texture.repeat.x = values[ 0 ];
    			texture.repeat.y = values[ 1 ];

    		}

    		if ( 'Translation' in textureNode ) {

    			const values = textureNode.Translation.value;

    			texture.offset.x = values[ 0 ];
    			texture.offset.y = values[ 1 ];

    		}

    		return texture;

    	}

    	// load a texture specified as a blob or data URI, or via an external URL using TextureLoader
    	loadTexture( textureNode, images ) {

    		const nonNativeExtensions = new Set( [ 'tga', 'tif', 'tiff', 'exr', 'dds', 'hdr', 'ktx2' ] );

    		const extension = textureNode.FileName.split( '.' ).pop().toLowerCase();

    		const loader = nonNativeExtensions.has( extension ) ? this.manager.getHandler( `.${extension}` ) : this.textureLoader;

    		if ( ! loader ) {

    			console.warn(
    				`FBXLoader: ${extension.toUpperCase()} loader not found, creating placeholder texture for`,
    				textureNode.RelativeFilename
    			);
    			return new vi$1();

    		}

    		const loaderPath = loader.path;

    		if ( ! loaderPath ) {

    			loader.setPath( this.textureLoader.path );

    		}

    		const children = connections.get( textureNode.id ).children;

    		let fileName;

    		if ( children !== undefined && children.length > 0 && images[ children[ 0 ].ID ] !== undefined ) {

    			fileName = images[ children[ 0 ].ID ];

    			if ( fileName.indexOf( 'blob:' ) === 0 || fileName.indexOf( 'data:' ) === 0 ) {

    				loader.setPath( undefined );

    			}

    		}

    		const texture = loader.load( fileName );

    		// revert to initial path
    		loader.setPath( loaderPath );

    		return texture;

    	}

    	// Parse nodes in FBXTree.Objects.Material
    	parseMaterials( textureMap ) {

    		const materialMap = new Map();

    		if ( 'Material' in fbxTree.Objects ) {

    			const materialNodes = fbxTree.Objects.Material;

    			for ( const nodeID in materialNodes ) {

    				const material = this.parseMaterial( materialNodes[ nodeID ], textureMap );

    				if ( material !== null ) materialMap.set( parseInt( nodeID ), material );

    			}

    		}

    		return materialMap;

    	}

    	// Parse single node in FBXTree.Objects.Material
    	// Materials are connected to texture maps in FBXTree.Objects.Textures
    	// FBX format currently only supports Lambert and Phong shading models
    	parseMaterial( materialNode, textureMap ) {

    		const ID = materialNode.id;
    		const name = materialNode.attrName;
    		let type = materialNode.ShadingModel;

    		// Case where FBX wraps shading model in property object.
    		if ( typeof type === 'object' ) {

    			type = type.value;

    		}

    		// Ignore unused materials which don't have any connections.
    		if ( ! connections.has( ID ) ) return null;

    		const parameters = this.parseParameters( materialNode, textureMap, ID );

    		let material;

    		switch ( type.toLowerCase() ) {

    			case 'phong':
    				material = new Tl();
    				break;
    			case 'lambert':
    				material = new Il();
    				break;
    			default:
    				console.warn( 'THREE.FBXLoader: unknown material type "%s". Defaulting to MeshPhongMaterial.', type );
    				material = new Tl();
    				break;

    		}

    		material.setValues( parameters );
    		material.name = name;

    		return material;

    	}

    	// Parse FBX material and return parameters suitable for a three.js material
    	// Also parse the texture map and return any textures associated with the material
    	parseParameters( materialNode, textureMap, ID ) {

    		const parameters = {};

    		if ( materialNode.BumpFactor ) {

    			parameters.bumpScale = materialNode.BumpFactor.value;

    		}

    		if ( materialNode.Diffuse ) {

    			//parameters.color = ColorManagement.toWorkingColorSpace( new Color().fromArray( materialNode.Diffuse.value ), SRGBColorSpace );
    			parameters.color = new $r$1().fromArray( materialNode.Diffuse.value );

    		} else if ( materialNode.DiffuseColor && ( materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB' ) ) {

    			// The blender exporter exports diffuse here instead of in materialNode.Diffuse
    			//parameters.color = ColorManagement.toWorkingColorSpace( new Color().fromArray( materialNode.DiffuseColor.value ), SRGBColorSpace );
    			parameters.color = new $r$1().fromArray( materialNode.DiffuseColor.value );

    		}

    		if ( materialNode.DisplacementFactor ) {

    			parameters.displacementScale = materialNode.DisplacementFactor.value;

    		}

    		if ( materialNode.Emissive ) {

    			//parameters.emissive = ColorManagement.toWorkingColorSpace( new Color().fromArray( materialNode.Emissive.value ), SRGBColorSpace );
    			parameters.emissive = new $r$1().fromArray( materialNode.Emissive.value );

    		} else if ( materialNode.EmissiveColor && ( materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB' ) ) {

    			// The blender exporter exports emissive color here instead of in materialNode.Emissive
    			//parameters.emissive = ColorManagement.toWorkingColorSpace( new Color().fromArray( materialNode.EmissiveColor.value ), SRGBColorSpace );
    			parameters.emissive = new $r$1().fromArray( materialNode.EmissiveColor.value );

    		}

    		if ( materialNode.EmissiveFactor ) {

    			parameters.emissiveIntensity = parseFloat( materialNode.EmissiveFactor.value );

    		}

    		// the transparency handling is implemented based on Blender/Unity's approach: https://github.com/sobotka/blender-addons/blob/7d80f2f97161fc8e353a657b179b9aa1f8e5280b/io_scene_fbx/import_fbx.py#L1444-L1459

    		parameters.opacity = 1 - ( materialNode.TransparencyFactor ? parseFloat( materialNode.TransparencyFactor.value ) : 0 );

    		if ( parameters.opacity === 1 || parameters.opacity === 0 ) {

    			parameters.opacity = ( materialNode.Opacity ? parseFloat( materialNode.Opacity.value ) : null );

    			if ( parameters.opacity === null ) {

    				parameters.opacity = 1 - ( materialNode.TransparentColor ? parseFloat( materialNode.TransparentColor.value[ 0 ] ) : 0 );

    			}

    		}

    		if ( parameters.opacity < 1.0 ) {

    			parameters.transparent = true;

    		}

    		if ( materialNode.ReflectionFactor ) {

    			parameters.reflectivity = materialNode.ReflectionFactor.value;

    		}

    		if ( materialNode.Shininess ) {

    			parameters.shininess = materialNode.Shininess.value;

    		}

    		if ( materialNode.Specular ) {

    			//parameters.specular = ColorManagement.toWorkingColorSpace( new Color().fromArray( materialNode.Specular.value ), SRGBColorSpace );
    			parameters.specular = new $r$1().fromArray( materialNode.Specular.value );

    		} else if ( materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color' ) {

    			// The blender exporter exports specular color here instead of in materialNode.Specular
    			//parameters.specular = ColorManagement.toWorkingColorSpace( new Color().fromArray( materialNode.SpecularColor.value ), SRGBColorSpace );
    			parameters.specular = new $r$1().fromArray( materialNode.SpecularColor.value );

    		}

    		const scope = this;
    		connections.get( ID ).children.forEach( function ( child ) {

    			const type = child.relationship;

    			switch ( type ) {

    				case 'Bump':
    					parameters.bumpMap = scope.getTexture( textureMap, child.ID );
    					break;

    				case 'Maya|TEX_ao_map':
    					parameters.aoMap = scope.getTexture( textureMap, child.ID );
    					break;

    				case 'DiffuseColor':
    				case 'Maya|TEX_color_map':
    					parameters.map = scope.getTexture( textureMap, child.ID );
    					/*if ( parameters.map !== undefined ) {
                console.log(parameters.map  );
    						parameters.map.colorSpace = SRGBColorSpace;

    					}*/

    					break;

    				case 'DisplacementColor':
    					parameters.displacementMap = scope.getTexture( textureMap, child.ID );
    					break;

    				case 'EmissiveColor':
    					parameters.emissiveMap = scope.getTexture( textureMap, child.ID );
    					/*if ( parameters.emissiveMap !== undefined ) {

    						//parameters.emissiveMap.colorSpace = SRGBColorSpace;

    					}*/

    					break;

    				case 'NormalMap':
    				case 'Maya|TEX_normal_map':
    					parameters.normalMap = scope.getTexture( textureMap, child.ID );
    					break;

    				case 'ReflectionColor':
    					parameters.envMap = scope.getTexture( textureMap, child.ID );
    					if ( parameters.envMap !== undefined ) {

    						parameters.envMap.mapping = ct;
    						//parameters.envMap.colorSpace = SRGBColorSpace;

    					}

    					break;

    				case 'SpecularColor':
    					parameters.specularMap = scope.getTexture( textureMap, child.ID );
    					if ( parameters.specularMap !== undefined ) ;

    					break;

    				case 'TransparentColor':
    				case 'TransparencyFactor':
    					parameters.alphaMap = scope.getTexture( textureMap, child.ID );
    					parameters.transparent = true;
    					break;

    				case 'AmbientColor':
    				case 'ShininessExponent': // AKA glossiness map
    				case 'SpecularFactor': // AKA specularLevel
    				case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor
    				default:
    					console.warn( 'THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type );
    					break;

    			}

    		} );

    		return parameters;

    	}

    	// get a texture from the textureMap for use by a material.
    	getTexture( textureMap, id ) {

    		// if the texture is a layered texture, just use the first layer and issue a warning
    		if ( 'LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture ) {

    			console.warn( 'THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.' );
    			id = connections.get( id ).children[ 0 ].ID;

    		}

    		return textureMap.get( id );

    	}

    	// Parse nodes in FBXTree.Objects.Deformer
    	// Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here
    	// Generates map of Skeleton-like objects for use later when generating and binding skeletons.
    	parseDeformers() {

    		const skeletons = {};
    		const morphTargets = {};

    		if ( 'Deformer' in fbxTree.Objects ) {

    			const DeformerNodes = fbxTree.Objects.Deformer;

    			for ( const nodeID in DeformerNodes ) {

    				const deformerNode = DeformerNodes[ nodeID ];

    				const relationships = connections.get( parseInt( nodeID ) );

    				if ( deformerNode.attrType === 'Skin' ) {

    					const skeleton = this.parseSkeleton( relationships, DeformerNodes );
    					skeleton.ID = nodeID;

    					if ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: skeleton attached to more than one geometry is not supported.' );
    					skeleton.geometryID = relationships.parents[ 0 ].ID;

    					skeletons[ nodeID ] = skeleton;

    				} else if ( deformerNode.attrType === 'BlendShape' ) {

    					const morphTarget = {
    						id: nodeID,
    					};

    					morphTarget.rawTargets = this.parseMorphTargets( relationships, DeformerNodes );
    					morphTarget.id = nodeID;

    					if ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: morph target attached to more than one geometry is not supported.' );

    					morphTargets[ nodeID ] = morphTarget;

    				}

    			}

    		}

    		return {

    			skeletons: skeletons,
    			morphTargets: morphTargets,

    		};

    	}

    	// Parse single nodes in FBXTree.Objects.Deformer
    	// The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'
    	// Each skin node represents a skeleton and each cluster node represents a bone
    	parseSkeleton( relationships, deformerNodes ) {

    		const rawBones = [];

    		relationships.children.forEach( function ( child ) {

    			const boneNode = deformerNodes[ child.ID ];

    			if ( boneNode.attrType !== 'Cluster' ) return;

    			const rawBone = {

    				ID: child.ID,
    				indices: [],
    				weights: [],
    				transformLink: new nr$1().fromArray( boneNode.TransformLink.a ),
    				// transform: new Matrix4().fromArray( boneNode.Transform.a ),
    				// linkMode: boneNode.Mode,

    			};

    			if ( 'Indexes' in boneNode ) {

    				rawBone.indices = boneNode.Indexes.a;
    				rawBone.weights = boneNode.Weights.a;

    			}

    			rawBones.push( rawBone );

    		} );

    		return {

    			rawBones: rawBones,
    			bones: []

    		};

    	}

    	// The top level morph deformer node has type "BlendShape" and sub nodes have type "BlendShapeChannel"
    	parseMorphTargets( relationships, deformerNodes ) {

    		const rawMorphTargets = [];

    		for ( let i = 0; i < relationships.children.length; i ++ ) {

    			const child = relationships.children[ i ];

    			const morphTargetNode = deformerNodes[ child.ID ];

    			const rawMorphTarget = {

    				name: morphTargetNode.attrName,
    				initialWeight: morphTargetNode.DeformPercent,
    				id: morphTargetNode.id,
    				fullWeights: morphTargetNode.FullWeights.a

    			};

    			if ( morphTargetNode.attrType !== 'BlendShapeChannel' ) return;

    			rawMorphTarget.geoID = connections.get( parseInt( child.ID ) ).children.filter( function ( child ) {

    				return child.relationship === undefined;

    			} )[ 0 ].ID;

    			rawMorphTargets.push( rawMorphTarget );

    		}

    		return rawMorphTargets;

    	}

    	// create the main Group() to be returned by the loader
    	parseScene( deformers, geometryMap, materialMap ) {

    		sceneGraph = new Ha();

    		const modelMap = this.parseModels( deformers.skeletons, geometryMap, materialMap );

    		const modelNodes = fbxTree.Objects.Model;

    		const scope = this;
    		modelMap.forEach( function ( model ) {

    			const modelNode = modelNodes[ model.ID ];
    			scope.setLookAtProperties( model, modelNode );

    			const parentConnections = connections.get( model.ID ).parents;

    			parentConnections.forEach( function ( connection ) {

    				const parent = modelMap.get( connection.ID );
    				if ( parent !== undefined ) parent.add( model );

    			} );

    			if ( model.parent === null ) {

    				sceneGraph.add( model );

    			}


    		} );

    		this.bindSkeleton( deformers.skeletons, geometryMap, modelMap );

    		this.addGlobalSceneSettings();

    		sceneGraph.traverse( function ( node ) {

    			if ( node.userData.transformData ) {

    				if ( node.parent ) {

    					node.userData.transformData.parentMatrix = node.parent.matrix;
    					node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;

    				}

    				const transform = generateTransform( node.userData.transformData );

    				node.applyMatrix4( transform );
    				node.updateWorldMatrix();

    			}

    		} );

    		const animations = new AnimationParser().parse();

    		// if all the models where already combined in a single group, just return that
    		if ( sceneGraph.children.length === 1 && sceneGraph.children[ 0 ].isGroup ) {

    			sceneGraph.children[ 0 ].animations = animations;
    			sceneGraph = sceneGraph.children[ 0 ];

    		}

    		sceneGraph.animations = animations;

    	}

    	// parse nodes in FBXTree.Objects.Model
    	parseModels( skeletons, geometryMap, materialMap ) {

    		const modelMap = new Map();
    		const modelNodes = fbxTree.Objects.Model;

          // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
    			// -- Start edits for pxlNav; Kevin Edzenga 2024 - --
          // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
    			// Any attributes not in list are custom attributes, add those to userData
    			var standardAttributes=[
            "Culling","DefaultAttributeIndex","InheritType",
    				"Lcl_Translation","Lcl_Rotation","Lcl_Scaling",
    				"RotationPivot","ScalingPivot",
    				"RotationActive","ScalingMax", "RotationOffset","fbx_node_path",
    				"Shading","Version","attrName","attrType",
    				"currentUVSet","id","name","propertyList","singleProperty",
    			];
          // -- -- -- -- -- -- -- -- -- --
    			// -- End edits for pxlNav -- -- --
          // -- -- -- -- -- -- -- -- -- -- -- --

    		for ( const nodeID in modelNodes ) {

    			const id = parseInt( nodeID );
    			const node = modelNodes[ nodeID ];
    			const relationships = connections.get( id );

    			let model = this.buildSkeleton( relationships, skeletons, id, node.attrName );

    			if ( ! model ) {

    				switch ( node.attrType ) {

    					case 'Camera':
    						model = this.createCamera( relationships );
    						break;
    					case 'Light':
    						model = this.createLight( relationships );
    						break;
    					case 'Mesh':
    						model = this.createMesh( relationships, geometryMap, materialMap );
    						break;
    					case 'NurbsCurve':
    						model = this.createCurve( relationships, geometryMap );
    						break;
    					case 'LimbNode':
    					case 'Root':
    						model = new Lo();
    						break;
    					case 'Null':
    					default:
    						model = new Ha();
    						break;

    				}

    				model.name = node.attrName ? gu.sanitizeNodeName( node.attrName ) : '';
    				model.userData.originalName = node.attrName;

    				model.ID = id;

    			}

          // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
    			// -- Start edits for pxlNav; Kevin Edzenga 2024 - --
          // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
    			let nodeAttrs=Object.keys(node);
    			nodeAttrs.forEach( (attr)=>{
            if( !standardAttributes.includes(attr) ){
              model.userData[ attr ] = node[ attr ].value;
    				}
    			});
          // -- -- -- -- -- -- -- -- -- --
    			// -- End edits for pxlNav -- -- --
          // -- -- -- -- -- -- -- -- -- -- -- --
    				
    			this.getTransformData( model, node );
    			modelMap.set( id, model );

    		}

    		return modelMap;

    	}

    	buildSkeleton( relationships, skeletons, id, name ) {

    		let bone = null;

    		relationships.parents.forEach( function ( parent ) {

    			for ( const ID in skeletons ) {

    				const skeleton = skeletons[ ID ];

    				skeleton.rawBones.forEach( function ( rawBone, i ) {

    					if ( rawBone.ID === parent.ID ) {

    						const subBone = bone;
    						bone = new Lo();

    						bone.matrixWorld.copy( rawBone.transformLink );

    						// set name and id here - otherwise in cases where "subBone" is created it will not have a name / id

    						bone.name = name ? gu.sanitizeNodeName( name ) : '';
    						bone.userData.originalName = name;
    						bone.ID = id;

    						skeleton.bones[ i ] = bone;

    						// In cases where a bone is shared between multiple meshes
    						// duplicate the bone here and and it as a child of the first bone
    						if ( subBone !== null ) {

    							bone.add( subBone );

    						}

    					}

    				} );

    			}

    		} );

    		return bone;

    	}

    	// create a PerspectiveCamera or OrthographicCamera
    	createCamera( relationships ) {

    		let model;
    		let cameraAttribute;

    		relationships.children.forEach( function ( child ) {

    			const attr = fbxTree.Objects.NodeAttribute[ child.ID ];

    			if ( attr !== undefined ) {

    				cameraAttribute = attr;

    			}

    		} );

    		if ( cameraAttribute === undefined ) {

    			model = new Er$1();

    		} else {

    			let type = 0;
    			if ( cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1 ) {

    				type = 1;

    			}

    			let nearClippingPlane = 1;
    			if ( cameraAttribute.NearPlane !== undefined ) {

    				nearClippingPlane = cameraAttribute.NearPlane.value / 1000;

    			}

    			let farClippingPlane = 1000;
    			if ( cameraAttribute.FarPlane !== undefined ) {

    				farClippingPlane = cameraAttribute.FarPlane.value / 1000;

    			}


    			let width = window.innerWidth;
    			let height = window.innerHeight;

    			if ( cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined ) {

    				width = cameraAttribute.AspectWidth.value;
    				height = cameraAttribute.AspectHeight.value;

    			}

    			const aspect = width / height;

    			let fov = 45;
    			if ( cameraAttribute.FieldOfView !== undefined ) {

    				fov = cameraAttribute.FieldOfView.value;

    			}

    			const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;

    			switch ( type ) {

    				case 0: // Perspective
    					model = new $n$1( fov, aspect, nearClippingPlane, farClippingPlane );
    					if ( focalLength !== null ) model.setFocalLength( focalLength );
    					break;

    				case 1: // Orthographic
    					console.warn( 'THREE.FBXLoader: Orthographic cameras not supported yet.' );
    					model = new Er$1();
    					break;

    				default:
    					console.warn( 'THREE.FBXLoader: Unknown camera type ' + type + '.' );
    					model = new Er$1();
    					break;

    			}

    		}

    		return model;

    	}

    	// Create a DirectionalLight, PointLight or SpotLight
    	createLight( relationships ) {

    		let model;
    		let lightAttribute;

    		relationships.children.forEach( function ( child ) {

    			const attr = fbxTree.Objects.NodeAttribute[ child.ID ];

    			if ( attr !== undefined ) {

    				lightAttribute = attr;

    			}

    		} );

    		if ( lightAttribute === undefined ) {

    			model = new Er$1();

    		} else {

    			let type;

    			// LightType can be undefined for Point lights
    			if ( lightAttribute.LightType === undefined ) {

    				type = 0;

    			} else {

    				type = lightAttribute.LightType.value;

    			}

    			let color = 0xffffff;

    			if ( lightAttribute.Color !== undefined ) {
            //console.log( ColorManagement);
    				//color = ColorManagement.toWorkingColorSpace( new Color().fromArray( lightAttribute.Color.value ), SRGBColorSpace );
    				color = new $r$1().fromArray( lightAttribute.Color.value );

    			}

    			let intensity = ( lightAttribute.Intensity === undefined ) ? 1 : lightAttribute.Intensity.value / 100;

    			// light disabled
    			if ( lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0 ) {

    				intensity = 0;

    			}

    			let distance = 0;
    			if ( lightAttribute.FarAttenuationEnd !== undefined ) {

    				if ( lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0 ) {

    					distance = 0;

    				} else {

    					distance = lightAttribute.FarAttenuationEnd.value;

    				}

    			}

    			// TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?
    			const decay = 1;

    			switch ( type ) {

    				case 0: // Point
    					model = new Ac( color, intensity, distance, decay );
    					break;

    				case 1: // Directional
    					model = new Cc( color, intensity );
    					break;

    				case 2: // Spot
    					let angle = Math.PI / 3;

    					if ( lightAttribute.InnerAngle !== undefined ) {

    						angle = Ys.degToRad( lightAttribute.InnerAngle.value );

    					}

    					let penumbra = 0;
    					if ( lightAttribute.OuterAngle !== undefined ) {

    						// TODO: this is not correct - FBX calculates outer and inner angle in degrees
    						// with OuterAngle > InnerAngle && OuterAngle <= Math.PI
    						// while three.js uses a penumbra between (0, 1) to attenuate the inner angle
    						penumbra = Ys.degToRad( lightAttribute.OuterAngle.value );
    						penumbra = Math.max( penumbra, 1 );

    					}

    					model = new vc( color, intensity, distance, angle, penumbra, decay );
    					break;

    				default:
    					console.warn( 'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.' );
    					model = new Ac( color, intensity );
    					break;

    			}

    			if ( lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1 ) {

    				model.castShadow = true;

    			}

    		}

    		return model;

    	}

    	createMesh( relationships, geometryMap, materialMap ) {

    		let model;
    		let geometry = null;
    		let material = null;
    		const materials = [];

    		// get geometry and materials(s) from connections
    		relationships.children.forEach( function ( child ) {

    			if ( geometryMap.has( child.ID ) ) {

    				geometry = geometryMap.get( child.ID );

    			}

    			if ( materialMap.has( child.ID ) ) {

    				materials.push( materialMap.get( child.ID ) );

    			}

    		} );

    		if ( materials.length > 1 ) {

    			material = materials;

    		} else if ( materials.length > 0 ) {

    			material = materials[ 0 ];

    		} else {

    			material = new Tl( {
    				name: ic.DEFAULT_MATERIAL_NAME,
    				color: 0xcccccc
    			} );
    			materials.push( material );

    		}

    		if ( 'color' in geometry.attributes ) {

    			materials.forEach( function ( material ) {

    				material.vertexColors = true;

    			} );

    		}

    		if ( geometry.FBX_Deformer ) {

    			model = new No( geometry, material );
    			model.normalizeSkinWeights();

    		} else {

    			model = new Vn$1( geometry, material );

    		}

    		return model;

    	}

    	createCurve( relationships, geometryMap ) {

    		const geometry = relationships.children.reduce( function ( geo, child ) {

    			if ( geometryMap.has( child.ID ) ) geo = geometryMap.get( child.ID );

    			return geo;

    		}, null );

    		// FBX does not list materials for Nurbs lines, so we'll just put our own in here.
    		const material = new Sa( {
    			name: ic.DEFAULT_MATERIAL_NAME,
    			color: 0x3300ff,
    			linewidth: 1
    		} );
    		return new ka( geometry, material );

    	}

    	// parse the model node for transform data
    	getTransformData( model, modelNode ) {

    		const transformData = {};

    		if ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );

    		if ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );
    		else transformData.eulerOrder = getEulerOrder( 0 );

    		if ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;

    		if ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;
    		if ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;
    		if ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;

    		if ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;

    		if ( 'ScalingOffset' in modelNode ) transformData.scalingOffset = modelNode.ScalingOffset.value;
    		if ( 'ScalingPivot' in modelNode ) transformData.scalingPivot = modelNode.ScalingPivot.value;

    		if ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;
    		if ( 'RotationPivot' in modelNode ) transformData.rotationPivot = modelNode.RotationPivot.value;

    		model.userData.transformData = transformData;

    	}

    	setLookAtProperties( model, modelNode ) {

    		if ( 'LookAtProperty' in modelNode ) {

    			const children = connections.get( model.ID ).children;

    			children.forEach( function ( child ) {

    				if ( child.relationship === 'LookAtProperty' ) {

    					const lookAtTarget = fbxTree.Objects.Model[ child.ID ];

    					if ( 'Lcl_Translation' in lookAtTarget ) {

    						const pos = lookAtTarget.Lcl_Translation.value;

    						// DirectionalLight, SpotLight
    						if ( model.target !== undefined ) {

    							model.target.position.fromArray( pos );
    							sceneGraph.add( model.target );

    						} else { // Cameras and other Object3Ds

    							model.lookAt( new Ii$1().fromArray( pos ) );

    						}

    					}

    				}

    			} );

    		}

    	}

    	bindSkeleton( skeletons, geometryMap, modelMap ) {

    		const bindMatrices = this.parsePoseNodes();

    		for ( const ID in skeletons ) {

    			const skeleton = skeletons[ ID ];

    			const parents = connections.get( parseInt( skeleton.ID ) ).parents;

    			parents.forEach( function ( parent ) {

    				if ( geometryMap.has( parent.ID ) ) {

    					const geoID = parent.ID;
    					const geoRelationships = connections.get( geoID );

    					geoRelationships.parents.forEach( function ( geoConnParent ) {

    						if ( modelMap.has( geoConnParent.ID ) ) {

    							const model = modelMap.get( geoConnParent.ID );

    							model.bind( new jo( skeleton.bones ), bindMatrices[ geoConnParent.ID ] );

    						}

    					} );

    				}

    			} );

    		}

    	}

    	parsePoseNodes() {

    		const bindMatrices = {};

    		if ( 'Pose' in fbxTree.Objects ) {

    			const BindPoseNode = fbxTree.Objects.Pose;

    			for ( const nodeID in BindPoseNode ) {

    				if ( BindPoseNode[ nodeID ].attrType === 'BindPose' && BindPoseNode[ nodeID ].NbPoseNodes > 0 ) {

    					const poseNodes = BindPoseNode[ nodeID ].PoseNode;

    					if ( Array.isArray( poseNodes ) ) {

    						poseNodes.forEach( function ( poseNode ) {

    							bindMatrices[ poseNode.Node ] = new nr$1().fromArray( poseNode.Matrix.a );

    						} );

    					} else {

    						bindMatrices[ poseNodes.Node ] = new nr$1().fromArray( poseNodes.Matrix.a );

    					}

    				}

    			}

    		}

    		return bindMatrices;

    	}

    	addGlobalSceneSettings() {

    		if ( 'GlobalSettings' in fbxTree ) {

    			if ( 'AmbientColor' in fbxTree.GlobalSettings ) {

    				// Parse ambient color - if it's not set to black (default), create an ambient light

    				const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;
    				const r = ambientColor[ 0 ];
    				const g = ambientColor[ 1 ];
    				const b = ambientColor[ 2 ];

    				if ( r !== 0 || g !== 0 || b !== 0 ) {

    					//const color = new Color().setRGB( r, g, b, SRGBColorSpace );
    					const color = new $r$1().setRGB( r, g, b );
    					sceneGraph.add( new Ic( color, 1 ) );

    				}

    			}

    			if ( 'UnitScaleFactor' in fbxTree.GlobalSettings ) {

    				sceneGraph.userData.unitScaleFactor = fbxTree.GlobalSettings.UnitScaleFactor.value;

    			}

    		}

    	}

    }

    // parse Geometry data from FBXTree and return map of BufferGeometries
    class GeometryParser {

    	constructor() {

    		this.negativeMaterialIndices = false;

    	}

    	// Parse nodes in FBXTree.Objects.Geometry
    	parse( deformers ) {

    		const geometryMap = new Map();

    		if ( 'Geometry' in fbxTree.Objects ) {

    			const geoNodes = fbxTree.Objects.Geometry;

    			for ( const nodeID in geoNodes ) {

    				const relationships = connections.get( parseInt( nodeID ) );
    				const geo = this.parseGeometry( relationships, geoNodes[ nodeID ], deformers );

    				geometryMap.set( parseInt( nodeID ), geo );

    			}

    		}

    		// report warnings

    		if ( this.negativeMaterialIndices === true ) {

    			console.warn( 'THREE.FBXLoader: The FBX file contains invalid (negative) material indices. The asset might not render as expected.' );

    		}

    		return geometryMap;

    	}

    	// Parse single node in FBXTree.Objects.Geometry
    	parseGeometry( relationships, geoNode, deformers ) {

    		switch ( geoNode.attrType ) {

    			case 'Mesh':
    				return this.parseMeshGeometry( relationships, geoNode, deformers );

    			case 'NurbsCurve':
    				return this.parseNurbsGeometry( geoNode );

    		}

    	}

    	// Parse single node mesh geometry in FBXTree.Objects.Geometry
    	parseMeshGeometry( relationships, geoNode, deformers ) {

    		const skeletons = deformers.skeletons;
    		const morphTargets = [];

    		const modelNodes = relationships.parents.map( function ( parent ) {

    			return fbxTree.Objects.Model[ parent.ID ];

    		} );

    		// don't create geometry if it is not associated with any models
    		if ( modelNodes.length === 0 ) return;

    		const skeleton = relationships.children.reduce( function ( skeleton, child ) {

    			if ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];

    			return skeleton;

    		}, null );

    		relationships.children.forEach( function ( child ) {

    			if ( deformers.morphTargets[ child.ID ] !== undefined ) {

    				morphTargets.push( deformers.morphTargets[ child.ID ] );

    			}

    		} );

    		// Assume one model and get the preRotation from that
    		// if there is more than one model associated with the geometry this may cause problems
    		const modelNode = modelNodes[ 0 ];

    		const transformData = {};

    		if ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );
    		if ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );

    		if ( 'GeometricTranslation' in modelNode ) transformData.translation = modelNode.GeometricTranslation.value;
    		if ( 'GeometricRotation' in modelNode ) transformData.rotation = modelNode.GeometricRotation.value;
    		if ( 'GeometricScaling' in modelNode ) transformData.scale = modelNode.GeometricScaling.value;

    		const transform = generateTransform( transformData );

    		return this.genGeometry( geoNode, skeleton, morphTargets, transform );

    	}

    	// Generate a BufferGeometry from a node in FBXTree.Objects.Geometry
    	genGeometry( geoNode, skeleton, morphTargets, preTransform ) {

    		const geo = new zn$1();
    		if ( geoNode.attrName ) geo.name = geoNode.attrName;

    		const geoInfo = this.parseGeoNode( geoNode, skeleton );
    		const buffers = this.genBuffers( geoInfo );

    		const positionAttribute = new bn( buffers.vertex, 3 );

    		positionAttribute.applyMatrix4( preTransform );

    		geo.setAttribute( 'position', positionAttribute );

    		if ( buffers.colors.length > 0 ) {

    			geo.setAttribute( 'color', new bn( buffers.colors, 3 ) );

    		}

    		if ( skeleton ) {

    			geo.setAttribute( 'skinIndex', new yn$1( buffers.weightsIndices, 4 ) );

    			geo.setAttribute( 'skinWeight', new bn( buffers.vertexWeights, 4 ) );

    			// used later to bind the skeleton to the model
    			geo.FBX_Deformer = skeleton;

    		}

    		if ( buffers.normal.length > 0 ) {

    			const normalMatrix = new Gs().getNormalMatrix( preTransform );

    			const normalAttribute = new bn( buffers.normal, 3 );
    			normalAttribute.applyNormalMatrix( normalMatrix );

    			geo.setAttribute( 'normal', normalAttribute );

    		}

    		buffers.uvs.forEach( function ( uvBuffer, i ) {

    			const name = i === 0 ? 'uv' : `uv${ i }`;

    			geo.setAttribute( name, new bn( buffers.uvs[ i ], 2 ) );

    		} );

    		if ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {

    			// Convert the material indices of each vertex into rendering groups on the geometry.
    			let prevMaterialIndex = buffers.materialIndex[ 0 ];
    			let startIndex = 0;

    			buffers.materialIndex.forEach( function ( currentIndex, i ) {

    				if ( currentIndex !== prevMaterialIndex ) {

    					geo.addGroup( startIndex, i - startIndex, prevMaterialIndex );

    					prevMaterialIndex = currentIndex;
    					startIndex = i;

    				}

    			} );

    			// the loop above doesn't add the last group, do that here.
    			if ( geo.groups.length > 0 ) {

    				const lastGroup = geo.groups[ geo.groups.length - 1 ];
    				const lastIndex = lastGroup.start + lastGroup.count;

    				if ( lastIndex !== buffers.materialIndex.length ) {

    					geo.addGroup( lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex );

    				}

    			}

    			// case where there are multiple materials but the whole geometry is only
    			// using one of them
    			if ( geo.groups.length === 0 ) {

    				geo.addGroup( 0, buffers.materialIndex.length, buffers.materialIndex[ 0 ] );

    			}

    		}

    		this.addMorphTargets( geo, geoNode, morphTargets, preTransform );

    		return geo;

    	}

    	parseGeoNode( geoNode, skeleton ) {

    		const geoInfo = {};

    		geoInfo.vertexPositions = ( geoNode.Vertices !== undefined ) ? geoNode.Vertices.a : [];
    		geoInfo.vertexIndices = ( geoNode.PolygonVertexIndex !== undefined ) ? geoNode.PolygonVertexIndex.a : [];

    		if ( geoNode.LayerElementColor ) {

    			geoInfo.color = this.parseVertexColors( geoNode.LayerElementColor[ 0 ] );

    		}

    		if ( geoNode.LayerElementMaterial ) {

    			geoInfo.material = this.parseMaterialIndices( geoNode.LayerElementMaterial[ 0 ] );

    		}

    		if ( geoNode.LayerElementNormal ) {

    			geoInfo.normal = this.parseNormals( geoNode.LayerElementNormal[ 0 ] );

    		}

    		if ( geoNode.LayerElementUV ) {

    			geoInfo.uv = [];

    			let i = 0;
    			while ( geoNode.LayerElementUV[ i ] ) {

    				if ( geoNode.LayerElementUV[ i ].UV ) {

    					geoInfo.uv.push( this.parseUVs( geoNode.LayerElementUV[ i ] ) );

    				}

    				i ++;

    			}

    		}

    		geoInfo.weightTable = {};

    		if ( skeleton !== null ) {

    			geoInfo.skeleton = skeleton;

    			skeleton.rawBones.forEach( function ( rawBone, i ) {

    				// loop over the bone's vertex indices and weights
    				rawBone.indices.forEach( function ( index, j ) {

    					if ( geoInfo.weightTable[ index ] === undefined ) geoInfo.weightTable[ index ] = [];

    					geoInfo.weightTable[ index ].push( {

    						id: i,
    						weight: rawBone.weights[ j ],

    					} );

    				} );

    			} );

    		}

    		return geoInfo;

    	}

    	genBuffers( geoInfo ) {

    		const buffers = {
    			vertex: [],
    			normal: [],
    			colors: [],
    			uvs: [],
    			materialIndex: [],
    			vertexWeights: [],
    			weightsIndices: [],
    		};

    		let polygonIndex = 0;
    		let faceLength = 0;
    		let displayedWeightsWarning = false;

    		// these will hold data for a single face
    		let facePositionIndexes = [];
    		let faceNormals = [];
    		let faceColors = [];
    		let faceUVs = [];
    		let faceWeights = [];
    		let faceWeightIndices = [];

    		const scope = this;
    		geoInfo.vertexIndices.forEach( function ( vertexIndex, polygonVertexIndex ) {

    			let materialIndex;
    			let endOfFace = false;

    			// Face index and vertex index arrays are combined in a single array
    			// A cube with quad faces looks like this:
    			// PolygonVertexIndex: *24 {
    			//  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5
    			//  }
    			// Negative numbers mark the end of a face - first face here is 0, 1, 3, -3
    			// to find index of last vertex bit shift the index: ^ - 1
    			if ( vertexIndex < 0 ) {

    				vertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1
    				endOfFace = true;

    			}

    			let weightIndices = [];
    			let weights = [];

    			facePositionIndexes.push( vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2 );

    			if ( geoInfo.color ) {

    				const data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color );

    				faceColors.push( data[ 0 ], data[ 1 ], data[ 2 ] );

    			}

    			if ( geoInfo.skeleton ) {

    				if ( geoInfo.weightTable[ vertexIndex ] !== undefined ) {

    					geoInfo.weightTable[ vertexIndex ].forEach( function ( wt ) {

    						weights.push( wt.weight );
    						weightIndices.push( wt.id );

    					} );


    				}

    				if ( weights.length > 4 ) {

    					if ( ! displayedWeightsWarning ) {

    						console.warn( 'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.' );
    						displayedWeightsWarning = true;

    					}

    					const wIndex = [ 0, 0, 0, 0 ];
    					const Weight = [ 0, 0, 0, 0 ];

    					weights.forEach( function ( weight, weightIndex ) {

    						let currentWeight = weight;
    						let currentIndex = weightIndices[ weightIndex ];

    						Weight.forEach( function ( comparedWeight, comparedWeightIndex, comparedWeightArray ) {

    							if ( currentWeight > comparedWeight ) {

    								comparedWeightArray[ comparedWeightIndex ] = currentWeight;
    								currentWeight = comparedWeight;

    								const tmp = wIndex[ comparedWeightIndex ];
    								wIndex[ comparedWeightIndex ] = currentIndex;
    								currentIndex = tmp;

    							}

    						} );

    					} );

    					weightIndices = wIndex;
    					weights = Weight;

    				}

    				// if the weight array is shorter than 4 pad with 0s
    				while ( weights.length < 4 ) {

    					weights.push( 0 );
    					weightIndices.push( 0 );

    				}

    				for ( let i = 0; i < 4; ++ i ) {

    					faceWeights.push( weights[ i ] );
    					faceWeightIndices.push( weightIndices[ i ] );

    				}

    			}

    			if ( geoInfo.normal ) {

    				const data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal );

    				faceNormals.push( data[ 0 ], data[ 1 ], data[ 2 ] );

    			}

    			if ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {

    				materialIndex = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material )[ 0 ];

    				if ( materialIndex < 0 ) {

    					scope.negativeMaterialIndices = true;
    					materialIndex = 0; // fallback

    				}

    			}

    			if ( geoInfo.uv ) {

    				geoInfo.uv.forEach( function ( uv, i ) {

    					const data = getData( polygonVertexIndex, polygonIndex, vertexIndex, uv );

    					if ( faceUVs[ i ] === undefined ) {

    						faceUVs[ i ] = [];

    					}

    					faceUVs[ i ].push( data[ 0 ] );
    					faceUVs[ i ].push( data[ 1 ] );

    				} );

    			}

    			faceLength ++;

    			if ( endOfFace ) {

    				scope.genFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength );

    				polygonIndex ++;
    				faceLength = 0;

    				// reset arrays for the next face
    				facePositionIndexes = [];
    				faceNormals = [];
    				faceColors = [];
    				faceUVs = [];
    				faceWeights = [];
    				faceWeightIndices = [];

    			}

    		} );

    		return buffers;

    	}

    	// See https://www.khronos.org/opengl/wiki/Calculating_a_Surface_Normal
    	getNormalNewell( vertices ) {

    		const normal = new Ii$1( 0.0, 0.0, 0.0 );

    		for ( let i = 0; i < vertices.length; i ++ ) {

    			const current = vertices[ i ];
    			const next = vertices[ ( i + 1 ) % vertices.length ];

    			normal.x += ( current.y - next.y ) * ( current.z + next.z );
    			normal.y += ( current.z - next.z ) * ( current.x + next.x );
    			normal.z += ( current.x - next.x ) * ( current.y + next.y );

    		}

    		normal.normalize();

    		return normal;

    	}

    	getNormalTangentAndBitangent( vertices ) {

    		const normalVector = this.getNormalNewell( vertices );
    		// Avoid up being equal or almost equal to normalVector
    		const up = Math.abs( normalVector.z ) > 0.5 ? new Ii$1( 0.0, 1.0, 0.0 ) : new Ii$1( 0.0, 0.0, 1.0 );
    		const tangent = up.cross( normalVector ).normalize();
    		const bitangent = normalVector.clone().cross( tangent ).normalize();

    		return {
    			normal: normalVector,
    			tangent: tangent,
    			bitangent: bitangent
    		};

    	}

    	flattenVertex( vertex, normalTangent, normalBitangent ) {

    		return new Zs(
    			vertex.dot( normalTangent ),
    			vertex.dot( normalBitangent )
    		);

    	}

    	// Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris
    	genFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength ) {

    		let triangles;

    		if ( faceLength > 3 ) {

    			// Triangulate n-gon using earcut

    			const vertices = [];
    			// in morphing scenario vertexPositions represent morphPositions
    			// while baseVertexPositions represent the original geometry's positions
    			const positions = geoInfo.baseVertexPositions || geoInfo.vertexPositions;
    			for ( let i = 0; i < facePositionIndexes.length; i += 3 ) {

    				vertices.push(
    					new Ii$1(
    						positions[ facePositionIndexes[ i ] ],
    						positions[ facePositionIndexes[ i + 1 ] ],
    						positions[ facePositionIndexes[ i + 2 ] ]
    					)
    				);

    			}

    			const { tangent, bitangent } = this.getNormalTangentAndBitangent( vertices );
    			const triangulationInput = [];

    			for ( const vertex of vertices ) {

    				triangulationInput.push( this.flattenVertex( vertex, tangent, bitangent ) );

    			}

    			// When vertices is an array of [0,0,0] elements (which is the case for vertices not participating in morph)
    			// the triangulationInput will be an array of [0,0] elements
    			// resulting in an array of 0 triangles being returned from ShapeUtils.triangulateShape
    			// leading to not pushing into buffers.vertex the redundant vertices (the vertices that are not morphed).
    			// That's why, in order to support morphing scenario, "positions" is looking first for baseVertexPositions,
    			// so that we don't end up with an array of 0 triangles for the faces not participating in morph.
    			triangles = rl.triangulateShape( triangulationInput, [] );

    		} else {

    			// Regular triangle, skip earcut triangulation step
    			triangles = [[ 0, 1, 2 ]];

    		}

    		for ( const [ i0, i1, i2 ] of triangles ) {

    			buffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i0 * 3 ] ] );
    			buffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i0 * 3 + 1 ] ] );
    			buffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i0 * 3 + 2 ] ] );

    			buffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i1 * 3 ] ] );
    			buffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i1 * 3 + 1 ] ] );
    			buffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i1 * 3 + 2 ] ] );

    			buffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i2 * 3 ] ] );
    			buffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i2 * 3 + 1 ] ] );
    			buffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i2 * 3 + 2 ] ] );

    			if ( geoInfo.skeleton ) {

    				buffers.vertexWeights.push( faceWeights[ i0 * 4 ] );
    				buffers.vertexWeights.push( faceWeights[ i0 * 4 + 1 ] );
    				buffers.vertexWeights.push( faceWeights[ i0 * 4 + 2 ] );
    				buffers.vertexWeights.push( faceWeights[ i0 * 4 + 3 ] );

    				buffers.vertexWeights.push( faceWeights[ i1 * 4 ] );
    				buffers.vertexWeights.push( faceWeights[ i1 * 4 + 1 ] );
    				buffers.vertexWeights.push( faceWeights[ i1 * 4 + 2 ] );
    				buffers.vertexWeights.push( faceWeights[ i1 * 4 + 3 ] );

    				buffers.vertexWeights.push( faceWeights[ i2 * 4 ] );
    				buffers.vertexWeights.push( faceWeights[ i2 * 4 + 1 ] );
    				buffers.vertexWeights.push( faceWeights[ i2 * 4 + 2 ] );
    				buffers.vertexWeights.push( faceWeights[ i2 * 4 + 3 ] );

    				buffers.weightsIndices.push( faceWeightIndices[ i0 * 4 ] );
    				buffers.weightsIndices.push( faceWeightIndices[ i0 * 4 + 1 ] );
    				buffers.weightsIndices.push( faceWeightIndices[ i0 * 4 + 2 ] );
    				buffers.weightsIndices.push( faceWeightIndices[ i0 * 4 + 3 ] );

    				buffers.weightsIndices.push( faceWeightIndices[ i1 * 4 ] );
    				buffers.weightsIndices.push( faceWeightIndices[ i1 * 4 + 1 ] );
    				buffers.weightsIndices.push( faceWeightIndices[ i1 * 4 + 2 ] );
    				buffers.weightsIndices.push( faceWeightIndices[ i1 * 4 + 3 ] );

    				buffers.weightsIndices.push( faceWeightIndices[ i2 * 4 ] );
    				buffers.weightsIndices.push( faceWeightIndices[ i2 * 4 + 1 ] );
    				buffers.weightsIndices.push( faceWeightIndices[ i2 * 4 + 2 ] );
    				buffers.weightsIndices.push( faceWeightIndices[ i2 * 4 + 3 ] );

    			}

    			if ( geoInfo.color ) {

    				buffers.colors.push( faceColors[ i0 * 3 ] );
    				buffers.colors.push( faceColors[ i0 * 3 + 1 ] );
    				buffers.colors.push( faceColors[ i0 * 3 + 2 ] );

    				buffers.colors.push( faceColors[ i1 * 3 ] );
    				buffers.colors.push( faceColors[ i1 * 3 + 1 ] );
    				buffers.colors.push( faceColors[ i1 * 3 + 2 ] );

    				buffers.colors.push( faceColors[ i2 * 3 ] );
    				buffers.colors.push( faceColors[ i2 * 3 + 1 ] );
    				buffers.colors.push( faceColors[ i2 * 3 + 2 ] );

    			}

    			if ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {

    				buffers.materialIndex.push( materialIndex );
    				buffers.materialIndex.push( materialIndex );
    				buffers.materialIndex.push( materialIndex );

    			}

    			if ( geoInfo.normal ) {

    				buffers.normal.push( faceNormals[ i0 * 3 ] );
    				buffers.normal.push( faceNormals[ i0 * 3 + 1 ] );
    				buffers.normal.push( faceNormals[ i0 * 3 + 2 ] );

    				buffers.normal.push( faceNormals[ i1 * 3 ] );
    				buffers.normal.push( faceNormals[ i1 * 3 + 1 ] );
    				buffers.normal.push( faceNormals[ i1 * 3 + 2 ] );

    				buffers.normal.push( faceNormals[ i2 * 3 ] );
    				buffers.normal.push( faceNormals[ i2 * 3 + 1 ] );
    				buffers.normal.push( faceNormals[ i2 * 3 + 2 ] );

    			}

    			if ( geoInfo.uv ) {

    				geoInfo.uv.forEach( function ( uv, j ) {

    					if ( buffers.uvs[ j ] === undefined ) buffers.uvs[ j ] = [];

    					buffers.uvs[ j ].push( faceUVs[ j ][ i0 * 2 ] );
    					buffers.uvs[ j ].push( faceUVs[ j ][ i0 * 2 + 1 ] );

    					buffers.uvs[ j ].push( faceUVs[ j ][ i1 * 2 ] );
    					buffers.uvs[ j ].push( faceUVs[ j ][ i1 * 2 + 1 ] );

    					buffers.uvs[ j ].push( faceUVs[ j ][ i2 * 2 ] );
    					buffers.uvs[ j ].push( faceUVs[ j ][ i2 * 2 + 1 ] );

    				} );

    			}

    		}

    	}

    	addMorphTargets( parentGeo, parentGeoNode, morphTargets, preTransform ) {

    		if ( morphTargets.length === 0 ) return;

    		parentGeo.morphTargetsRelative = true;

    		parentGeo.morphAttributes.position = [];
    		// parentGeo.morphAttributes.normal = []; // not implemented

    		const scope = this;
    		morphTargets.forEach( function ( morphTarget ) {

    			morphTarget.rawTargets.forEach( function ( rawTarget ) {

    				const morphGeoNode = fbxTree.Objects.Geometry[ rawTarget.geoID ];

    				if ( morphGeoNode !== undefined ) {

    					scope.genMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name );

    				}

    			} );

    		} );

    	}

    	// a morph geometry node is similar to a standard  node, and the node is also contained
    	// in FBXTree.Objects.Geometry, however it can only have attributes for position, normal
    	// and a special attribute Index defining which vertices of the original geometry are affected
    	// Normal and position attributes only have data for the vertices that are affected by the morph
    	genMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, name ) {

    		const basePositions = parentGeoNode.Vertices !== undefined ? parentGeoNode.Vertices.a : [];
    		const baseIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];

    		const morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];
    		const morphIndices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];

    		const length = parentGeo.attributes.position.count * 3;
    		const morphPositions = new Float32Array( length );

    		for ( let i = 0; i < morphIndices.length; i ++ ) {

    			const morphIndex = morphIndices[ i ] * 3;

    			morphPositions[ morphIndex ] = morphPositionsSparse[ i * 3 ];
    			morphPositions[ morphIndex + 1 ] = morphPositionsSparse[ i * 3 + 1 ];
    			morphPositions[ morphIndex + 2 ] = morphPositionsSparse[ i * 3 + 2 ];

    		}

    		// TODO: add morph normal support
    		const morphGeoInfo = {
    			vertexIndices: baseIndices,
    			vertexPositions: morphPositions,
    			baseVertexPositions: basePositions
    		};

    		const morphBuffers = this.genBuffers( morphGeoInfo );

    		const positionAttribute = new bn( morphBuffers.vertex, 3 );
    		positionAttribute.name = name || morphGeoNode.attrName;

    		positionAttribute.applyMatrix4( preTransform );

    		parentGeo.morphAttributes.position.push( positionAttribute );

    	}

    	// Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists
    	parseNormals( NormalNode ) {

    		const mappingType = NormalNode.MappingInformationType;
    		const referenceType = NormalNode.ReferenceInformationType;
    		const buffer = NormalNode.Normals.a;
    		let indexBuffer = [];
    		if ( referenceType === 'IndexToDirect' ) {

    			if ( 'NormalIndex' in NormalNode ) {

    				indexBuffer = NormalNode.NormalIndex.a;

    			} else if ( 'NormalsIndex' in NormalNode ) {

    				indexBuffer = NormalNode.NormalsIndex.a;

    			}

    		}

    		return {
    			dataSize: 3,
    			buffer: buffer,
    			indices: indexBuffer,
    			mappingType: mappingType,
    			referenceType: referenceType
    		};

    	}

    	// Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists
    	parseUVs( UVNode ) {

    		const mappingType = UVNode.MappingInformationType;
    		const referenceType = UVNode.ReferenceInformationType;
    		const buffer = UVNode.UV.a;
    		let indexBuffer = [];
    		if ( referenceType === 'IndexToDirect' ) {

    			indexBuffer = UVNode.UVIndex.a;

    		}

    		return {
    			dataSize: 2,
    			buffer: buffer,
    			indices: indexBuffer,
    			mappingType: mappingType,
    			referenceType: referenceType
    		};

    	}

    	// Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists
    	parseVertexColors( ColorNode ) {

    		const mappingType = ColorNode.MappingInformationType;
    		const referenceType = ColorNode.ReferenceInformationType;
    		const buffer = ColorNode.Colors.a;
    		let indexBuffer = [];
    		if ( referenceType === 'IndexToDirect' ) {

    			indexBuffer = ColorNode.ColorIndex.a;

    		}

    		for ( let i = 0, c = new $r$1(); i < buffer.length; i += 4 ) {

    			c.fromArray( buffer, i );
    			ui$1.toWorkingColorSpace( c, Ge );
    			//ColorManagement.toWorkingColorSpace( c, LinearSRGBColorSpace );
    			c.toArray( buffer, i );

    		}

    		return {
    			dataSize: 4,
    			buffer: buffer,
    			indices: indexBuffer,
    			mappingType: mappingType,
    			referenceType: referenceType
    		};

    	}

    	// Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists
    	parseMaterialIndices( MaterialNode ) {

    		const mappingType = MaterialNode.MappingInformationType;
    		const referenceType = MaterialNode.ReferenceInformationType;

    		if ( mappingType === 'NoMappingInformation' ) {

    			return {
    				dataSize: 1,
    				buffer: [ 0 ],
    				indices: [ 0 ],
    				mappingType: 'AllSame',
    				referenceType: referenceType
    			};

    		}

    		const materialIndexBuffer = MaterialNode.Materials.a;

    		// Since materials are stored as indices, there's a bit of a mismatch between FBX and what
    		// we expect.So we create an intermediate buffer that points to the index in the buffer,
    		// for conforming with the other functions we've written for other data.
    		const materialIndices = [];

    		for ( let i = 0; i < materialIndexBuffer.length; ++ i ) {

    			materialIndices.push( i );

    		}

    		return {
    			dataSize: 1,
    			buffer: materialIndexBuffer,
    			indices: materialIndices,
    			mappingType: mappingType,
    			referenceType: referenceType
    		};

    	}

    	// Generate a NurbGeometry from a node in FBXTree.Objects.Geometry
    	parseNurbsGeometry( geoNode ) {

    		const order = parseInt( geoNode.Order );

    		if ( isNaN( order ) ) {

    			console.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id );
    			return new zn$1();

    		}

    		const degree = order - 1;

    		const knots = geoNode.KnotVector.a;
    		const controlPoints = [];
    		const pointsValues = geoNode.Points.a;

    		for ( let i = 0, l = pointsValues.length; i < l; i += 4 ) {

    			controlPoints.push( new wi$1().fromArray( pointsValues, i ) );

    		}

    		let startKnot, endKnot;

    		if ( geoNode.Form === 'Closed' ) {

    			controlPoints.push( controlPoints[ 0 ] );

    		} else if ( geoNode.Form === 'Periodic' ) {

    			startKnot = degree;
    			endKnot = knots.length - 1 - startKnot;

    			for ( let i = 0; i < degree; ++ i ) {

    				controlPoints.push( controlPoints[ i ] );

    			}

    		}

    		const curve = new NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );
    		const points = curve.getPoints( controlPoints.length * 12 );

    		return new zn$1().setFromPoints( points );

    	}

    }

    // parse animation data from FBXTree
    class AnimationParser {

    	// take raw animation clips and turn them into three.js animation clips
    	parse() {

    		const animationClips = [];

    		const rawClips = this.parseClips();

    		if ( rawClips !== undefined ) {

    			for ( const key in rawClips ) {

    				const rawClip = rawClips[ key ];

    				const clip = this.addClip( rawClip );

    				animationClips.push( clip );

    			}

    		}

    		return animationClips;

    	}

    	parseClips() {

    		// since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,
    		// if this is undefined we can safely assume there are no animations
    		if ( fbxTree.Objects.AnimationCurve === undefined ) return undefined;

    		const curveNodesMap = this.parseAnimationCurveNodes();

    		this.parseAnimationCurves( curveNodesMap );

    		const layersMap = this.parseAnimationLayers( curveNodesMap );
    		const rawClips = this.parseAnimStacks( layersMap );

    		return rawClips;

    	}

    	// parse nodes in FBXTree.Objects.AnimationCurveNode
    	// each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )
    	// and is referenced by an AnimationLayer
    	parseAnimationCurveNodes() {

    		const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;

    		const curveNodesMap = new Map();

    		for ( const nodeID in rawCurveNodes ) {

    			const rawCurveNode = rawCurveNodes[ nodeID ];

    			if ( rawCurveNode.attrName.match( /S|R|T|DeformPercent/ ) !== null ) {

    				const curveNode = {

    					id: rawCurveNode.id,
    					attr: rawCurveNode.attrName,
    					curves: {},

    				};

    				curveNodesMap.set( curveNode.id, curveNode );

    			}

    		}

    		return curveNodesMap;

    	}

    	// parse nodes in FBXTree.Objects.AnimationCurve and connect them up to
    	// previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated
    	// axis ( e.g. times and values of x rotation)
    	parseAnimationCurves( curveNodesMap ) {

    		const rawCurves = fbxTree.Objects.AnimationCurve;

    		// TODO: Many values are identical up to roundoff error, but won't be optimised
    		// e.g. position times: [0, 0.4, 0. 8]
    		// position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]
    		// clearly, this should be optimised to
    		// times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]
    		// this shows up in nearly every FBX file, and generally time array is length > 100

    		for ( const nodeID in rawCurves ) {

    			const animationCurve = {

    				id: rawCurves[ nodeID ].id,
    				times: rawCurves[ nodeID ].KeyTime.a.map( convertFBXTimeToSeconds ),
    				values: rawCurves[ nodeID ].KeyValueFloat.a,

    			};

    			const relationships = connections.get( animationCurve.id );

    			if ( relationships !== undefined ) {

    				const animationCurveID = relationships.parents[ 0 ].ID;
    				const animationCurveRelationship = relationships.parents[ 0 ].relationship;

    				if ( animationCurveRelationship.match( /X/ ) ) {

    					curveNodesMap.get( animationCurveID ).curves[ 'x' ] = animationCurve;

    				} else if ( animationCurveRelationship.match( /Y/ ) ) {

    					curveNodesMap.get( animationCurveID ).curves[ 'y' ] = animationCurve;

    				} else if ( animationCurveRelationship.match( /Z/ ) ) {

    					curveNodesMap.get( animationCurveID ).curves[ 'z' ] = animationCurve;

    				} else if ( animationCurveRelationship.match( /DeformPercent/ ) && curveNodesMap.has( animationCurveID ) ) {

    					curveNodesMap.get( animationCurveID ).curves[ 'morph' ] = animationCurve;

    				}

    			}

    		}

    	}

    	// parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references
    	// to various AnimationCurveNodes and is referenced by an AnimationStack node
    	// note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack
    	parseAnimationLayers( curveNodesMap ) {

    		const rawLayers = fbxTree.Objects.AnimationLayer;

    		const layersMap = new Map();

    		for ( const nodeID in rawLayers ) {

    			const layerCurveNodes = [];

    			const connection = connections.get( parseInt( nodeID ) );

    			if ( connection !== undefined ) {

    				// all the animationCurveNodes used in the layer
    				const children = connection.children;

    				children.forEach( function ( child, i ) {

    					if ( curveNodesMap.has( child.ID ) ) {

    						const curveNode = curveNodesMap.get( child.ID );

    						// check that the curves are defined for at least one axis, otherwise ignore the curveNode
    						if ( curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined ) {

    							if ( layerCurveNodes[ i ] === undefined ) {

    								const modelID = connections.get( child.ID ).parents.filter( function ( parent ) {

    									return parent.relationship !== undefined;

    								} )[ 0 ].ID;

    								if ( modelID !== undefined ) {

    									const rawModel = fbxTree.Objects.Model[ modelID.toString() ];

    									if ( rawModel === undefined ) {

    										console.warn( 'THREE.FBXLoader: Encountered a unused curve.', child );
    										return;

    									}

    									const node = {

    										modelName: rawModel.attrName ? gu.sanitizeNodeName( rawModel.attrName ) : '',
    										ID: rawModel.id,
    										initialPosition: [ 0, 0, 0 ],
    										initialRotation: [ 0, 0, 0 ],
    										initialScale: [ 1, 1, 1 ],

    									};

    									sceneGraph.traverse( function ( child ) {

    										if ( child.ID === rawModel.id ) {

    											node.transform = child.matrix;

    											if ( child.userData.transformData ) node.eulerOrder = child.userData.transformData.eulerOrder;

    										}

    									} );

    									if ( ! node.transform ) node.transform = new nr$1();

    									// if the animated model is pre rotated, we'll have to apply the pre rotations to every
    									// animation value as well
    									if ( 'PreRotation' in rawModel ) node.preRotation = rawModel.PreRotation.value;
    									if ( 'PostRotation' in rawModel ) node.postRotation = rawModel.PostRotation.value;

    									layerCurveNodes[ i ] = node;

    								}

    							}

    							if ( layerCurveNodes[ i ] ) layerCurveNodes[ i ][ curveNode.attr ] = curveNode;

    						} else if ( curveNode.curves.morph !== undefined ) {

    							if ( layerCurveNodes[ i ] === undefined ) {

    								const deformerID = connections.get( child.ID ).parents.filter( function ( parent ) {

    									return parent.relationship !== undefined;

    								} )[ 0 ].ID;

    								const morpherID = connections.get( deformerID ).parents[ 0 ].ID;
    								const geoID = connections.get( morpherID ).parents[ 0 ].ID;

    								// assuming geometry is not used in more than one model
    								const modelID = connections.get( geoID ).parents[ 0 ].ID;

    								const rawModel = fbxTree.Objects.Model[ modelID ];

    								const node = {

    									modelName: rawModel.attrName ? gu.sanitizeNodeName( rawModel.attrName ) : '',
    									morphName: fbxTree.Objects.Deformer[ deformerID ].attrName,

    								};

    								layerCurveNodes[ i ] = node;

    							}

    							layerCurveNodes[ i ][ curveNode.attr ] = curveNode;

    						}

    					}

    				} );

    				layersMap.set( parseInt( nodeID ), layerCurveNodes );

    			}

    		}

    		return layersMap;

    	}

    	// parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation
    	// hierarchy. Each Stack node will be used to create a AnimationClip
    	parseAnimStacks( layersMap ) {

    		const rawStacks = fbxTree.Objects.AnimationStack;

    		// connect the stacks (clips) up to the layers
    		const rawClips = {};

    		for ( const nodeID in rawStacks ) {

    			const children = connections.get( parseInt( nodeID ) ).children;

    			if ( children.length > 1 ) {

    				// it seems like stacks will always be associated with a single layer. But just in case there are files
    				// where there are multiple layers per stack, we'll display a warning
    				console.warn( 'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.' );

    			}

    			const layer = layersMap.get( children[ 0 ].ID );

    			rawClips[ nodeID ] = {

    				name: rawStacks[ nodeID ].attrName,
    				layer: layer,

    			};

    		}

    		return rawClips;

    	}

    	addClip( rawClip ) {

    		let tracks = [];

    		const scope = this;
    		rawClip.layer.forEach( function ( rawTracks ) {

    			tracks = tracks.concat( scope.generateTracks( rawTracks ) );

    		} );

    		return new Ql( rawClip.name, - 1, tracks );

    	}

    	generateTracks( rawTracks ) {

    		const tracks = [];

    		let initialPosition = new Ii$1();
    		let initialScale = new Ii$1();

    		if ( rawTracks.transform ) rawTracks.transform.decompose( initialPosition, new Ci$1(), initialScale );

    		initialPosition = initialPosition.toArray();
    		initialScale = initialScale.toArray();

    		if ( rawTracks.T !== undefined && Object.keys( rawTracks.T.curves ).length > 0 ) {

    			const positionTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position' );
    			if ( positionTrack !== undefined ) tracks.push( positionTrack );

    		}

    		if ( rawTracks.R !== undefined && Object.keys( rawTracks.R.curves ).length > 0 ) {

    			const rotationTrack = this.generateRotationTrack( rawTracks.modelName, rawTracks.R.curves, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder );
    			if ( rotationTrack !== undefined ) tracks.push( rotationTrack );

    		}

    		if ( rawTracks.S !== undefined && Object.keys( rawTracks.S.curves ).length > 0 ) {

    			const scaleTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale' );
    			if ( scaleTrack !== undefined ) tracks.push( scaleTrack );

    		}

    		if ( rawTracks.DeformPercent !== undefined ) {

    			const morphTrack = this.generateMorphTrack( rawTracks );
    			if ( morphTrack !== undefined ) tracks.push( morphTrack );

    		}

    		return tracks;

    	}

    	generateVectorTrack( modelName, curves, initialValue, type ) {

    		const times = this.getTimesForAllAxes( curves );
    		const values = this.getKeyframeTrackValues( times, curves, initialValue );

    		return new $l( modelName + '.' + type, times, values );

    	}

    	generateRotationTrack( modelName, curves, preRotation, postRotation, eulerOrder ) {

    		let times;
    		let values;

    		if ( curves.x !== undefined && curves.y !== undefined && curves.z !== undefined ) {

    			const result = this.interpolateRotations( curves.x, curves.y, curves.z, eulerOrder );

    			times = result[ 0 ];
    			values = result[ 1 ];

    		}

    		// For Maya models using "Joint Orient", Euler order only applies to rotation, not pre/post-rotations
    		const defaultEulerOrder = getEulerOrder( 0 );

    		if ( preRotation !== undefined ) {

    			preRotation = preRotation.map( Ys.degToRad );
    			preRotation.push( defaultEulerOrder );

    			preRotation = new yr$1().fromArray( preRotation );
    			preRotation = new Ci$1().setFromEuler( preRotation );

    		}

    		if ( postRotation !== undefined ) {

    			postRotation = postRotation.map( Ys.degToRad );
    			postRotation.push( defaultEulerOrder );

    			postRotation = new yr$1().fromArray( postRotation );
    			postRotation = new Ci$1().setFromEuler( postRotation ).invert();

    		}

    		const quaternion = new Ci$1();
    		const euler = new yr$1();

    		const quaternionValues = [];

    		if ( ! values || ! times ) return new Zl( modelName + '.quaternion', [ 0 ], [ 0 ] );

    		for ( let i = 0; i < values.length; i += 3 ) {

    			euler.set( values[ i ], values[ i + 1 ], values[ i + 2 ], eulerOrder );
    			quaternion.setFromEuler( euler );

    			if ( preRotation !== undefined ) quaternion.premultiply( preRotation );
    			if ( postRotation !== undefined ) quaternion.multiply( postRotation );

    			// Check unroll
    			if ( i > 2 ) {

    				const prevQuat = new Ci$1().fromArray(
    					quaternionValues,
    					( ( i - 3 ) / 3 ) * 4
    				);

    				if ( prevQuat.dot( quaternion ) < 0 ) {

    					quaternion.set( - quaternion.x, - quaternion.y, - quaternion.z, - quaternion.w );

    				}

    			}

    			quaternion.toArray( quaternionValues, ( i / 3 ) * 4 );

    		}

    		return new Zl( modelName + '.quaternion', times, quaternionValues );

    	}

    	generateMorphTrack( rawTracks ) {

    		const curves = rawTracks.DeformPercent.curves.morph;
    		const values = curves.values.map( function ( val ) {

    			return val / 100;

    		} );

    		const morphNum = sceneGraph.getObjectByName( rawTracks.modelName ).morphTargetDictionary[ rawTracks.morphName ];

    		return new Xl( rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values );

    	}

    	// For all animated objects, times are defined separately for each axis
    	// Here we'll combine the times into one sorted array without duplicates
    	getTimesForAllAxes( curves ) {

    		let times = [];

    		// first join together the times for each axis, if defined
    		if ( curves.x !== undefined ) times = times.concat( curves.x.times );
    		if ( curves.y !== undefined ) times = times.concat( curves.y.times );
    		if ( curves.z !== undefined ) times = times.concat( curves.z.times );

    		// then sort them
    		times = times.sort( function ( a, b ) {

    			return a - b;

    		} );

    		// and remove duplicates
    		if ( times.length > 1 ) {

    			let targetIndex = 1;
    			let lastValue = times[ 0 ];
    			for ( let i = 1; i < times.length; i ++ ) {

    				const currentValue = times[ i ];
    				if ( currentValue !== lastValue ) {

    					times[ targetIndex ] = currentValue;
    					lastValue = currentValue;
    					targetIndex ++;

    				}

    			}

    			times = times.slice( 0, targetIndex );

    		}

    		return times;

    	}

    	getKeyframeTrackValues( times, curves, initialValue ) {

    		const prevValue = initialValue;

    		const values = [];

    		let xIndex = - 1;
    		let yIndex = - 1;
    		let zIndex = - 1;

    		times.forEach( function ( time ) {

    			if ( curves.x ) xIndex = curves.x.times.indexOf( time );
    			if ( curves.y ) yIndex = curves.y.times.indexOf( time );
    			if ( curves.z ) zIndex = curves.z.times.indexOf( time );

    			// if there is an x value defined for this frame, use that
    			if ( xIndex !== - 1 ) {

    				const xValue = curves.x.values[ xIndex ];
    				values.push( xValue );
    				prevValue[ 0 ] = xValue;

    			} else {

    				// otherwise use the x value from the previous frame
    				values.push( prevValue[ 0 ] );

    			}

    			if ( yIndex !== - 1 ) {

    				const yValue = curves.y.values[ yIndex ];
    				values.push( yValue );
    				prevValue[ 1 ] = yValue;

    			} else {

    				values.push( prevValue[ 1 ] );

    			}

    			if ( zIndex !== - 1 ) {

    				const zValue = curves.z.values[ zIndex ];
    				values.push( zValue );
    				prevValue[ 2 ] = zValue;

    			} else {

    				values.push( prevValue[ 2 ] );

    			}

    		} );

    		return values;

    	}

    	// Rotations are defined as Euler angles which can have values  of any size
    	// These will be converted to quaternions which don't support values greater than
    	// PI, so we'll interpolate large rotations
    	interpolateRotations( curvex, curvey, curvez, eulerOrder ) {

    		const times = [];
    		const values = [];

    		// Add first frame
    		times.push( curvex.times[ 0 ] );
    		values.push( Ys.degToRad( curvex.values[ 0 ] ) );
    		values.push( Ys.degToRad( curvey.values[ 0 ] ) );
    		values.push( Ys.degToRad( curvez.values[ 0 ] ) );

    		for ( let i = 1; i < curvex.values.length; i ++ ) {

    			const initialValue = [
    				curvex.values[ i - 1 ],
    				curvey.values[ i - 1 ],
    				curvez.values[ i - 1 ],
    			];

    			if ( isNaN( initialValue[ 0 ] ) || isNaN( initialValue[ 1 ] ) || isNaN( initialValue[ 2 ] ) ) {

    				continue;

    			}

    			const initialValueRad = initialValue.map( Ys.degToRad );

    			const currentValue = [
    				curvex.values[ i ],
    				curvey.values[ i ],
    				curvez.values[ i ],
    			];

    			if ( isNaN( currentValue[ 0 ] ) || isNaN( currentValue[ 1 ] ) || isNaN( currentValue[ 2 ] ) ) {

    				continue;

    			}

    			const currentValueRad = currentValue.map( Ys.degToRad );

    			const valuesSpan = [
    				currentValue[ 0 ] - initialValue[ 0 ],
    				currentValue[ 1 ] - initialValue[ 1 ],
    				currentValue[ 2 ] - initialValue[ 2 ],
    			];

    			const absoluteSpan = [
    				Math.abs( valuesSpan[ 0 ] ),
    				Math.abs( valuesSpan[ 1 ] ),
    				Math.abs( valuesSpan[ 2 ] ),
    			];

    			if ( absoluteSpan[ 0 ] >= 180 || absoluteSpan[ 1 ] >= 180 || absoluteSpan[ 2 ] >= 180 ) {

    				const maxAbsSpan = Math.max( ...absoluteSpan );

    				const numSubIntervals = maxAbsSpan / 180;

    				const E1 = new yr$1( ...initialValueRad, eulerOrder );
    				const E2 = new yr$1( ...currentValueRad, eulerOrder );

    				const Q1 = new Ci$1().setFromEuler( E1 );
    				const Q2 = new Ci$1().setFromEuler( E2 );

    				// Check unroll
    				if ( Q1.dot( Q2 ) ) {

    					Q2.set( - Q2.x, - Q2.y, - Q2.z, - Q2.w );

    				}

    				// Interpolate
    				const initialTime = curvex.times[ i - 1 ];
    				const timeSpan = curvex.times[ i ] - initialTime;

    				const Q = new Ci$1();
    				const E = new yr$1();
    				for ( let t = 0; t < 1; t += 1 / numSubIntervals ) {

    					Q.copy( Q1.clone().slerp( Q2.clone(), t ) );

    					times.push( initialTime + t * timeSpan );
    					E.setFromQuaternion( Q, eulerOrder );

    					values.push( E.x );
    					values.push( E.y );
    					values.push( E.z );

    				}

    			} else {

    				times.push( curvex.times[ i ] );
    				values.push( Ys.degToRad( curvex.values[ i ] ) );
    				values.push( Ys.degToRad( curvey.values[ i ] ) );
    				values.push( Ys.degToRad( curvez.values[ i ] ) );

    			}

    		}

    		return [ times, values ];

    	}

    }

    // parse an FBX file in ASCII format
    class TextParser {

    	getPrevNode() {

    		return this.nodeStack[ this.currentIndent - 2 ];

    	}

    	getCurrentNode() {

    		return this.nodeStack[ this.currentIndent - 1 ];

    	}

    	getCurrentProp() {

    		return this.currentProp;

    	}

    	pushStack( node ) {

    		this.nodeStack.push( node );
    		this.currentIndent += 1;

    	}

    	popStack() {

    		this.nodeStack.pop();
    		this.currentIndent -= 1;

    	}

    	setCurrentProp( val, name ) {

    		this.currentProp = val;
    		this.currentPropName = name;

    	}

    	parse( text ) {

    		this.currentIndent = 0;

    		this.allNodes = new FBXTree();
    		this.nodeStack = [];
    		this.currentProp = [];
    		this.currentPropName = '';

    		const scope = this;

    		const split = text.split( /[\r\n]+/ );

    		split.forEach( function ( line, i ) {

    			const matchComment = line.match( /^[\s\t]*;/ );
    			const matchEmpty = line.match( /^[\s\t]*$/ );

    			if ( matchComment || matchEmpty ) return;

    			const matchBeginning = line.match( '^\\t{' + scope.currentIndent + '}(\\w+):(.*){', '' );
    			const matchProperty = line.match( '^\\t{' + ( scope.currentIndent ) + '}(\\w+):[\\s\\t\\r\\n](.*)' );
    			const matchEnd = line.match( '^\\t{' + ( scope.currentIndent - 1 ) + '}}' );

    			if ( matchBeginning ) {

    				scope.parseNodeBegin( line, matchBeginning );

    			} else if ( matchProperty ) {

    				scope.parseNodeProperty( line, matchProperty, split[ ++ i ] );

    			} else if ( matchEnd ) {

    				scope.popStack();

    			} else if ( line.match( /^[^\s\t}]/ ) ) {

    				// large arrays are split over multiple lines terminated with a ',' character
    				// if this is encountered the line needs to be joined to the previous line
    				scope.parseNodePropertyContinued( line );

    			}

    		} );

    		return this.allNodes;

    	}

    	parseNodeBegin( line, property ) {

    		const nodeName = property[ 1 ].trim().replace( /^"/, '' ).replace( /"$/, '' );

    		const nodeAttrs = property[ 2 ].split( ',' ).map( function ( attr ) {

    			return attr.trim().replace( /^"/, '' ).replace( /"$/, '' );

    		} );

    		const node = { name: nodeName };
    		const attrs = this.parseNodeAttr( nodeAttrs );

    		const currentNode = this.getCurrentNode();

    		// a top node
    		if ( this.currentIndent === 0 ) {

    			this.allNodes.add( nodeName, node );

    		} else { // a subnode

    			// if the subnode already exists, append it
    			if ( nodeName in currentNode ) {

    				// special case Pose needs PoseNodes as an array
    				if ( nodeName === 'PoseNode' ) {

    					currentNode.PoseNode.push( node );

    				} else if ( currentNode[ nodeName ].id !== undefined ) {

    					currentNode[ nodeName ] = {};
    					currentNode[ nodeName ][ currentNode[ nodeName ].id ] = currentNode[ nodeName ];

    				}

    				if ( attrs.id !== '' ) currentNode[ nodeName ][ attrs.id ] = node;

    			} else if ( typeof attrs.id === 'number' ) {

    				currentNode[ nodeName ] = {};
    				currentNode[ nodeName ][ attrs.id ] = node;

    			} else if ( nodeName !== 'Properties70' ) {

    				if ( nodeName === 'PoseNode' )	currentNode[ nodeName ] = [ node ];
    				else currentNode[ nodeName ] = node;

    			}

    		}

    		if ( typeof attrs.id === 'number' ) node.id = attrs.id;
    		if ( attrs.name !== '' ) node.attrName = attrs.name;
    		if ( attrs.type !== '' ) node.attrType = attrs.type;

    		this.pushStack( node );

    	}

    	parseNodeAttr( attrs ) {

    		let id = attrs[ 0 ];

    		if ( attrs[ 0 ] !== '' ) {

    			id = parseInt( attrs[ 0 ] );

    			if ( isNaN( id ) ) {

    				id = attrs[ 0 ];

    			}

    		}

    		let name = '', type = '';

    		if ( attrs.length > 1 ) {

    			name = attrs[ 1 ].replace( /^(\w+)::/, '' );
    			type = attrs[ 2 ];

    		}

    		return { id: id, name: name, type: type };

    	}

    	parseNodeProperty( line, property, contentLine ) {

    		let propName = property[ 1 ].replace( /^"/, '' ).replace( /"$/, '' ).trim();
    		let propValue = property[ 2 ].replace( /^"/, '' ).replace( /"$/, '' ).trim();

    		// for special case: base64 image data follows "Content: ," line
    		//	Content: ,
    		//	 "/9j/4RDaRXhpZgAATU0A..."
    		if ( propName === 'Content' && propValue === ',' ) {

    			propValue = contentLine.replace( /"/g, '' ).replace( /,$/, '' ).trim();

    		}

    		const currentNode = this.getCurrentNode();
    		const parentName = currentNode.name;

    		if ( parentName === 'Properties70' ) {

    			this.parseNodeSpecialProperty( line, propName, propValue );
    			return;

    		}

    		// Connections
    		if ( propName === 'C' ) {

    			const connProps = propValue.split( ',' ).slice( 1 );
    			const from = parseInt( connProps[ 0 ] );
    			const to = parseInt( connProps[ 1 ] );

    			let rest = propValue.split( ',' ).slice( 3 );

    			rest = rest.map( function ( elem ) {

    				return elem.trim().replace( /^"/, '' );

    			} );

    			propName = 'connections';
    			propValue = [ from, to ];
    			append( propValue, rest );

    			if ( currentNode[ propName ] === undefined ) {

    				currentNode[ propName ] = [];

    			}

    		}

    		// Node
    		if ( propName === 'Node' ) currentNode.id = propValue;

    		// connections
    		if ( propName in currentNode && Array.isArray( currentNode[ propName ] ) ) {

    			currentNode[ propName ].push( propValue );

    		} else {

    			if ( propName !== 'a' ) currentNode[ propName ] = propValue;
    			else currentNode.a = propValue;

    		}

    		this.setCurrentProp( currentNode, propName );

    		// convert string to array, unless it ends in ',' in which case more will be added to it
    		if ( propName === 'a' && propValue.slice( - 1 ) !== ',' ) {

    			currentNode.a = parseNumberArray( propValue );

    		}

    	}

    	parseNodePropertyContinued( line ) {

    		const currentNode = this.getCurrentNode();

    		currentNode.a += line;

    		// if the line doesn't end in ',' we have reached the end of the property value
    		// so convert the string to an array
    		if ( line.slice( - 1 ) !== ',' ) {

    			currentNode.a = parseNumberArray( currentNode.a );

    		}

    	}

    	// parse "Property70"
    	parseNodeSpecialProperty( line, propName, propValue ) {

    		// split this
    		// P: "Lcl Scaling", "Lcl Scaling", "", "A",1,1,1
    		// into array like below
    		// ["Lcl Scaling", "Lcl Scaling", "", "A", "1,1,1" ]
    		const props = propValue.split( '",' ).map( function ( prop ) {

    			return prop.trim().replace( /^\"/, '' ).replace( /\s/, '_' );

    		} );

    		const innerPropName = props[ 0 ];
    		const innerPropType1 = props[ 1 ];
    		const innerPropType2 = props[ 2 ];
    		const innerPropFlag = props[ 3 ];
    		let innerPropValue = props[ 4 ];

    		// cast values where needed, otherwise leave as strings
    		switch ( innerPropType1 ) {

    			case 'int':
    			case 'enum':
    			case 'bool':
    			case 'ULongLong':
    			case 'double':
    			case 'Number':
    			case 'FieldOfView':
    				innerPropValue = parseFloat( innerPropValue );
    				break;

    			case 'Color':
    			case 'ColorRGB':
    			case 'Vector3D':
    			case 'Lcl_Translation':
    			case 'Lcl_Rotation':
    			case 'Lcl_Scaling':
    				innerPropValue = parseNumberArray( innerPropValue );
    				break;

    		}

    		// CAUTION: these props must append to parent's parent
    		this.getPrevNode()[ innerPropName ] = {

    			'type': innerPropType1,
    			'type2': innerPropType2,
    			'flag': innerPropFlag,
    			'value': innerPropValue

    		};

    		this.setCurrentProp( this.getPrevNode(), innerPropName );

    	}

    }

    // Parse an FBX file in Binary format
    class BinaryParser {

    	parse( buffer ) {

    		const reader = new BinaryReader( buffer );
    		reader.skip( 23 ); // skip magic 23 bytes

    		const version = reader.getUint32();

    		if ( version < 6400 ) {

    			throw new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + version );

    		}

    		const allNodes = new FBXTree();

    		while ( ! this.endOfContent( reader ) ) {

    			const node = this.parseNode( reader, version );
    			if ( node !== null ) allNodes.add( node.name, node );

    		}

    		return allNodes;

    	}

    	// Check if reader has reached the end of content.
    	endOfContent( reader ) {

    		// footer size: 160bytes + 16-byte alignment padding
    		// - 16bytes: magic
    		// - padding til 16-byte alignment (at least 1byte?)
    		//	(seems like some exporters embed fixed 15 or 16bytes?)
    		// - 4bytes: magic
    		// - 4bytes: version
    		// - 120bytes: zero
    		// - 16bytes: magic
    		if ( reader.size() % 16 === 0 ) {

    			return ( ( reader.getOffset() + 160 + 16 ) & ~ 0xf ) >= reader.size();

    		} else {

    			return reader.getOffset() + 160 + 16 >= reader.size();

    		}

    	}

    	// recursively parse nodes until the end of the file is reached
    	parseNode( reader, version ) {

    		const node = {};

    		// The first three data sizes depends on version.
    		const endOffset = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();
    		const numProperties = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();

    		( version >= 7500 ) ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used

    		const nameLen = reader.getUint8();
    		const name = reader.getString( nameLen );

    		// Regards this node as NULL-record if endOffset is zero
    		if ( endOffset === 0 ) return null;

    		const propertyList = [];

    		for ( let i = 0; i < numProperties; i ++ ) {

    			propertyList.push( this.parseProperty( reader ) );

    		}

    		// Regards the first three elements in propertyList as id, attrName, and attrType
    		const id = propertyList.length > 0 ? propertyList[ 0 ] : '';
    		const attrName = propertyList.length > 1 ? propertyList[ 1 ] : '';
    		const attrType = propertyList.length > 2 ? propertyList[ 2 ] : '';

    		// check if this node represents just a single property
    		// like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}
    		node.singleProperty = ( numProperties === 1 && reader.getOffset() === endOffset ) ? true : false;

    		while ( endOffset > reader.getOffset() ) {

    			const subNode = this.parseNode( reader, version );

    			if ( subNode !== null ) this.parseSubNode( name, node, subNode );

    		}

    		node.propertyList = propertyList; // raw property list used by parent

    		if ( typeof id === 'number' ) node.id = id;
    		if ( attrName !== '' ) node.attrName = attrName;
    		if ( attrType !== '' ) node.attrType = attrType;
    		if ( name !== '' ) node.name = name;

    		return node;

    	}

    	parseSubNode( name, node, subNode ) {

    		// special case: child node is single property
    		if ( subNode.singleProperty === true ) {

    			const value = subNode.propertyList[ 0 ];

    			if ( Array.isArray( value ) ) {

    				node[ subNode.name ] = subNode;

    				subNode.a = value;

    			} else {

    				node[ subNode.name ] = value;

    			}

    		} else if ( name === 'Connections' && subNode.name === 'C' ) {

    			const array = [];

    			subNode.propertyList.forEach( function ( property, i ) {

    				// first Connection is FBX type (OO, OP, etc.). We'll discard these
    				if ( i !== 0 ) array.push( property );

    			} );

    			if ( node.connections === undefined ) {

    				node.connections = [];

    			}

    			node.connections.push( array );

    		} else if ( subNode.name === 'Properties70' ) {

    			const keys = Object.keys( subNode );

    			keys.forEach( function ( key ) {

    				node[ key ] = subNode[ key ];

    			} );

    		} else if ( name === 'Properties70' && subNode.name === 'P' ) {

    			let innerPropName = subNode.propertyList[ 0 ];
    			let innerPropType1 = subNode.propertyList[ 1 ];
    			const innerPropType2 = subNode.propertyList[ 2 ];
    			const innerPropFlag = subNode.propertyList[ 3 ];
    			let innerPropValue;

    			if ( innerPropName.indexOf( 'Lcl ' ) === 0 ) innerPropName = innerPropName.replace( 'Lcl ', 'Lcl_' );
    			if ( innerPropType1.indexOf( 'Lcl ' ) === 0 ) innerPropType1 = innerPropType1.replace( 'Lcl ', 'Lcl_' );

    			if ( innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf( 'Lcl_' ) === 0 ) {

    				innerPropValue = [
    					subNode.propertyList[ 4 ],
    					subNode.propertyList[ 5 ],
    					subNode.propertyList[ 6 ]
    				];

    			} else {

    				innerPropValue = subNode.propertyList[ 4 ];

    			}

    			// this will be copied to parent, see above
    			node[ innerPropName ] = {

    				'type': innerPropType1,
    				'type2': innerPropType2,
    				'flag': innerPropFlag,
    				'value': innerPropValue

    			};

    		} else if ( node[ subNode.name ] === undefined ) {

    			if ( typeof subNode.id === 'number' ) {

    				node[ subNode.name ] = {};
    				node[ subNode.name ][ subNode.id ] = subNode;

    			} else {

    				node[ subNode.name ] = subNode;

    			}

    		} else {

    			if ( subNode.name === 'PoseNode' ) {

    				if ( ! Array.isArray( node[ subNode.name ] ) ) {

    					node[ subNode.name ] = [ node[ subNode.name ] ];

    				}

    				node[ subNode.name ].push( subNode );

    			} else if ( node[ subNode.name ][ subNode.id ] === undefined ) {

    				node[ subNode.name ][ subNode.id ] = subNode;

    			}

    		}

    	}

    	parseProperty( reader ) {

    		const type = reader.getString( 1 );
    		let length;

    		switch ( type ) {

    			case 'C':
    				return reader.getBoolean();

    			case 'D':
    				return reader.getFloat64();

    			case 'F':
    				return reader.getFloat32();

    			case 'I':
    				return reader.getInt32();

    			case 'L':
    				return reader.getInt64();

    			case 'R':
    				length = reader.getUint32();
    				return reader.getArrayBuffer( length );

    			case 'S':
    				length = reader.getUint32();
    				return reader.getString( length );

    			case 'Y':
    				return reader.getInt16();

    			case 'b':
    			case 'c':
    			case 'd':
    			case 'f':
    			case 'i':
    			case 'l':

    				const arrayLength = reader.getUint32();
    				const encoding = reader.getUint32(); // 0: non-compressed, 1: compressed
    				const compressedLength = reader.getUint32();

    				if ( encoding === 0 ) {

    					switch ( type ) {

    						case 'b':
    						case 'c':
    							return reader.getBooleanArray( arrayLength );

    						case 'd':
    							return reader.getFloat64Array( arrayLength );

    						case 'f':
    							return reader.getFloat32Array( arrayLength );

    						case 'i':
    							return reader.getInt32Array( arrayLength );

    						case 'l':
    							return reader.getInt64Array( arrayLength );

    					}

    				}

    				const data = unzlibSync( new Uint8Array( reader.getArrayBuffer( compressedLength ) ) );
    				const reader2 = new BinaryReader( data.buffer );

    				switch ( type ) {

    					case 'b':
    					case 'c':
    						return reader2.getBooleanArray( arrayLength );

    					case 'd':
    						return reader2.getFloat64Array( arrayLength );

    					case 'f':
    						return reader2.getFloat32Array( arrayLength );

    					case 'i':
    						return reader2.getInt32Array( arrayLength );

    					case 'l':
    						return reader2.getInt64Array( arrayLength );

    				}

    				break; // cannot happen but is required by the DeepScan

    			default:
    				throw new Error( 'THREE.FBXLoader: Unknown property type ' + type );

    		}

    	}

    }

    class BinaryReader {

    	constructor( buffer, littleEndian ) {

    		this.dv = new DataView( buffer );
    		this.offset = 0;
    		this.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;
    		this._textDecoder = new TextDecoder();

    	}

    	getOffset() {

    		return this.offset;

    	}

    	size() {

    		return this.dv.buffer.byteLength;

    	}

    	skip( length ) {

    		this.offset += length;

    	}

    	// seems like true/false representation depends on exporter.
    	// true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)
    	// then sees LSB.
    	getBoolean() {

    		return ( this.getUint8() & 1 ) === 1;

    	}

    	getBooleanArray( size ) {

    		const a = [];

    		for ( let i = 0; i < size; i ++ ) {

    			a.push( this.getBoolean() );

    		}

    		return a;

    	}

    	getUint8() {

    		const value = this.dv.getUint8( this.offset );
    		this.offset += 1;
    		return value;

    	}

    	getInt16() {

    		const value = this.dv.getInt16( this.offset, this.littleEndian );
    		this.offset += 2;
    		return value;

    	}

    	getInt32() {

    		const value = this.dv.getInt32( this.offset, this.littleEndian );
    		this.offset += 4;
    		return value;

    	}

    	getInt32Array( size ) {

    		const a = [];

    		for ( let i = 0; i < size; i ++ ) {

    			a.push( this.getInt32() );

    		}

    		return a;

    	}

    	getUint32() {

    		const value = this.dv.getUint32( this.offset, this.littleEndian );
    		this.offset += 4;
    		return value;

    	}

    	// JavaScript doesn't support 64-bit integer so calculate this here
    	// 1 << 32 will return 1 so using multiply operation instead here.
    	// There's a possibility that this method returns wrong value if the value
    	// is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.
    	// TODO: safely handle 64-bit integer
    	getInt64() {

    		let low, high;

    		if ( this.littleEndian ) {

    			low = this.getUint32();
    			high = this.getUint32();

    		} else {

    			high = this.getUint32();
    			low = this.getUint32();

    		}

    		// calculate negative value
    		if ( high & 0x80000000 ) {

    			high = ~ high & 0xFFFFFFFF;
    			low = ~ low & 0xFFFFFFFF;

    			if ( low === 0xFFFFFFFF ) high = ( high + 1 ) & 0xFFFFFFFF;

    			low = ( low + 1 ) & 0xFFFFFFFF;

    			return - ( high * 0x100000000 + low );

    		}

    		return high * 0x100000000 + low;

    	}

    	getInt64Array( size ) {

    		const a = [];

    		for ( let i = 0; i < size; i ++ ) {

    			a.push( this.getInt64() );

    		}

    		return a;

    	}

    	// Note: see getInt64() comment
    	getUint64() {

    		let low, high;

    		if ( this.littleEndian ) {

    			low = this.getUint32();
    			high = this.getUint32();

    		} else {

    			high = this.getUint32();
    			low = this.getUint32();

    		}

    		return high * 0x100000000 + low;

    	}

    	getFloat32() {

    		const value = this.dv.getFloat32( this.offset, this.littleEndian );
    		this.offset += 4;
    		return value;

    	}

    	getFloat32Array( size ) {

    		const a = [];

    		for ( let i = 0; i < size; i ++ ) {

    			a.push( this.getFloat32() );

    		}

    		return a;

    	}

    	getFloat64() {

    		const value = this.dv.getFloat64( this.offset, this.littleEndian );
    		this.offset += 8;
    		return value;

    	}

    	getFloat64Array( size ) {

    		const a = [];

    		for ( let i = 0; i < size; i ++ ) {

    			a.push( this.getFloat64() );

    		}

    		return a;

    	}

    	getArrayBuffer( size ) {

    		const value = this.dv.buffer.slice( this.offset, this.offset + size );
    		this.offset += size;
    		return value;

    	}

    	getString( size ) {

    		const start = this.offset;
    		let a = new Uint8Array( this.dv.buffer, start, size );

    		this.skip( size );

    		const nullByte = a.indexOf( 0 );
    		if ( nullByte >= 0 ) a = new Uint8Array( this.dv.buffer, start, nullByte );

    		return this._textDecoder.decode( a );

    	}

    }

    // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)
    // and BinaryParser( FBX Binary format)
    class FBXTree {

    	add( key, val ) {

    		this[ key ] = val;

    	}

    }

    // ************** UTILITY FUNCTIONS **************

    function isFbxFormatBinary( buffer ) {

    	const CORRECT = 'Kaydara\u0020FBX\u0020Binary\u0020\u0020\0';

    	return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString( buffer, 0, CORRECT.length );

    }

    function isFbxFormatASCII( text ) {

    	const CORRECT = [ 'K', 'a', 'y', 'd', 'a', 'r', 'a', '\\', 'F', 'B', 'X', '\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\', '\\' ];

    	let cursor = 0;

    	function read( offset ) {

    		const result = text[ offset - 1 ];
    		text = text.slice( cursor + offset );
    		cursor ++;
    		return result;

    	}

    	for ( let i = 0; i < CORRECT.length; ++ i ) {

    		const num = read( 1 );
    		if ( num === CORRECT[ i ] ) {

    			return false;

    		}

    	}

    	return true;

    }

    function getFbxVersion( text ) {

    	const versionRegExp = /FBXVersion: (\d+)/;
    	const match = text.match( versionRegExp );

    	if ( match ) {

    		const version = parseInt( match[ 1 ] );
    		return version;

    	}

    	throw new Error( 'THREE.FBXLoader: Cannot find the version number for the file given.' );

    }

    // Converts FBX ticks into real time seconds.
    function convertFBXTimeToSeconds( time ) {

    	return time / 46186158000;

    }

    const dataArray = [];

    // extracts the data from the correct position in the FBX array based on indexing type
    function getData( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {

    	let index;

    	switch ( infoObject.mappingType ) {

    		case 'ByPolygonVertex' :
    			index = polygonVertexIndex;
    			break;
    		case 'ByPolygon' :
    			index = polygonIndex;
    			break;
    		case 'ByVertice' :
    			index = vertexIndex;
    			break;
    		case 'AllSame' :
    			index = infoObject.indices[ 0 ];
    			break;
    		default :
    			console.warn( 'THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType );

    	}

    	if ( infoObject.referenceType === 'IndexToDirect' ) index = infoObject.indices[ index ];

    	const from = index * infoObject.dataSize;
    	const to = from + infoObject.dataSize;

    	return slice( dataArray, infoObject.buffer, from, to );

    }

    const tempEuler = new yr$1();
    const tempVec = new Ii$1();

    // generate transformation from FBX transform data
    // ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm
    // ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e
    function generateTransform( transformData ) {

    	const lTranslationM = new nr$1();
    	const lPreRotationM = new nr$1();
    	const lRotationM = new nr$1();
    	const lPostRotationM = new nr$1();

    	const lScalingM = new nr$1();
    	const lScalingPivotM = new nr$1();
    	const lScalingOffsetM = new nr$1();
    	const lRotationOffsetM = new nr$1();
    	const lRotationPivotM = new nr$1();

    	const lParentGX = new nr$1();
    	const lParentLX = new nr$1();
    	const lGlobalT = new nr$1();

    	const inheritType = ( transformData.inheritType ) ? transformData.inheritType : 0;

    	if ( transformData.translation ) lTranslationM.setPosition( tempVec.fromArray( transformData.translation ) );

    	// For Maya models using "Joint Orient", Euler order only applies to rotation, not pre/post-rotations
    	const defaultEulerOrder = getEulerOrder( 0 );

    	if ( transformData.preRotation ) {

    		const array = transformData.preRotation.map( Ys.degToRad );
    		array.push( defaultEulerOrder );
    		lPreRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );

    	}

    	if ( transformData.rotation ) {

    		const array = transformData.rotation.map( Ys.degToRad );
    		array.push( transformData.eulerOrder || defaultEulerOrder );
    		lRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );

    	}

    	if ( transformData.postRotation ) {

    		const array = transformData.postRotation.map( Ys.degToRad );
    		array.push( defaultEulerOrder );
    		lPostRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );
    		lPostRotationM.invert();

    	}

    	if ( transformData.scale ) lScalingM.scale( tempVec.fromArray( transformData.scale ) );

    	// Pivots and offsets
    	if ( transformData.scalingOffset ) lScalingOffsetM.setPosition( tempVec.fromArray( transformData.scalingOffset ) );
    	if ( transformData.scalingPivot ) lScalingPivotM.setPosition( tempVec.fromArray( transformData.scalingPivot ) );
    	if ( transformData.rotationOffset ) lRotationOffsetM.setPosition( tempVec.fromArray( transformData.rotationOffset ) );
    	if ( transformData.rotationPivot ) lRotationPivotM.setPosition( tempVec.fromArray( transformData.rotationPivot ) );

    	// parent transform
    	if ( transformData.parentMatrixWorld ) {

    		lParentLX.copy( transformData.parentMatrix );
    		lParentGX.copy( transformData.parentMatrixWorld );

    	}

    	const lLRM = lPreRotationM.clone().multiply( lRotationM ).multiply( lPostRotationM );
    	// Global Rotation
    	const lParentGRM = new nr$1();
    	lParentGRM.extractRotation( lParentGX );

    	// Global Shear*Scaling
    	const lParentTM = new nr$1();
    	lParentTM.copyPosition( lParentGX );

    	const lParentGRSM = lParentTM.clone().invert().multiply( lParentGX );
    	const lParentGSM = lParentGRM.clone().invert().multiply( lParentGRSM );
    	const lLSM = lScalingM;

    	const lGlobalRS = new nr$1();

    	if ( inheritType === 0 ) {

    		lGlobalRS.copy( lParentGRM ).multiply( lLRM ).multiply( lParentGSM ).multiply( lLSM );

    	} else if ( inheritType === 1 ) {

    		lGlobalRS.copy( lParentGRM ).multiply( lParentGSM ).multiply( lLRM ).multiply( lLSM );

    	} else {

    		const lParentLSM = new nr$1().scale( new Ii$1().setFromMatrixScale( lParentLX ) );
    		const lParentLSM_inv = lParentLSM.clone().invert();
    		const lParentGSM_noLocal = lParentGSM.clone().multiply( lParentLSM_inv );

    		lGlobalRS.copy( lParentGRM ).multiply( lLRM ).multiply( lParentGSM_noLocal ).multiply( lLSM );

    	}

    	const lRotationPivotM_inv = lRotationPivotM.clone().invert();
    	const lScalingPivotM_inv = lScalingPivotM.clone().invert();
    	// Calculate the local transform matrix
    	let lTransform = lTranslationM.clone().multiply( lRotationOffsetM ).multiply( lRotationPivotM ).multiply( lPreRotationM ).multiply( lRotationM ).multiply( lPostRotationM ).multiply( lRotationPivotM_inv ).multiply( lScalingOffsetM ).multiply( lScalingPivotM ).multiply( lScalingM ).multiply( lScalingPivotM_inv );

    	const lLocalTWithAllPivotAndOffsetInfo = new nr$1().copyPosition( lTransform );

    	const lGlobalTranslation = lParentGX.clone().multiply( lLocalTWithAllPivotAndOffsetInfo );
    	lGlobalT.copyPosition( lGlobalTranslation );

    	lTransform = lGlobalT.clone().multiply( lGlobalRS );

    	// from global to local
    	lTransform.premultiply( lParentGX.invert() );

    	return lTransform;

    }

    // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order
    // ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html
    function getEulerOrder( order ) {

    	order = order || 0;

    	const enums = [
    		'ZYX', // -> XYZ extrinsic
    		'YZX', // -> XZY extrinsic
    		'XZY', // -> YZX extrinsic
    		'ZXY', // -> YXZ extrinsic
    		'YXZ', // -> ZXY extrinsic
    		'XYZ', // -> ZYX extrinsic
    		//'SphericXYZ', // not possible to support
    	];

    	if ( order === 6 ) {

    		console.warn( 'THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.' );
    		return enums[ 0 ];

    	}

    	return enums[ order ];

    }

    // Parses comma separated list of numbers and returns them an array.
    // Used internally by the TextParser
    function parseNumberArray( value ) {

    	const array = value.split( ',' ).map( function ( val ) {

    		return parseFloat( val );

    	} );

    	return array;

    }

    function convertArrayBufferToString( buffer, from, to ) {

    	if ( from === undefined ) from = 0;
    	if ( to === undefined ) to = buffer.byteLength;

    	return new TextDecoder().decode( new Uint8Array( buffer, from, to ) );

    }

    function append( a, b ) {

    	for ( let i = 0, j = a.length, l = b.length; i < l; i ++, j ++ ) {

    		a[ j ] = b[ i ];

    	}

    }

    function slice( a, b, from, to ) {

    	for ( let i = from, j = 0; i < to; i ++, j ++ ) {

    		a[ j ] = b[ i ];

    	}

    	return a;

    }

    /**
     * Full-screen textured quad shader
     */

    const CopyShader = {

    	name: 'CopyShader',

    	uniforms: {

    		'tDiffuse': { value: null },
    		'opacity': { value: 1.0 }

    	},

    	vertexShader: /* glsl */`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,

    	fragmentShader: /* glsl */`

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;


		}`

    };

    class Pass {

    	constructor() {

    		this.isPass = true;

    		// if set to true, the pass is processed by the composer
    		this.enabled = true;

    		// if set to true, the pass indicates to swap read and write buffer after rendering
    		this.needsSwap = true;

    		// if set to true, the pass clears its buffer before rendering
    		this.clear = false;

    		// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.
    		this.renderToScreen = false;

    	}

    	setSize( /* width, height */ ) {}

    	render( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {

    		console.error( 'THREE.Pass: .render() must be implemented in derived pass.' );

    	}

    	dispose() {}

    }

    // Helper for passes that need to fill the viewport with a single quad.

    const _camera = new Tc( - 1, 1, 1, - 1, 0, 1 );

    // https://github.com/mrdoob/three.js/pull/21358

    class FullscreenTriangleGeometry extends zn$1 {

    	constructor() {

    		super();

    		this.setAttribute( 'position', new bn( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );
    		this.setAttribute( 'uv', new bn( [ 0, 2, 0, 0, 2, 0 ], 2 ) );

    	}

    }

    const _geometry = new FullscreenTriangleGeometry();

    class FullScreenQuad {

    	constructor( material ) {

    		this._mesh = new Vn$1( _geometry, material );

    	}

    	dispose() {

    		this._mesh.geometry.dispose();

    	}

    	render( renderer ) {

    		renderer.render( this._mesh, _camera );

    	}

    	get material() {

    		return this._mesh.material;

    	}

    	set material( value ) {

    		this._mesh.material = value;

    	}

    }

    class ShaderPass extends Pass {

    	constructor( shader, textureID ) {

    		super();

    		this.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';

    		if ( shader instanceof Jn$1 ) {

    			this.uniforms = shader.uniforms;

    			this.material = shader;

    		} else if ( shader ) {

    			this.uniforms = qn$1.clone( shader.uniforms );

    			this.material = new Jn$1( {

    				name: ( shader.name !== undefined ) ? shader.name : 'unspecified',
    				defines: Object.assign( {}, shader.defines ),
    				uniforms: this.uniforms,
    				vertexShader: shader.vertexShader,
    				fragmentShader: shader.fragmentShader

    			} );

    		}

    		this.fsQuad = new FullScreenQuad( this.material );

    	}

    	render( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {

    		if ( this.uniforms[ this.textureID ] ) {

    			this.uniforms[ this.textureID ].value = readBuffer.texture;

    		}

    		this.fsQuad.material = this.material;

    		if ( this.renderToScreen ) {

    			renderer.setRenderTarget( null );
    			this.fsQuad.render( renderer );

    		} else {

    			renderer.setRenderTarget( writeBuffer );
    			// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600
    			if ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );
    			this.fsQuad.render( renderer );

    		}

    	}

    	dispose() {

    		this.material.dispose();

    		this.fsQuad.dispose();

    	}

    }

    class MaskPass extends Pass {

    	constructor( scene, camera ) {

    		super();

    		this.scene = scene;
    		this.camera = camera;

    		this.clear = true;
    		this.needsSwap = false;

    		this.inverse = false;

    	}

    	render( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {

    		const context = renderer.getContext();
    		const state = renderer.state;

    		// don't update color or depth

    		state.buffers.color.setMask( false );
    		state.buffers.depth.setMask( false );

    		// lock buffers

    		state.buffers.color.setLocked( true );
    		state.buffers.depth.setLocked( true );

    		// set up stencil

    		let writeValue, clearValue;

    		if ( this.inverse ) {

    			writeValue = 0;
    			clearValue = 1;

    		} else {

    			writeValue = 1;
    			clearValue = 0;

    		}

    		state.buffers.stencil.setTest( true );
    		state.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );
    		state.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );
    		state.buffers.stencil.setClear( clearValue );
    		state.buffers.stencil.setLocked( true );

    		// draw into the stencil buffer

    		renderer.setRenderTarget( readBuffer );
    		if ( this.clear ) renderer.clear();
    		renderer.render( this.scene, this.camera );

    		renderer.setRenderTarget( writeBuffer );
    		if ( this.clear ) renderer.clear();
    		renderer.render( this.scene, this.camera );

    		// unlock color and depth buffer and make them writable for subsequent rendering/clearing

    		state.buffers.color.setLocked( false );
    		state.buffers.depth.setLocked( false );

    		state.buffers.color.setMask( true );
    		state.buffers.depth.setMask( true );

    		// only render where stencil is set to 1

    		state.buffers.stencil.setLocked( false );
    		state.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1
    		state.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );
    		state.buffers.stencil.setLocked( true );

    	}

    }

    class ClearMaskPass extends Pass {

    	constructor() {

    		super();

    		this.needsSwap = false;

    	}

    	render( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {

    		renderer.state.buffers.stencil.setLocked( false );
    		renderer.state.buffers.stencil.setTest( false );

    	}

    }

    class EffectComposer {

    	constructor( renderer, renderTarget ) {

    		this.renderer = renderer;

    		this._pixelRatio = renderer.getPixelRatio();

    		if ( renderTarget === undefined ) {

    			const size = renderer.getSize( new Zs() );
    			this._width = size.width;
    			this._height = size.height;

    			renderTarget = new Si$1( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: Rt } );
    			renderTarget.texture.name = 'EffectComposer.rt1';

    		} else {

    			this._width = renderTarget.width;
    			this._height = renderTarget.height;

    		}

    		this.renderTarget1 = renderTarget;
    		this.renderTarget2 = renderTarget.clone();
    		this.renderTarget2.texture.name = 'EffectComposer.rt2';

    		this.writeBuffer = this.renderTarget1;
    		this.readBuffer = this.renderTarget2;

    		this.renderToScreen = true;

    		this.passes = [];

    		this.copyPass = new ShaderPass( CopyShader );
    		this.copyPass.material.blending = m$1;

    		this.clock = new Gc();

    	}

    	swapBuffers() {

    		const tmp = this.readBuffer;
    		this.readBuffer = this.writeBuffer;
    		this.writeBuffer = tmp;

    	}

    	addPass( pass ) {

    		this.passes.push( pass );
    		pass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );

    	}

    	insertPass( pass, index ) {

    		this.passes.splice( index, 0, pass );
    		pass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );

    	}

    	removePass( pass ) {

    		const index = this.passes.indexOf( pass );

    		if ( index !== - 1 ) {

    			this.passes.splice( index, 1 );

    		}

    	}

    	isLastEnabledPass( passIndex ) {

    		for ( let i = passIndex + 1; i < this.passes.length; i ++ ) {

    			if ( this.passes[ i ].enabled ) {

    				return false;

    			}

    		}

    		return true;

    	}

    	render( deltaTime ) {

    		// deltaTime value is in seconds

    		if ( deltaTime === undefined ) {

    			deltaTime = this.clock.getDelta();

    		}

    		const currentRenderTarget = this.renderer.getRenderTarget();

    		let maskActive = false;

    		for ( let i = 0, il = this.passes.length; i < il; i ++ ) {

    			const pass = this.passes[ i ];

    			if ( pass.enabled === false ) continue;

    			pass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );
    			pass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );

    			if ( pass.needsSwap ) {

    				if ( maskActive ) {

    					const context = this.renderer.getContext();
    					const stencil = this.renderer.state.buffers.stencil;

    					//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );
    					stencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );

    					this.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );

    					//context.stencilFunc( context.EQUAL, 1, 0xffffffff );
    					stencil.setFunc( context.EQUAL, 1, 0xffffffff );

    				}

    				this.swapBuffers();

    			}

    			if ( MaskPass !== undefined ) {

    				if ( pass instanceof MaskPass ) {

    					maskActive = true;

    				} else if ( pass instanceof ClearMaskPass ) {

    					maskActive = false;

    				}

    			}

    		}

    		this.renderer.setRenderTarget( currentRenderTarget );

    	}

    	reset( renderTarget ) {

    		if ( renderTarget === undefined ) {

    			const size = this.renderer.getSize( new Zs() );
    			this._pixelRatio = this.renderer.getPixelRatio();
    			this._width = size.width;
    			this._height = size.height;

    			renderTarget = this.renderTarget1.clone();
    			renderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );

    		}

    		this.renderTarget1.dispose();
    		this.renderTarget2.dispose();
    		this.renderTarget1 = renderTarget;
    		this.renderTarget2 = renderTarget.clone();

    		this.writeBuffer = this.renderTarget1;
    		this.readBuffer = this.renderTarget2;

    	}

    	setSize( width, height ) {

    		this._width = width;
    		this._height = height;

    		const effectiveWidth = this._width * this._pixelRatio;
    		const effectiveHeight = this._height * this._pixelRatio;

    		this.renderTarget1.setSize( effectiveWidth, effectiveHeight );
    		this.renderTarget2.setSize( effectiveWidth, effectiveHeight );

    		for ( let i = 0; i < this.passes.length; i ++ ) {

    			this.passes[ i ].setSize( effectiveWidth, effectiveHeight );

    		}

    	}

    	setPixelRatio( pixelRatio ) {

    		this._pixelRatio = pixelRatio;

    		this.setSize( this._width, this._height );

    	}

    	dispose() {

    		this.renderTarget1.dispose();
    		this.renderTarget2.dispose();

    		this.copyPass.dispose();

    	}

    }

    class RenderPass extends Pass {

    	constructor( scene, camera, overrideMaterial = null, clearColor = null, clearAlpha = null ) {

    		super();

    		this.scene = scene;
    		this.camera = camera;

    		this.overrideMaterial = overrideMaterial;

    		this.clearColor = clearColor;
    		this.clearAlpha = clearAlpha;

    		this.clear = true;
    		this.clearDepth = false;
    		this.needsSwap = false;
    		this._oldClearColor = new $r$1();

    	}

    	render( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {

    		const oldAutoClear = renderer.autoClear;
    		renderer.autoClear = false;

    		let oldClearAlpha, oldOverrideMaterial;

    		if ( this.overrideMaterial !== null ) {

    			oldOverrideMaterial = this.scene.overrideMaterial;

    			this.scene.overrideMaterial = this.overrideMaterial;

    		}

    		if ( this.clearColor !== null ) {

    			renderer.getClearColor( this._oldClearColor );
    			renderer.setClearColor( this.clearColor, renderer.getClearAlpha() );

    		}

    		if ( this.clearAlpha !== null ) {

    			oldClearAlpha = renderer.getClearAlpha();
    			renderer.setClearAlpha( this.clearAlpha );

    		}

    		if ( this.clearDepth == true ) {

    			renderer.clearDepth();

    		}

    		renderer.setRenderTarget( this.renderToScreen ? null : readBuffer );

    		if ( this.clear === true ) {

    			// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600
    			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

    		}

    		renderer.render( this.scene, this.camera );

    		// restore

    		if ( this.clearColor !== null ) {

    			renderer.setClearColor( this._oldClearColor );

    		}

    		if ( this.clearAlpha !== null ) {

    			renderer.setClearAlpha( oldClearAlpha );

    		}

    		if ( this.overrideMaterial !== null ) {

    			this.scene.overrideMaterial = oldOverrideMaterial;

    		}

    		renderer.autoClear = oldAutoClear;

    	}

    }

    /**
     * Luminosity
     * http://en.wikipedia.org/wiki/Luminosity
     */

    const LuminosityHighPassShader = {

    	name: 'LuminosityHighPassShader',

    	shaderID: 'luminosityHighPass',

    	uniforms: {

    		'tDiffuse': { value: null },
    		'luminosityThreshold': { value: 1.0 },
    		'smoothWidth': { value: 1.0 },
    		'defaultColor': { value: new $r$1( 0x000000 ) },
    		'defaultOpacity': { value: 0.0 }

    	},

    	vertexShader: /* glsl */`

		varying vec2 vUv;

		void main() {

			vUv = uv;

			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,

    	fragmentShader: /* glsl */`

		uniform sampler2D tDiffuse;
		uniform vec3 defaultColor;
		uniform float defaultOpacity;
		uniform float luminosityThreshold;
		uniform float smoothWidth;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );

			float v = luminance( texel.xyz );

			vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );

			float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );

			gl_FragColor = mix( outputColor, texel, alpha );

		}`

    };

    /**
     * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a
     * mip map chain of bloom textures and blurs them with different radii. Because
     * of the weighted combination of mips, and because larger blurs are done on
     * higher mips, this effect provides good quality and performance.
     *
     * Reference:
     * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/
     */
    class UnrealBloomPass extends Pass {

    	constructor( resolution, strength, radius, threshold ) {

    		super();

    		this.strength = ( strength !== undefined ) ? strength : 1;
    		this.radius = radius;
    		this.threshold = threshold;
    		this.resolution = ( resolution !== undefined ) ? new Zs( resolution.x, resolution.y ) : new Zs( 256, 256 );

    		// create color only once here, reuse it later inside the render function
    		this.clearColor = new $r$1( 0, 0, 0 );

    		// render targets
    		this.renderTargetsHorizontal = [];
    		this.renderTargetsVertical = [];
    		this.nMips = 5;
    		let resx = Math.round( this.resolution.x / 2 );
    		let resy = Math.round( this.resolution.y / 2 );

    		this.renderTargetBright = new Si$1( resx, resy, { type: Rt } );
    		this.renderTargetBright.texture.name = 'UnrealBloomPass.bright';
    		this.renderTargetBright.texture.generateMipmaps = false;

    		for ( let i = 0; i < this.nMips; i ++ ) {

    			const renderTargetHorizontal = new Si$1( resx, resy, { type: Rt } );

    			renderTargetHorizontal.texture.name = 'UnrealBloomPass.h' + i;
    			renderTargetHorizontal.texture.generateMipmaps = false;

    			this.renderTargetsHorizontal.push( renderTargetHorizontal );

    			const renderTargetVertical = new Si$1( resx, resy, { type: Rt } );

    			renderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;
    			renderTargetVertical.texture.generateMipmaps = false;

    			this.renderTargetsVertical.push( renderTargetVertical );

    			resx = Math.round( resx / 2 );

    			resy = Math.round( resy / 2 );

    		}

    		// luminosity high pass material

    		const highPassShader = LuminosityHighPassShader;
    		this.highPassUniforms = qn$1.clone( highPassShader.uniforms );

    		this.highPassUniforms[ 'luminosityThreshold' ].value = threshold;
    		this.highPassUniforms[ 'smoothWidth' ].value = 0.01;

    		this.materialHighPassFilter = new Jn$1( {
    			uniforms: this.highPassUniforms,
    			vertexShader: highPassShader.vertexShader,
    			fragmentShader: highPassShader.fragmentShader
    		} );

    		// gaussian blur materials

    		this.separableBlurMaterials = [];
    		const kernelSizeArray = [ 3, 5, 7, 9, 11 ];
    		resx = Math.round( this.resolution.x / 2 );
    		resy = Math.round( this.resolution.y / 2 );

    		for ( let i = 0; i < this.nMips; i ++ ) {

    			this.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );

    			this.separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new Zs( 1 / resx, 1 / resy );

    			resx = Math.round( resx / 2 );

    			resy = Math.round( resy / 2 );

    		}

    		// composite material

    		this.compositeMaterial = this.getCompositeMaterial( this.nMips );
    		this.compositeMaterial.uniforms[ 'blurTexture1' ].value = this.renderTargetsVertical[ 0 ].texture;
    		this.compositeMaterial.uniforms[ 'blurTexture2' ].value = this.renderTargetsVertical[ 1 ].texture;
    		this.compositeMaterial.uniforms[ 'blurTexture3' ].value = this.renderTargetsVertical[ 2 ].texture;
    		this.compositeMaterial.uniforms[ 'blurTexture4' ].value = this.renderTargetsVertical[ 3 ].texture;
    		this.compositeMaterial.uniforms[ 'blurTexture5' ].value = this.renderTargetsVertical[ 4 ].texture;
    		this.compositeMaterial.uniforms[ 'bloomStrength' ].value = strength;
    		this.compositeMaterial.uniforms[ 'bloomRadius' ].value = 0.1;

    		const bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];
    		this.compositeMaterial.uniforms[ 'bloomFactors' ].value = bloomFactors;
    		this.bloomTintColors = [ new Ii$1( 1, 1, 1 ), new Ii$1( 1, 1, 1 ), new Ii$1( 1, 1, 1 ), new Ii$1( 1, 1, 1 ), new Ii$1( 1, 1, 1 ) ];
    		this.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;

    		// blend material

    		const copyShader = CopyShader;

    		this.copyUniforms = qn$1.clone( copyShader.uniforms );

    		this.blendMaterial = new Jn$1( {
    			uniforms: this.copyUniforms,
    			vertexShader: copyShader.vertexShader,
    			fragmentShader: copyShader.fragmentShader,
    			blending: f$1,
    			depthTest: false,
    			depthWrite: false,
    			transparent: true
    		} );

    		this.enabled = true;
    		this.needsSwap = false;

    		this._oldClearColor = new $r$1();
    		this.oldClearAlpha = 1;

    		this.basic = new en();

    		this.fsQuad = new FullScreenQuad( null );

    	}

    	dispose() {

    		for ( let i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {

    			this.renderTargetsHorizontal[ i ].dispose();

    		}

    		for ( let i = 0; i < this.renderTargetsVertical.length; i ++ ) {

    			this.renderTargetsVertical[ i ].dispose();

    		}

    		this.renderTargetBright.dispose();

    		//

    		for ( let i = 0; i < this.separableBlurMaterials.length; i ++ ) {

    			this.separableBlurMaterials[ i ].dispose();

    		}

    		this.compositeMaterial.dispose();
    		this.blendMaterial.dispose();
    		this.basic.dispose();

    		//

    		this.fsQuad.dispose();

    	}

    	setSize( width, height ) {

    		let resx = Math.round( width / 2 );
    		let resy = Math.round( height / 2 );

    		this.renderTargetBright.setSize( resx, resy );

    		for ( let i = 0; i < this.nMips; i ++ ) {

    			this.renderTargetsHorizontal[ i ].setSize( resx, resy );
    			this.renderTargetsVertical[ i ].setSize( resx, resy );

    			this.separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new Zs( 1 / resx, 1 / resy );

    			resx = Math.round( resx / 2 );
    			resy = Math.round( resy / 2 );

    		}

    	}

    	render( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {

    		renderer.getClearColor( this._oldClearColor );
    		this.oldClearAlpha = renderer.getClearAlpha();
    		const oldAutoClear = renderer.autoClear;
    		renderer.autoClear = false;

    		renderer.setClearColor( this.clearColor, 0 );

    		if ( maskActive ) renderer.state.buffers.stencil.setTest( false );

    		// Render input to screen

    		if ( this.renderToScreen ) {

    			this.fsQuad.material = this.basic;
    			this.basic.map = readBuffer.texture;

    			renderer.setRenderTarget( null );
    			renderer.clear();
    			this.fsQuad.render( renderer );

    		}

    		// 1. Extract Bright Areas

    		this.highPassUniforms[ 'tDiffuse' ].value = readBuffer.texture;
    		this.highPassUniforms[ 'luminosityThreshold' ].value = this.threshold;
    		this.fsQuad.material = this.materialHighPassFilter;

    		renderer.setRenderTarget( this.renderTargetBright );
    		renderer.clear();
    		this.fsQuad.render( renderer );

    		// 2. Blur All the mips progressively

    		let inputRenderTarget = this.renderTargetBright;

    		for ( let i = 0; i < this.nMips; i ++ ) {

    			this.fsQuad.material = this.separableBlurMaterials[ i ];

    			this.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = inputRenderTarget.texture;
    			this.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionX;
    			renderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );
    			renderer.clear();
    			this.fsQuad.render( renderer );

    			this.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = this.renderTargetsHorizontal[ i ].texture;
    			this.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionY;
    			renderer.setRenderTarget( this.renderTargetsVertical[ i ] );
    			renderer.clear();
    			this.fsQuad.render( renderer );

    			inputRenderTarget = this.renderTargetsVertical[ i ];

    		}

    		// Composite All the mips

    		this.fsQuad.material = this.compositeMaterial;
    		this.compositeMaterial.uniforms[ 'bloomStrength' ].value = this.strength;
    		this.compositeMaterial.uniforms[ 'bloomRadius' ].value = this.radius;
    		this.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;

    		renderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );
    		renderer.clear();
    		this.fsQuad.render( renderer );

    		// Blend it additively over the input texture

    		this.fsQuad.material = this.blendMaterial;
    		this.copyUniforms[ 'tDiffuse' ].value = this.renderTargetsHorizontal[ 0 ].texture;

    		if ( maskActive ) renderer.state.buffers.stencil.setTest( true );

    		if ( this.renderToScreen ) {

    			renderer.setRenderTarget( null );
    			this.fsQuad.render( renderer );

    		} else {

    			renderer.setRenderTarget( readBuffer );
    			this.fsQuad.render( renderer );

    		}

    		// Restore renderer settings

    		renderer.setClearColor( this._oldClearColor, this.oldClearAlpha );
    		renderer.autoClear = oldAutoClear;

    	}

    	getSeperableBlurMaterial( kernelRadius ) {

    		const coefficients = [];

    		for ( let i = 0; i < kernelRadius; i ++ ) {

    			coefficients.push( 0.39894 * Math.exp( - 0.5 * i * i / ( kernelRadius * kernelRadius ) ) / kernelRadius );

    		}

    		return new Jn$1( {

    			defines: {
    				'KERNEL_RADIUS': kernelRadius
    			},

    			uniforms: {
    				'colorTexture': { value: null },
    				'invSize': { value: new Zs( 0.5, 0.5 ) }, // inverse texture size
    				'direction': { value: new Zs( 0.5, 0.5 ) },
    				'gaussianCoefficients': { value: coefficients } // precomputed Gaussian coefficients
    			},

    			vertexShader:
    				`varying vec2 vUv;
				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,

    			fragmentShader:
    				`#include <common>
				varying vec2 vUv;
				uniform sampler2D colorTexture;
				uniform vec2 invSize;
				uniform vec2 direction;
				uniform float gaussianCoefficients[KERNEL_RADIUS];

				void main() {
					float weightSum = gaussianCoefficients[0];
					vec3 diffuseSum = texture2D( colorTexture, vUv ).rgb * weightSum;
					for( int i = 1; i < KERNEL_RADIUS; i ++ ) {
						float x = float(i);
						float w = gaussianCoefficients[i];
						vec2 uvOffset = direction * invSize * x;
						vec3 sample1 = texture2D( colorTexture, vUv + uvOffset ).rgb;
						vec3 sample2 = texture2D( colorTexture, vUv - uvOffset ).rgb;
						diffuseSum += (sample1 + sample2) * w;
						weightSum += 2.0 * w;
					}
					gl_FragColor = vec4(diffuseSum/weightSum, 1.0);
				}`
    		} );

    	}

    	getCompositeMaterial( nMips ) {

    		return new Jn$1( {

    			defines: {
    				'NUM_MIPS': nMips
    			},

    			uniforms: {
    				'blurTexture1': { value: null },
    				'blurTexture2': { value: null },
    				'blurTexture3': { value: null },
    				'blurTexture4': { value: null },
    				'blurTexture5': { value: null },
    				'bloomStrength': { value: 1.0 },
    				'bloomFactors': { value: null },
    				'bloomTintColors': { value: null },
    				'bloomRadius': { value: 0.0 }
    			},

    			vertexShader:
    				`varying vec2 vUv;
				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,

    			fragmentShader:
    				`varying vec2 vUv;
				uniform sampler2D blurTexture1;
				uniform sampler2D blurTexture2;
				uniform sampler2D blurTexture3;
				uniform sampler2D blurTexture4;
				uniform sampler2D blurTexture5;
				uniform float bloomStrength;
				uniform float bloomRadius;
				uniform float bloomFactors[NUM_MIPS];
				uniform vec3 bloomTintColors[NUM_MIPS];

				float lerpBloomFactor(const in float factor) {
					float mirrorFactor = 1.2 - factor;
					return mix(factor, mirrorFactor, bloomRadius);
				}

				void main() {
					gl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +
						lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +
						lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +
						lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +
						lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );
				}`
    		} );

    	}

    }

    UnrealBloomPass.BlurDirectionX = new Zs( 1.0, 0.0 );
    UnrealBloomPass.BlurDirectionY = new Zs( 0.0, 1.0 );

    var o,l,h,d,c={527:(e,t,i)=>{var s={"./ExtensionBase.js":[535,9,535],"./Extensions.js":[261,9],"./Networking.js":[637,9,637],"./PoseEngine.js":[512,9,512],"./PoseEngine/MediaPipe.js":[475,9,475],"./PoseEngine/PoseEngine_worker.js":[745,7,745],"./WebCam.js":[654,9,654]};function webpackAsyncContext(e){if(!i.o(s,e))return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=s[e],a=t[0];return Promise.all(t.slice(2).map(i.e)).then((()=>i.t(a,16|t[1])))}webpackAsyncContext.keys=()=>Object.keys(s),webpackAsyncContext.id=527,e.exports=webpackAsyncContext;},436:e=>{function webpackEmptyAsyncContext(e){return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}))}webpackEmptyAsyncContext.keys=()=>[],webpackEmptyAsyncContext.resolve=webpackEmptyAsyncContext,webpackEmptyAsyncContext.id=436,e.exports=webpackEmptyAsyncContext;},261:(e,t,i)=>{function asyncGeneratorStep(e,t,i,s,a,r,n){try{var o=e[r](n),l=o.value;}catch(e){return void i(e)}o.done?t(l):Promise.resolve(l).then(s,a);}i.r(t),i.d(t,{Extensions:()=>Extensions});var s=["PoseEngine"];class Extensions{constructor(){this.plugins={},this.verbose=!1;}init(e,t,i){var s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];!this.plugins[e]||s?this.load(e,((e,s)=>{e?i?i(e):this.verbose&&console.error(e):t&&t(s);})):(this.verbose&&console.log("Extension ".concat(e," already booted, skipping...")),t&&t(this.plugins[e]));}load(e,t){var a=this;return function _asyncToGenerator(e){return function(){var t=this,i=arguments;return new Promise((function(s,a){var r=e.apply(t,i);function _next(e){asyncGeneratorStep(r,s,a,_next,_throw,"next",e);}function _throw(e){asyncGeneratorStep(r,s,a,_next,_throw,"throw",e);}_next(void 0);}))}}((function*(){if(s.includes(e))try{var r=new((yield i(527)("./".concat(e,".js"))).default);try{a.boot(e,r);}catch(t){console.error("Error (2) Booting extension '".concat(e,"':"),t);}t&&t(null,r);}catch(i){console.error("Error (1) Importing / Parsing extension '".concat(e,"':"),i),t&&t(err,null);}else {var n=new Error("Extension ".concat(e," not found"));console.error(n),t&&t(n,null);}}))()}start(e){var t=this.get(e);t&&t.start();}pause(e){var t=this.get(e);t&&t.pause();}stop(e){var t=this.get(e);t&&t.stop();}status(e){var t=this.get(e);return !!t&&t.active}boot(e,t){this.plugins[e]=t,t.init();}get(e){return this.plugins[e]?this.plugins[e]:(console.warn("Extension ".concat(e," not found")),null)}unload(e){var t=this.get(e);t&&(t.destroy(),delete this.plugins[e]);}}}},u={};function __webpack_require__(e){var t=u[e];if(void 0!==t)return t.exports;var i=u[e]={exports:{}};return c[e](i,i.exports,__webpack_require__),i.exports}__webpack_require__.m=c,l=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,__webpack_require__.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if("object"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&"function"==typeof e.then)return e}var i=Object.create(null);__webpack_require__.r(i);var s={};o=o||[null,l({}),l([]),l(l)];for(var a=2&t&&e;"object"==typeof a&&!~o.indexOf(a);a=l(a))Object.getOwnPropertyNames(a).forEach((t=>s[t]=()=>e[t]));return s.default=()=>e,__webpack_require__.d(i,s),i},__webpack_require__.d=(e,t)=>{for(var i in t)__webpack_require__.o(t,i)&&!__webpack_require__.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]});},__webpack_require__.f={},__webpack_require__.e=e=>Promise.all(Object.keys(__webpack_require__.f).reduce(((t,i)=>(__webpack_require__.f[i](e,t),t)),[])),__webpack_require__.u=e=>"pxlNavChunkDir/"+e+".esm.js",__webpack_require__.miniCssF=e=>{},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},(()=>{var e;if("string"==typeof (typeof document === 'undefined' && typeof location === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : typeof document === 'undefined' ? location.href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('pxlNav.umd.js', document.baseURI).href))&&(e=(typeof document === 'undefined' && typeof location === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : typeof document === 'undefined' ? location.href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('pxlNav.umd.js', document.baseURI).href))),!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=e;})(),h={226:0},d=e=>{var t,i,{ids:s,modules:a,runtime:r}=e,n=0;for(t in a)__webpack_require__.o(a,t)&&(__webpack_require__.m[t]=a[t]);for(r&&r(__webpack_require__);n<s.length;n++)i=s[n],__webpack_require__.o(h,i)&&h[i]&&h[i][0](),h[s[n]]=0;},__webpack_require__.f.j=(e,t)=>{var i=__webpack_require__.o(h,e)?h[e]:void 0;if(0!==i)if(i)t.push(i[1]);else {var s=import("./"+__webpack_require__.u(e)).then(d,(t=>{throw 0!==h[e]&&(h[e]=void 0),t}));s=Promise.race([s,new Promise((t=>i=h[e]=[t]))]),t.push(i[1]=s);}};var p={};__webpack_require__.d(p,{l$:()=>RoomEnvironment,eT:()=>k,vi:()=>I,Bn:()=>pxlEnums,IF:()=>pxlNav,uU:()=>pxlNavVersion,Z$:()=>pxlOptions,pL:()=>R});var m={};__webpack_require__.r(m),__webpack_require__.d(m,{camPosVert:()=>camPosVert,defaultShiftVert:()=>defaultShiftVert,defaultVert:()=>defaultVert,discardFrag:()=>discardFrag,shaderHeader:()=>ShaderHeader_shaderHeader});var v={};__webpack_require__.r(v),__webpack_require__.d(v,{animTextureFrag:()=>animTextureFrag,animTextureVert:()=>animTextureVert,clickableBevelFrag:()=>clickableBevelFrag,clickableBevelVert:()=>clickableBevelVert,portalBaseFrag:()=>portalBaseFrag,portalBaseVert:()=>portalBaseVert});var g={};__webpack_require__.r(g),__webpack_require__.d(g,{itemBaseFrag:()=>itemBaseFrag,itemBaseVert:()=>itemBaseVert,itemFrag:()=>itemFrag,itemVert:()=>itemVert,itemZoomFrag:()=>itemZoomFrag,pxlPrincipledFrag:()=>pxlPrincipledFrag,pxlPrincipledVert:()=>pxlPrincipledVert});var f={};__webpack_require__.r(f),__webpack_require__.d(f,{dustFrag:()=>dustFrag,dustVert:()=>dustVert,emberWispsFrag:()=>emberWispsFrag,emberWispsVert:()=>emberWispsVert,smokeFrag:()=>smokeFrag,smokeVert:()=>smokeVert,snowFrag:()=>snowFrag,snowVert:()=>snowVert});var x={};__webpack_require__.r(x),__webpack_require__.d(x,{boxAntiAliasPass:()=>boxAntiAliasPass,chroAberPostProcess:()=>chroAberPostProcess,compLayersPostProcess:()=>compLayersPostProcess,crossAntiAliasPass:()=>crossAntiAliasPass,directionalBlurPass:()=>directionalBlurPass,finalOverlayHeavyShader:()=>finalOverlayHeavyShader,finalOverlayShader:()=>finalOverlayShader,finalOverlaySlimShader:()=>finalOverlaySlimShader,glowPassPostProcess:()=>glowPassPostProcess,iZoomPostProcess:()=>iZoomPostProcess,lKingPostProcess:()=>lKingPostProcess,mixBlurShaderPass:()=>mixBlurShaderPass,motionBlurPostProcess:()=>motionBlurPostProcess,sFieldPostProcessFrag:()=>sFieldPostProcessFrag,sFieldPostProcessVert:()=>sFieldPostProcessVert,textureStorePass:()=>textureStorePass,warpPostProcess:()=>warpPostProcess,worldPositionFrag:()=>worldPositionFrag,worldPositionVert:()=>worldPositionVert});var y={};__webpack_require__.r(y),__webpack_require__.d(y,{bgScreenFrag:()=>bgScreenFrag,bgScreenVert:()=>bgScreenVert,skyObjectFrag:()=>skyObjectFrag,skyObjectVert:()=>skyObjectVert});const b=(e=>{var t={};return __webpack_require__.d(t,e),t})({AlphaFormat:()=>Lt,AmbientLight:()=>Ic,AnimationMixer:()=>wu,BackSide:()=>d$1,BasicShadowMap:()=>a,Box3:()=>Ei$1,BufferGeometry:()=>zn$1,CanvasTexture:()=>Ga,Clock:()=>Gc,Color:()=>$r$1,ColorManagement:()=>ui$1,DepthFormat:()=>Dt,DepthTexture:()=>$a,DirectionalLight:()=>Cc,DoubleSide:()=>p$1,DynamicDrawUsage:()=>As,Euler:()=>yr$1,Float32BufferAttribute:()=>bn,FloatType:()=>Et,FogExp2:()=>so,FrontSide:()=>u$1,Group:()=>Ha,HalfFloatType:()=>Rt,ImageLoader:()=>lc,InstancedMesh:()=>$o,LinearFilter:()=>wt,LinearSRGBColorSpace:()=>$e,LuminanceFormat:()=>Ut,Matrix4:()=>nr$1,Mesh:()=>Vn$1,MeshBasicMaterial:()=>en,MeshStandardMaterial:()=>_l,NearestFilter:()=>ft,NearestMipmapNearestFilter:()=>gt,Object3D:()=>Er$1,PCFSoftShadowMap:()=>l$1,PerspectiveCamera:()=>$n$1,Points:()=>ja,Quaternion:()=>Ci$1,RGBAFormat:()=>Wt,RGBFormat:()=>Vt,RGFormat:()=>Xt,Raycaster:()=>Cu,RedFormat:()=>qt,RepeatWrapping:()=>pt,SRGBColorSpace:()=>Ge,Scene:()=>ro,ShaderChunk:()=>wn,ShaderMaterial:()=>Jn$1,Texture:()=>vi$1,UniformsLib:()=>Dn,UniformsUtils:()=>qn$1,UnsignedIntType:()=>kt,UnsignedShortType:()=>It,Vector2:()=>Zs,Vector3:()=>Ii$1,Vector4:()=>wi$1,VideoTexture:()=>qa,WebGLRenderTarget:()=>Si$1,WebGLRenderer:()=>pa});const C=(e=>{var t={};return __webpack_require__.d(t,e),t})({FBXLoader:()=>FBXLoader});var P={NONE:0,ERROR:1,WARN:2,INFO:3},S={OFF:0,LOW:1,MEDIUM:2,HIGH:3},w={OFF:0,VAPOR:1},D={KEEP:0,sRGB_TO_LINEAR:1,LINEAR_TO_sRGB:2,WINDOWS_TO_UNIX:3,UNIX_TO_WINDOWS:4,LINEAR_TO_WINDOWS:5,WINDOWS_TO_LINEAR:6,LINEAR_TO_UNIX:7,UNIX_TO_LINEAR:8},pxlEnums={VERBOSE_LEVEL:P,ANTI_ALIASING:S,SKY_HAZE:w,SHADOW_MAP:{OFF:0,BASIC:1,SOFT:2},COLOR_SHIFT:D};class FileIO{constructor(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.pxlTimer=null,this.pxlUtils=null,this.pxlQuality=null,this.pxlVideo=null,this.pxlCamera=null,this.pxlAutoCam=null,this.pxlUser=null,this.pxlEnv=null,this.pxlAnim=null,this.pxlDevice=null,this.pxlShaders=null,this.options={},this.runDebugger=!1,this.assetRoot=this.findInDict(e,"assetRoot","images/assets/"),this.guiRoot=this.findInDict(e,"guiRoot","images/GUI/"),this.roomRoot=this.findInDict(e,"roomRoot","images/rooms/"),this.vidRoot=this.findInDict(e,"vidRoot","images/screenContent/"),this.workerList=[],this.oneTwoPFour=1/2.4,this.twelvePNineTwoDiv=1/12.92,this.onePOFiveFiveDiv=1/1.055;}setDependencies(pxlNav){this.pxlTimer=pxlNav.pxlTimer,this.pxlUtils=pxlNav.pxlUtils,this.pxlQuality=pxlNav.pxlQuality,this.pxlVideo=pxlNav.pxlVideo,this.pxlCamera=pxlNav.pxlCamera,this.pxlAutoCam=pxlNav.pxlAutoCam,this.pxlUser=pxlNav.pxlUser,this.pxlEnv=pxlNav.pxlEnv,this.pxlAnim=pxlNav.pxlAnim,this.pxlDevice=pxlNav.pxlDevice,this.pxlShaders=pxlNav.pxlShaders,this.options=pxlNav.options;}log(){if(this.runDebugger){console.log("---");for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];t.forEach((e=>{console.log(e);}));}}toggleDebugger(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;e||(e=!this.runDebugger),this.runDebugger=e;}findInDict(e,t,i){return e.hasOwnProperty(t)?e[t]:(e[t]=i,i)}convertVertColor(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:D.KEEP;if(e.geometry&&e.geometry.attributes&&e.geometry.attributes.color){for(var i=e.geometry.attributes.color,s=0;s<i.count;++s){var a=(new b.Color).fromBufferAttribute(i,s);this.pxlUtils.convertColor(a,t),i.setXYZ(s,a.r,a.g,a.b);}i.needsUpdate=!0;}}checkForUserData(e,t,i){if(i.hasOwnProperty("userData")){if(i.hasOwnProperty("material")&&(i.userData.hasOwnProperty("doubleSided")&&i.userData.doubleSided?i.material.side=b.DoubleSide:i.material.side=b.FrontSide),i.userData.hasOwnProperty("GlowPass")&&i.userData.GlowPass&&(e.geoList.GlowPass||(e.geoList.GlowPass=[]),e.geoList.GlowPass.push(i)),i.userData.hasOwnProperty("GlowPassMask")&&i.userData.GlowPass&&(e.geoList.GlowPassMask||(e.geoList.GlowPassMask=[]),e.geoList.GlowPassMask.push(i)),i.userData.hasOwnProperty("castShadow")&&i.userData.castShadow&&(i.castShadow=!0),i.userData.hasOwnProperty("receiveShadow")&&i.userData.receiveShadow&&(i.receiveShadow=!0),i.userData.hasOwnProperty("Shader")&&""!=i.userData.Shader){i.userData.Shader.trim();e.shaderGeoList||(e.shaderGeoList={}),e.shaderGeoList[i.name]=i;}if(i.userData.hasOwnProperty("Emitter")&&""!=i.userData.Emitter&&(e.emitterList||(e.emitterList={}),e.emitterList[i.userData.Emitter]||(e.emitterList[i.userData.Emitter]={},e.emitterList[i.userData.Emitter].Emitter=[],e.emitterList[i.userData.Emitter].Particles=[]),e.emitterList[i.userData.Emitter].Emitter.push(i)),i.userData.hasOwnProperty("Hover")&&i.userData.Hover&&(e.hoverableExists=!0,e.hoverableList.push(i)),i.userData.hasOwnProperty("Click")&&i.userData.Click&&(e.clickableExists=!0,e.clickableList.push(i)),this.checkObjectInstancing(e,t,i),i.userData.hasOwnProperty("Scripted"))e.geoList.hasOwnProperty("Scripted")||(e.geoList.Scripted={}),e.geoList.Scripted[i.name]=i,i.children.forEach((s=>{if(s.name.includes("Geo")){var a=i.position,r=i.rotation,n=i.scale;s.position.set(a.x,a.y,a.z),s.rotation.set(r.x,r.y,r.z),s.scale.set(n.x,n.y,n.z),s.updateMatrix(),s.children.forEach((i=>{this.checkForUserData(e,t,i),"Group"==i.type&&(i.position.set(a.x+i.position.x,a.y+i.position.y,a.z+i.position.z),i.rotation.set(r.x,r.y,r.z),i.scale.set(n.x,n.y,n.z)),i.updateMatrix();}));}else if(s.name.includes("Colliders")){var o=i.position,l=i.rotation,h=i.scale;s.position.set(o.x,o.y,o.z),s.rotation.set(l.x,l.y,l.z),s.scale.set(h.x,h.y,h.z),s.updateMatrix(),s.visible=!1;}}));}}canAppendChildren(e,t){if("Group"!=t.type)return !1;var i=!0;return e.geoList.hasOwnProperty("Scripted")&&e.geoList.Scripted.hasOwnProperty(t.name)&&(i=!1),i}canAddToScene(e,t){var i=!0;return t.hasOwnProperty("userData")&&t.userData.hasOwnProperty("Instance")&&e.hasOwnProperty("baseInstancesNames")&&e.baseInstancesNames.hasOwnProperty(t.userData.Instance)&&(i=!1),i}checkIsGlassLiquid(e,t,i,s){var a=!1;if(i.userData.hasOwnProperty("isGlass")&&i.userData.isGlass&&(a=!0),i.userData.hasOwnProperty("isLiquid")&&i.userData.isLiquid&&(a=!0),!a)return !1;if(this.log("Glass Detected - ",i.name),!e.glassGroup){var r=new b.Group;e.glassGroup=r,t.add(r);}var n=i.material.clone();i.material=n,i.material.transparent=!0,i.material.opacity=.5,i.material.shininess=20,i.material.specular=i.material.color.clone(),i.material.specular.r=.5*i.material.specular.r+.1,i.material.specular.g=.5*i.material.specular.g+.1,i.material.specular.b=.5*i.material.specular.b+.1,i.material.side=b.BackSide,i.material.depthWrite=!1,i.matrixAutoUpdate=!1,i.renderOrder=1,e.glassList.push(i),e.glassGroup.add(i);var o=i.geometry.clone(),l=i.material.clone();l.copy(i.material);var h=new b.Mesh(o,l);h.name=i.name+"_Front",h.material.shininess=40,h.material.side=b.FrontSide,h.matrixAutoUpdate=!1,h.renderOrder=2;var d=i.position,c=i.rotation,u=i.scale;return h.rotation.set(c.x,c.y,c.z),h.position.set(d.x,d.y,d.z),h.scale.set(u.x,u.y,u.z),h.updateMatrix(),i.parent.add(h),e.glassList.push(h),e.glassGroup.add(h),a}checkObjectInstancing(e,t,i){if(!e.hasOwnProperty("baseInstancesNames")||!e.hasOwnProperty("baseInstancesList"))return !1;if(i.hasOwnProperty("userData")&&i.userData.hasOwnProperty("Instance")&&e.baseInstancesList.hasOwnProperty(i.userData.Instance)){var s=i.name;this.log("Generate Instance - ",s),e.geoList.hasOwnProperty("InstanceObjects")||(e.geoList.InstanceObjects={});var a=i.position,r=i.rotation,n=i.scale,o=e.baseInstancesList[i.userData.Instance];if("Mesh"==i.type){for(var l=new b.Matrix4,h=new b.Vector3,d=new b.Vector3,c=new b.Quaternion,u=new b.Vector3(1,1,1),p=i.geometry.attributes.hasOwnProperty("color"),m={},v=[],g=0;g<i.geometry.attributes.position.count;++g){h.fromBufferAttribute(i.geometry.attributes.position,g);var f=h.toArray();if(f=f.join(","),!m.hasOwnProperty(f)){d.fromBufferAttribute(i.geometry.attributes.normal,g);var x=new b.Euler(0,2*Math.random()*Math.PI,0);c.setFromEuler(x);var y=u;if(p){var C=i.geometry.attributes.color.getX(g);y=new b.Vector3(C,C,C);}l.compose(h,c,y),v.push(l.clone()),m[f]=!0;}}if(v.length>0){var P=new b.InstancedMesh(o.geometry,o.material,v.length);P.instanceMatrix.setUsage(b.DynamicDrawUsage),P.name=s+"Geo";for(var S=0;S<v.length;++S)P.setMatrixAt(S,v[S]);P.visible=!0,P.updateMatrix(),e.geoList.InstanceObjects[s]=P,i.parent.add(P);}i.visible=!1,i.parent.remove(i);}else {var w=new b.InstancedMesh(o.geometry,o.material,1);w.instanceMatrix.setUsage(b.DynamicDrawUsage),w.name=s+"Geo";var D=!1;if(i.userData.hasOwnProperty("fixInstMatrix")&&(D=!!i.userData.fixInstMatrix),D)w.rotation.set(r.x,r.y,r.z),w.position.set(a.x,a.y,a.z),w.scale.set(n.x,n.y,n.z);else {var E=new b.Matrix4;E.compose(a,(new b.Quaternion).setFromEuler(r),n),w.setMatrixAt(0,E);}w.visible=!0,w.updateMatrix(),e.geoList.InstanceObjects[s]=w,i.parent.add(w),i.visible=!1,i.parent.remove(i);}}}loadSceneFBX(e,t,i,s,a,r){var n=this;""!=a&&(this.pxlEnv.geoLoadListComplete=0,this.pxlEnv.geoLoadList[a]=0);var o=new C.FBXLoader;return o.load(e,(e=>{var t=e.children,i={},s=[];t.forEach(((e,t)=>{s.push(e.name),i[e.name]=t;})),s.forEach((e=>{e.includes("Camera")&&(t[i[e]].children.forEach(((e,t)=>{if(e.matrixAutoUpdate=!1,e.name.includes("Position")){var i=e.position.clone();this.pxlCamera.cameraPrevPos=i.clone(),this.pxlCamera.camera.position.copy(i),this.pxlCamera.cameraPos.copy(i),this.pxlCamera.camera.updateMatrixWorld(),this.pxlCamera.cameraBooted=!0,this.pxlEnv.camInitPos=i,this.pxlEnv.camThumbPos=this.pxlEnv.camThumbPos.clone().add(i.clone());}else if(e.name.includes("LookAt")){var s=e.position.clone();this.pxlCamera.cameraAimTarget.position.copy(s),this.pxlCamera.camera.lookAt(s),this.pxlCamera.camera.updateMatrixWorld(),this.pxlCamera.cameraPrevLookAt=new b.Vector3,this.pxlEnv.camInitLookAt=s,this.pxlEnv.camThumbLookAt=this.pxlEnv.camThumbLookAt.clone().add(s.clone());}else if(e.name.includes("ReturnPosition")){var a=e.position.clone();this.pxlEnv.camReturnPos=a;}else if(e.name.includes("ReturnLookAt")){var r=e.position.clone();this.pxlEnv.camReturnLookAt=r;}})),this.pxlDevice.touchMouseData.initialQuat=this.pxlCamera.camera.quaternion.clone());if(e.includes("Items"))for(var s=t[i[e]].children,a=null,o=null,l=null,h=null,d=function _loop(){var e=s.pop();"Group"==e.type&&(e.children.forEach((t=>{t.name.includes("Item")?(e.name.includes("LowGravity")?(null==o&&(o=new b.ShaderMaterial({uniforms:{color:{value:t.material.emissive.clone()},alphaMap:{type:"t",value:t.material.map},cloudNoise:{type:"t",value:n.pxlEnv.cloud3dTexture},time:{value:n.pxlTimer.msRunner},intensity:{type:"f",value:1.5},rate:{type:"f",value:n.pxlUser.itemRotateRate}},vertexShader:n.pxlShaders.objects.itemVert(),fragmentShader:n.pxlShaders.objects.itemFrag(),transparent:!0,side:b.DoubleSide,depthTest:!0,depthWrite:!1})),t.material=o):e.name.includes("LizardKing")?(null==l&&((l=t.material.clone()).emissiveMap=l.map,l.emissive=new b.Color(8421504)),t.material=l):e.name.includes("StarField")||e.name.includes("InfinityZoom")&&(null==h&&(h=new b.ShaderMaterial({uniforms:{color:{value:t.material.map},cloudNoise:{type:"t",value:n.pxlEnv.cloud3dTexture},time:{value:n.pxlTimer.msRunner},intensity:{type:"f",value:1},rate:{type:"f",value:n.pxlUser.itemRotateRate}},vertexShader:n.pxlShaders.core.defaultVert(),fragmentShader:n.pxlShaders.objects.itemZoomFrag(),transparent:!0,side:b.DoubleSide,depthTest:!0,depthWrite:!0})),t.material=h),n.pxlUser.itemList[e.name]=t):t.name.includes("ItemBase")&&(null==a&&(a=new b.ShaderMaterial({uniforms:{color:{value:t.material.emissive.clone()},alphaMap:{type:"t",value:t.material.map},cloudNoise:{type:"t",value:n.pxlEnv.cloud3dTexture},time:{value:n.pxlTimer.msRunner},intensity:{type:"f",value:1.5},rate:{type:"f",value:n.pxlUser.itemBaseRotateRate}},vertexShader:n.pxlShaders.objects.itemBaseVert(),fragmentShader:n.pxlShaders.objects.itemBaseFrag(),transparent:!0,side:b.DoubleSide,depthTest:!0,depthWrite:!1})),t.material=a,n.pxlUser.itemBaseList.push(t));})),r[0].add(e),n.pxlUser.itemGroupList[e.name]=e,n.pxlUser.itemListNames.push(e.name));};s.length>0;)d();})),""!=a&&(this.pxlEnv.geoList[a]=e,this.pxlEnv.geoLoadList[a]=1),this.pxlEnv.geoLoadList[a]=1;}),void 0,(e=>{""!=a&&(this.pxlEnv.geoLoadList[a]=1);})),o}loadRoomFBX(e){var t=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];this.runDebugger=!!a,null==s&&(s=e.roomName),i||(i=e.sceneFile);var r=e.sceneFile,n=e.materialList;this.pxlEnv.geoLoadListComplete=0,this.pxlEnv.geoLoadList[s]=0;var o=e.scene,l=new C.FBXLoader;return l.load(r,(i=>{var a=i.children,r={},l=[];a.forEach(((e,t)=>{var i=e.name.split("_")[0];l.push(i),r[i]=t;}));if(l.indexOf("Camera")>-1){var h=[];this.log("Camera - ",a[r.Camera]);a[r.Camera].children.forEach(((e,t)=>{e.name.includes("Position")||e.name.includes("LookAt")||e.name.includes("ReturnPosition")||e.name.includes("ReturnLookAt")?(h.push(e),!0):e.children.length>0&&h.push(...e.children);})),h.forEach(((t,i)=>{t.matrixAutoUpdate=!1;var s=t.parent.name;if(s==a[r.Camera].name&&(s="Default"),e.camLocation.hasOwnProperty(s)||(e.camLocation[s]={},e.camLocation[s].Position=new b.Vector3(0,0,-10),e.camLocation[s].LookAt=new b.Vector3(0,0,0)),t.name.includes("PositionMobile")){var n=t.position.clone();e.cameraBooted=!0,e.camInitPos=n,e.camLocation[s].PositionMobile=n;}else if(t.name.includes("LookAtMobile")){var o=t.position.clone();e.camInitLookAt=o,e.camLocation[s].LookAtMobile=o;}else if(t.name.includes("Position")){var l=t.position.clone();e.cameraBooted=!0,e.camInitPos=l,e.camLocation[s].Position=l;}else if(t.name.includes("LookAt")){var h=t.position.clone();e.camInitLookAt=h,e.camLocation[s].LookAt=h;}else if(t.name.includes("ReturnPosition")){var d=t.position.clone();e.camReturnPos=d,e.camLocation[s].ReturnPosition=d;}else if(t.name.includes("ReturnLookAt")){var c=t.position.clone();e.camReturnLookAt=c,e.camLocation[s].ReturnLookAt=c;}})),Object.keys(e.camLocation).forEach((t=>{var i=e.camLocation[t];i.hasOwnProperty("PositionMobile")||(i.PositionMobile=i.Position),i.hasOwnProperty("LookAtMobile")||(i.LookAtMobile=i.LookAt);}));}if(l.indexOf("AutoCamPaths")>-1){var d=a[r.AutoCamPaths].children;this.log("AutoCamPaths - ",a[r.AutoCamPaths]),this.pxlAutoCam.autoCamPaths[e.roomName]=[];for(var c=function _loop2(){var i=d.pop();if("Group"==i.type){var s={};i.children.forEach((e=>{e.matrixAutoUpdate=!1,s[e.name]=e;})),i.visible=!1,i.matrixAutoUpdate=!1,o.add(i),t.pxlAutoCam.autoCamPaths[e.roomName].push(s);}};d.length>0;)c();}if(l.indexOf("Instances")>-1&&0==this.pxlQuality.detailLimit){var u=[...a[r.Instances].children];if(this.log("Instances - ",a[r.Instances]),u.length>0){e.hasOwnProperty("baseInstancesNames")||(e.baseInstancesNames=[]),e.hasOwnProperty("baseInstancesList")||(e.baseInstancesList={});u.forEach(((t,i)=>{if(this.checkForUserData(e,o,t),n.hasOwnProperty(t.name)){var s=null;t.material.map&&(s=t.material.map),t.material=n[t.name],s&&(t.material.uniforms.hasOwnProperty("diffuse")&&(t.material.uniforms.diffuse.value=s),t.material.hasOwnProperty("emissiveMap")&&(t.material.emissiveMap=s,t.material.emissive.r>0&&(t.material.emissiveIntensity=t.material.emissive.r))),t.matrixAutoUpdate=!1;}e.baseInstancesNames.push(t),e.baseInstancesList[t.name]=t;}));}}if(l.indexOf("Lights")>-1){var p=a[r.Lights].children;for(this.log("Lights - ",a[r.Lights]);p.length>0;){var m=p.pop();p.push(...m.children),m.type.includes("Light")&&(e.hasOwnProperty("lightList")||(e.lightList={}),e.geoList.hasOwnProperty("lights")||(e.geoList.lights=[]),"PointLight"==m.type&&(m.decay=3,m.distance=20*m.intensity,m.intensity=2),e.lightList.hasOwnProperty(m.type)||(e.lightList[m.type]=[]),e.lightList[m.type].push(m),e.geoList.lights.push(m),m.matrixAutoUpdate=!1,o.add(m));}}if(l.includes("Scene")||l.includes("MainScene")){var v=r.Scene||r.MainScene,g=a[v].children;this.log("MainScene - ",a[v]);for(var f=-1,x=function _loop3(){if(++f>=g.length)return 1;var i=g[f];if(t.log("Cur Object - ",i.name),t.checkForUserData(e,o,i),i.isMesh){!i.userData.hasOwnProperty("Show")||i.userData.Show&&0!=i.userData.Show||(i.visible=!1),e.geoList[i.name]=i;var s=b.FrontSide;if(i.userData.doubleSided&&(s=b.DoubleSide),n.hasOwnProperty(i.name)){var a=null;i.material.map&&(a=i.material.map),i.material=n[i.name],a&&(i.material.uniforms.hasOwnProperty("diffuse")&&(i.material.uniforms.diffuse.value=a),i.material.hasOwnProperty("emissiveMap")&&(i.material.emissiveMap=a,i.material.emissive.r>0&&(i.material.emissiveIntensity=i.material.emissive.r))),i.matrixAutoUpdate=!1;}else {var r=i.material;Array.isArray(i.material)||(r=[i.material]),t.checkIsGlassLiquid(e,o,i,r)||r.forEach((e=>{e.map&&!e.emissiveMap&&e.emissive.r>0&&(e.emissiveMap=e.map,e.emissiveIntensity=e.emissive.r,e.emissive=new b.Color(16777215)),e.side=s;})),i.matrixAutoUpdate=!1;}}else if(i.type.includes("Light"))e.lightList.hasOwnProperty(i.type)||(e.lightList[i.type]=[]),e.lightList[i.type].push(i);else if("Group"==i.type){if(e.geoList.hasOwnProperty("Scripted"))Object.keys(e.geoList.Scripted);g.push(...i.children);}};f<g.length&&!x(););o.add(...a[v].children);}if(l.indexOf("Glass")>-1){var y=a[r.Glass].children;if(this.log("Glass - ",a[r.Glass]),y.length>0){if(!e.glassGroup){var C=new b.Group;e.glassGroup=C,o.add(C);}for(;y.length>0;){var P=y.pop();if(y.push(...P.children),P.isMesh){this.checkForUserData(e,o,P);var S=P.material.clone();P.material=S,P.material.transparent=!0,P.material.opacity=.5,P.material.shininess=20,P.material.specular=P.material.color.clone(),P.material.specular.r=.5*P.material.specular.r+.1,P.material.specular.g=.5*P.material.specular.g+.1,P.material.specular.b=.5*P.material.specular.b+.1,P.material.side=b.BackSide,P.material.depthWrite=!1,P.matrixAutoUpdate=!1,P.renderOrder=1,e.glassList.push(P),e.glassGroup.add(P);var w=P.geometry.clone(),D=P.material.clone();D.copy(P.material);var E=new b.Mesh(w,D);E.material.shininess=40,E.material.side=b.FrontSide,E.matrixAutoUpdate=!1,E.renderOrder=2;var L=P.position,M=P.rotation,T=P.scale;E.rotation.set(M.x,M.y,M.z),E.position.set(L.x,L.y,L.z),E.scale.set(T.x,T.y,T.z),E.updateMatrix(),o.add(E),e.glassList.push(E),e.glassGroup.add(E);}}}}if(l.indexOf("Colliders")>-1){var A=a[r.Colliders];this.log("Colliders - ",a[r.Colliders]);var _=A.children;e.collidersExist=_.length>0;for(var k=0;k<_.length;++k)for(var R=_[k].name,I=_[k].children;I.length>0;){var U=I.pop();if(I.push(...U.children),U.isMesh){U.visible=!1;var j="noAxis";U.userData.checkX&&U.userData.checkZ&&(j=~~(U.userData.checkX>0)+""+~~(U.userData.checkZ>0)),"ColliderWalls"==R?(e.antiColliderActive=!0,e.antiColliderList[j].push(U)):"ColliderTops"==R?(e.antiColliderTopActive=!0,e.antiColliderTopList[j].push(U)):("RoomWarpZone"==R&&e.roomWarp.push(U),e.colliderActive=!0,e.colliderList[j].push(U)),U.matrixAutoUpdate=!1,o.add(U),e.geoList[U.name]=U;}}}if(l.indexOf("PortalExit")>-1){var G=a[r.PortalExit].children;for(this.log("PortalExit - ",a[r.PortalExit]);G.length>0;){var O=G.pop();O.matrixAutoUpdate=!1,e.portalList[O.name]=O;}}if(l.indexOf("FlatColor")>-1){var B=a[r.FlatColor].children;for(this.log("FlatColor - ",a[r.FlatColor]);B.length>0;){var V=B.pop();if(B.push(...V.children),V.isMesh){this.checkForUserData(e,o,V);var F=new MeshBasicMaterial({color:V.material.color.clone()});F.side=b.FrontSide,F.flatShading=!0,V.material=F,V.matrixAutoUpdate=!1,o.add(V);}}}if(l.indexOf("LambertColor")>-1){var H=a[r.LambertColor].children;for(this.log("LambertColor - ",a[r.LambertColor]);H.length>0;){var N=H.pop();if(H.push(...N.children),N.isMesh){this.checkForUserData(e,o,N);var W=new MeshLambertMaterial;if(N.material.map){var z=N.material.map.clone();W.map=z,W.emissiveMap=z,W.emissiveIntensity=.5,N.material=W;}else W.color=N.material.color.clone(),W.emissive=N.material.emissive.clone(),W.side=b.FrontSide,W.flatShading=!0,N.material=W;N.matrixAutoUpdate=!1,o.add(N);}}}if(l.indexOf("Sky")>-1){var Q=a[r.Sky].children;for(this.log("Sky - ",a[r.Sky]);Q.length>0;){var K=Q.pop();if(Q.push(...K.children),K.isMesh){var X=new b.ShaderMaterial({uniforms:{diffuse:{type:"t",value:K.material.map},envDiffuse:{type:"t",value:null},noiseTexture:{type:"t",value:this.pxlEnv.cloud3dTexture},fogColor:{value:o.fog.color},time:{value:this.pxlTimer.msRunner},camNear:{type:"f",value:e.camera.near},camFar:{type:"f",value:.85*e.camera.far},resUV:{value:this.pxlDevice.screenRes}},vertexShader:this.pxlShaders.scene.skyObjectVert(),fragmentShader:this.pxlShaders.scene.skyObjectFrag(this.options.skyHaze)});K.material=X,K.matrixAutoUpdate=!1,K.frustumCulled=!1,K.layers.set(this.pxlEnv.renderLayerEnum.SKY),e.geoList[K.name]=K,e.materialList[K.name]=X,o.add(K);}}}if(l.indexOf("AnimatedTextures")>-1){var q=a[r.AnimatedTextures].children;for(this.log("AnimatedTextures - ",a[r.AnimatedTextures]);q.length>0;){var Y=q.pop();if(q.push(...Y.children),Y.isMesh){this.checkForUserData(e,o,Y);var Z={time:{value:this.pxlTimer.msRunner},glowTexture:{type:"t",value:Y.material.map},cloudNoise:{type:"t",value:this.pxlEnv.cloud3dTexture},glowColor:{value:new b.Vector3(.01,.35,.55)},intensity:{type:"f",value:.35},rate:{type:"f",value:2},freq:{type:"f",value:1}},J=this.pxlShaders.animated.animTextureVert(),$=this.pxlShaders.animated.animTextureFrag(),ee=new b.ShaderMaterial({uniforms:Z,vertexShader:J,fragmentShader:$,transparent:!0,side:b.FrontSide});Y.material=ee,Y.matrixAutoUpdate=!1,o.add(Y);}}}if(l.indexOf("ScrollingTextures")>-1){var te=a[r.ScrollingTextures].children;this.log("ScrollingTextures - ",a[r.ScrollingTextures]);for(var ie=1;te.length>0;){ie+=1;var se=te.pop();if(te.push(...se.children),se.isMesh){this.checkForUserData(e,o,se);var ae=se.name,re=.05;ae.indexOf("_")>-1&&(re=ae.split("_")[1],re=.01*parseInt(re));var ne=new b.ShaderMaterial({uniforms:{scrollTexture:{type:"t",value:se.material.map},time:{value:this.pxlTimer.msRunner},speed:{value:re},seed:{type:"f",value:1.1423*ie},boostPerc:{value:1}},vertexShader:this.pxlShaders.animated.scrollingTextureVert(),fragmentShader:this.pxlShaders.animated.scrollingTextureFrag(),transparent:!0,side:b.FrontSide});se.material=ne,se.matrixAutoUpdate=!1,o.add(se);}}}if(l.indexOf("UserScreens")>-1){var oe=a[r.UserScreens].children;this.log("UserScreens - ",a[r.UserScreens]);for(var le=0,he=[new b.Vector3(1,0,0),new b.Vector3(0,1,0),new b.Vector3(0,0,1)],de=[this.assetRoot+"DJ_Vector_Masks_1.jpg",this.assetRoot+"DJ_Vector_Masks_2.jpg",this.assetRoot+"DJ_Vector_Masks_3.jpg"],ce=0,ue=0,pe=he.length;oe.length>0;){var me=oe.pop();if(oe.push(...me.children),me.isMesh){var ve=new b.ShaderMaterial({uniforms:{camExists:{type:"f",value:0},time:{value:this.pxlTimer.msRunner},seed:{type:"f",value:1.1423*le},alpha:{type:"f",value:1},boostPerc:{value:e.userScreenIntensity},scale:{value:new b.Vector2(100,100)},ratio:{value:new b.Vector2(1,1)},videoFeed:{type:"t",value:null},cloudNoise:{type:"t",value:this.pxlEnv.cloud3dTexture},maskChannel:{value:he[ce]},maskMap:{type:"t",value:this.pxlUtils.loadTexture(de[ue])}},vertexShader:e.userScreenVert,fragmentShader:e.userScreenFrag,transparent:!0,side:b.FrontSide});me.material=ve,me.matrixAutoUpdate=!1,e.pxlEnv.camScreenData.screenGeoList.push(me),o.add(me),ce=(le+=1)%pe,ue=Math.floor(le/3)%pe;}}}if(l.indexOf("Items")>-1){var ge=a[r.Items].children;this.log("Items - ",a[r.Items]);for(var fe=function _loop4(){var e=ge.pop();if("Group"==e.type){var i=e.children;i.length>0&&(i.forEach((i=>{if(i.name.includes("Item")){var s=new b.ShaderMaterial({uniforms:{color:{value:i.material.emissive.clone()},alphaMap:{type:"t",value:i.material.map},cloudNoise:{type:"t",value:t.cloud3dTexture},time:{value:t.pxlTimer.msRunner},intensity:{type:"f",value:1.5},rate:{type:"f",value:t.pxlUser.itemRotateRate}},vertexShader:t.pxlShaders.objects.itemVert(),fragmentShader:t.pxlShaders.objects.itemFrag(),transparent:!0,side:b.DoubleSide,depthTest:!0,depthWrite:!1});i.material=s,t.pxlUser.itemList[e.name]=i;}else if(i.name.includes("Base")){var a=new b.ShaderMaterial({uniforms:{color:{value:i.material.emissive.clone()},alphaMap:{type:"t",value:i.material.map},cloudNoise:{type:"t",value:t.cloud3dTexture},time:{value:t.pxlTimer.msRunner},intensity:{type:"f",value:1.5},rate:{type:"f",value:t.pxlUser.itemBaseRotateRate}},vertexShader:t.pxlShaders.objects.itemBaseVert(),fragmentShader:t.pxlShaders.objects.itemBaseFrag(),transparent:!0,side:b.DoubleSide,depthTest:!0,depthWrite:!1});i.material=a,t.pxlUser.itemBaseList.push(i);}})),o.add(e),t.pxlUser.itemGroupList[e.name]=e,t.pxlUser.itemListNames.push(e.name));}};ge.length>0;)fe();}if(l.includes("Scripted")){var xe=a[r.Scripted].children;for(this.log("Scripted - ",a[r.Scripted]);xe.length>0;){var ye=xe.pop();ye.isMesh&&(e.geoList[ye.name]=ye,o.add(ye));}}if(l.includes("Clickable")){var be=a[r.Clickable];this.log("Clickable - ",a[r.Clickable]);for(var Ce=be.children,Pe=0;Pe<Ce.length;++Pe)for(var Se=Ce[Pe].name,we=Ce[Pe].children;we.length>0;){var De=we.pop();if(we.push(...De.children),De.isMesh)(new MeshBasicMaterial).color=new b.Color(16777215),De.material.emissive=new b.Color(4473924),De.material.emissiveMap=De.material.map,De.matrixAutoUpdate=!1,e.objectClickableObjectList[De.name]||(e.objectClickableObjectList[De.name]={}),e.objectClickableObjectList[De.name][Se]=De,e.objectClickable.push(De),o.add(De),"Hover"==Se&&(De.visible=!1);}}if(l.includes("Markers")){var Ee=a[r.Markers].children;for(this.log("Markers - ",a[r.Markers]);Ee.length>0;){var Le=Ee.pop();e.marker[Le.name]=Le.position;}}this.pxlEnv.geoList[s]=i,this.pxlEnv.geoLoadList[s]=1,e.fbxPostLoad(),this.runDebugger=!1;}),null,(e=>{""!=s&&(this.pxlEnv.geoLoadList[s]=1),this.log("Error Loading FBX"),this.log(e),this.runDebugger=!1;})),l}loadAnimFBX(e,t,i,s,a){""==t&&(t=e.roomName),this.pxlEnv.geoLoadListComplete=0,this.pxlEnv.geoLoadList[t]=0;var r=e.scene,n=new C.FBXLoader;return n.load(i,(i=>{var n=i.children,l=[];n.forEach(((e,t)=>{var i=e.name.split("_")[0];l.push(i);})),i.traverse((t=>{this.checkForUserData(e,r,t),t.userData.hasOwnProperty("doubleSided")&&t.userData.doubleSided&&(t.material.side=b.DoubleSide);})),this.pxlAnim.initObject(t,i),this.log("Animation FBX - ",l[0]),r.add(i),i.frustumCulled=!1;var h=new C.FBXLoader,d=[];Object.keys(s).forEach((e=>{var i=s[e],a=new Promise(((s,a)=>{h.load(i,(a=>{0==a.animations.length&&(this.log("No animations found in file",i),this.log(a),s()),this.pxlAnim.addClips(t,e,a),this.log("Animation Loaded",e),s();}),null,(e=>{this.log("Animation Load Error"),this.log(e),a(e);}));}));d.push(a);})),Promise.all(d).then((()=>{this.pxlAnim.setStateConnections(t,a),e.geoList[t]=i,this.pxlEnv.geoLoadList[t]=1,e.animPostLoad(t);})).catch((e=>{this.log("Error loading animations",e);}));}),null,(e=>{""!=t&&(this.pxlEnv.geoLoadList[t]=1);})),n}pxlShaderBuilder(e,t,i){var s,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,r={diffuse:{type:"t",value:null},time:{value:this.pxlTimer.msRunner}};null!=e&&(r=Object.assign({},r,e));var n={uniforms:r,vertexShader:t,fragmentShader:i};return a&&(n.defines=a),(s=new b.ShaderMaterial(n)).transparent=!0,s.depthTest=!0,s}removeChildren(e){for(var t=0,i=e.children,s=0;s<i.length;++s)"Group"==i[s].type&&(e.remove(i[s]),t++);return t}findMesh(e){for(var t=null,i=e.children,s=0;s<i.length;++s)if("Mesh"==i[s].type){t=i[s];break}return t}getBBoxCentroid(e){try{var t=(new b.Box3).setFromObject(e),i=t.min,s=t.max,a=(new b.Vector3).addVectors(s,i).multiplyScalar(.5);e.userData={bbox:t,centroid:a},null!=mapBookHelper&&mapBookHelper.update();}catch(e){console.log("- - - - - - - - ERROR - - - - - - - -"),console.log("     Object does not exist.\n           - Error Info -"),console.log(e),console.log("- - - - - - - - - - - - - - - - - - -");}}loadScript(e){return new Promise(((t,i)=>{var s=document.createElement("script");s.type="text/javascript",s.src=e,s.async=!0,s.onreadystatechange=()=>{t(!0);},s.onload=()=>{t(!0);},document.head.appendChild(s);}))}xmlHttp(){return window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP")}static getURLContent(e){return new Promise(((t,i)=>{var s=window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");s.open("GET",e),s.onload=e=>{4==s.readyState&&s.status>=200&&s.status<300?t(s.response):t(s.statusText);},s.onerror=()=>i(s.statusText),s.send();}))}getExternalHTML(e,t){if(window.XMLHttpRequest){var i=this.xmlHttp();i.onreadystatechange=function(){4==this.readyState&&200==this.status&&t&&"function"==typeof t&&t(i.responseText);},i.open("GET",e,!0),i.responceType="document",i.send();}else window.open(e,"_blank");}fetchURLStatus(e,t,i){fetch(e,{method:"HEAD"}).then((e=>{t(e.status,i);})).catch((e=>{t(404,i);}));}urlExistsFallback(e){return new Promise(((t,i)=>{var s=this.xmlHttp();s.open("HEAD",e,!0),s.send(),console.log(s),s.onreadystatechange=function(){this.readyState==this.DONE&&t(this.status<400);},s.onerror=e=>{t(!1);},s.ontimeout=e=>{t(!1);};}))}urlExists(e){return new Promise(((t,i)=>{this.urlExistsFallback(e).then((e=>{t(e);}));})).then((e=>e)).catch((e=>!1))}}function asyncGeneratorStep(e,t,i,s,a,r,n){try{var o=e[r](n),l=o.value;}catch(e){return void i(e)}o.done?t(l):Promise.resolve(l).then(s,a);}function _asyncToGenerator(e){return function(){var t=this,i=arguments;return new Promise((function(s,a){var r=e.apply(t,i);function _next(e){asyncGeneratorStep(r,s,a,_next,_throw,"next",e);}function _throw(e){asyncGeneratorStep(r,s,a,_next,_throw,"throw",e);}_next(void 0);}))}}var pxlOptions={verbose:pxlEnums.VERBOSE_LEVEL.NONE,pxlRoomRoot:"./pxlRooms",staticCamera:!1,autoCamera:!1,antiAliasing:pxlEnums.ANTI_ALIASING.LOW,shadowMapBiasing:pxlEnums.SHADOW_MAP.BASIC,LoadEnvAssetFile:!1,skyHaze:pxlEnums.SKY_HAZE.OFF,loaderPhrases:["...loading the pixels..."]};const E=(e=>{var t={};return __webpack_require__.d(t,e),t})({EffectComposer:()=>EffectComposer});const L=(e=>{var t={};return __webpack_require__.d(t,e),t})({RenderPass:()=>RenderPass});const M=(e=>{var t={};return __webpack_require__.d(t,e),t})({ShaderPass:()=>ShaderPass});const T=(e=>{var t={};return __webpack_require__.d(t,e),t})({CopyShader:()=>CopyShader});const A=(e=>{var t={};return __webpack_require__.d(t,e),t})({UnrealBloomPass:()=>UnrealBloomPass});function Environment_asyncGeneratorStep(e,t,i,s,a,r,n){try{var o=e[r](n),l=o.value;}catch(e){return void i(e)}o.done?t(l):Promise.resolve(l).then(s,a);}class SVGUtils{static svgPromise(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,a={},r=document.getElementById(t);if(r){null!=i&&r.classList.add(i);var n=Promise.resolve(FileIO.getURLContent(e));return n.then((e=>{r.innerHTML=e,a.svg=r.getElementsByTagName("svg")[0],null!=s&&a.svg.classList.add(s);})),a.promise=n,a}}static svgRawPromise(e){var t={};return Promise.resolve(FileIO.getURLContent(e)).then((e=>{var i=document.createElement("div");i.innerHTML=e,t.svg=i.getElementsByTagName("svg")[0];})),t}static svgIconPromise(e,t,i){var s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,r=this,n={hover:null,mute:null,caret:null,indicator:null,waiting:[],state:null};n.eventType=i;var o=document.getElementById(t);if(o){a?o.classList.add(a):o.classList.add("iconStyle"),n.parent=o.parentNode,n.parent.classList.add("iconHover"),n.parent.addEventListener("click",(e=>{r.iconEvent("click",n,i);}));var l=Promise.resolve(FileIO.getURLContent(e));return l.then((e=>{if(o.innerHTML=e,n.svg=o.getElementsByTagName("svg")[0],n.svg){a?n.svg.classList.add(a):n.svg.classList.add("iconStyle");for(var i=n.svg.children,r=n.svg.getAttribute("xmlns"),l=n.svg.getAttribute("height"),h=n.svg.getAttribute("width"),d=0;d<i.length;++d){var c=i[d];if("speakerIcon"==t){var u=o.getAttribute("xmlns"),p=(document.createElementNS(u,"rect"));p.setAttribute("x",-1),p.setAttribute("y",-1),p.setAttribute("fill","white"),p.setAttribute("fill-opacity",0),p.setAttribute("height",l+2),p.setAttribute("width",h+2),p.setAttribute("z-index",-1),o.appendChild(p),n.hover=p,n.svg.setAttribute("fill-opacity",this.toggleOpacity[0]);}var m=c.getAttribute("id");if("mute"==m){n.mute=c,n.mute.style.transformOrigin="50% 50%",n.mute.style.filter="alpha(opacity=0)",n.mute.style.opacity="0",n.mute.style.transform="scale(0,0)",n.mute.style.transition="scale 1s, opacity .5s, filter .5s";var v=document.createElement("style");v.type="text/css",v.innerHTML="\n                                @keyframes loadingSpinner{\n                                    0%{\n                                        transform: rotate(0deg);\n                                    }\n                                    100%{\n                                        transform: rotate(360deg);\n                                    }\n                                }\n                            ",n.svg.appendChild(v);var g=Math.max(2,.25*Math.min(l,h)),f=.5*h,x=.5*l,y=document.createElementNS(r,"path");y.setAttribute("d"," M ".concat(f," ").concat(x-g," A ").concat(g," ").concat(g," 0 1 1 ").concat(f-g," ").concat(x," ")),y.setAttribute("stroke","white"),y.setAttribute("stroke-width","2"),y.style.display="none",y.style.transformOrigin="50% 50%",y.style.animation="loadingSpinner 1s linear infinite",y.style.animationDuration="2s",y.style.animationPlayState="paused",n.indicator=y,n.svg.appendChild(y),this.toggleIcon(n,s);}else "caret"==m?(n.caret=c,n.caret.style.transformOrigin="50% 50%",n.caret.style.transition="transform .5s",this.flipIcon(n,!1)):"state"==m?(c.style.display="none",n.state=c):n.waiting.push(c);}var b=document.createElementNS(r,"rect");b.classList.add("iconHover"),b.setAttribute("x",0),b.setAttribute("y",0),b.setAttribute("height",l),b.setAttribute("width",h),n.svg.appendChild(b);}})),n.promise=l,n}}static svgButtonPromise(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;if("string"!=typeof t||(t=document.getElementById(t))){var r=this;Promise.resolve(FileIO.getURLContent(e)).then((e=>{t.innerHTML=e;var n=t.getElementsByTagName("svg");if(n.length>0&&(n=n[0],i&&(i="string"==typeof i?[i]:i).forEach((e=>{n.classList.add(e);})),s)){var o=n.getAttribute("xmlns"),l=parseInt(n.getAttribute("height")),h=parseInt(n.getAttribute("width")),d=document.createElementNS(o,"rect");d.setAttribute("x",-1),d.setAttribute("y",-1),d.setAttribute("fill","white"),d.setAttribute("fill-opacity",0),d.setAttribute("height",l+2),d.setAttribute("width",h+2),d.setAttribute("z-index",-1),n.appendChild(d);var c=n.getElementById("state");c&&c.setAttribute("fill-opacity",this.toggleOpacity[0]),a&&(n.onclick=e=>{r.svgCheckClick(e,a);},r.pxlDevice.mobile?(n.ontouchstart=e=>{r.svgStylize(e,!0);},n.ontouchend=e=>{r.svgStylize(e,!1);}):(n.onmouseover=e=>{r.svgStylize(e,!0);},n.onmouseout=e=>{r.svgStylize(e,!1);}));}}));}}}function GUIBase_asyncGeneratorStep(e,t,i,s,a,r,n){try{var o=e[r](n),l=o.value;}catch(e){return void i(e)}o.done?t(l):Promise.resolve(l).then(s,a);}function GUIBase_asyncToGenerator(e){return function(){var t=this,i=arguments;return new Promise((function(s,a){var r=e.apply(t,i);function _next(e){GUIBase_asyncGeneratorStep(r,s,a,_next,_throw,"next",e);}function _throw(e){GUIBase_asyncGeneratorStep(r,s,a,_next,_throw,"throw",e);}_next(void 0);}))}}class GUIManager{constructor(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Metal-Asylum",i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"images/assets/",s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"images/GUI/";this.projectTitle=t,this.verbose=e,this.sW=window.innerWidth,this.sH=window.innerHeight,this.mobile=!1,this.pxlFile=null,this.pxlCookie=null,this.pxlTimer=null,this.pxlAudio=null,this.pxlUtils=null,this.pxlUser=null,this.pxlDevice=null,this.pxlAutoCam=null,this.pxlCamera=null,this.pxlNavCanvas=null,this.pxlQuality=null,this.pxlEnv=null,this.assetRoot=i,this.guiRoot=s,this.introHelpActive=!0,this.branding={title:t,loader:s+".svg",logo:s+".svg",medalion:s+".svg",stack:s+".svg"},this.loaderPhrases=["Loading..."],this.lableBoxSize=40,this.optionWidthRound=10,this.optionWidthAdd=25,this.deviceOptionHeight=[0,300],this.pxlLoader=null,this.pxlLoaderCount=0,this.pxlLoaderTotal=5,this.hudBlock={obj:null,active:!1},this.userControlBlock=null,this.hudVisibility=!0,this.hudIcons={},this.hudElements={},this.guiWindows={},this.msgCount=0,this.hudMedalionBar=null,this.userProfileMessageInput=null,this.userProfileReturnMessage=null,this.userCountObj=null,this.userCountCur=0,this.messageCountObj=null,this.messageCountCur=0,this.chatMessageDisplay=null,this.chatMessageInput=null,this.camChoicesActive=!1,this.micChoicesActive=!1,this.pxlNavData={active:!1,gui:null,height:null,fpsSet:0,fps:null,dl:null,ul:null},this.djPlayerObj=null,this.buildGuiStatus={hud:!1,userTopBar:!1,bottomBar:!1,djPlayer:!1,roomControls:!1,verseList:!1,medalion:!0,loadingBranding:!1},this.requestVerseList=!1,this.verseList=[],this.verseUserCounts={},this.verseTitlePrefix="",this.verseTitleSuffix="'s Room",this.multiverseData={fromVerse:null,toVerse:null,electedVerse:null,mitosisState:!1,mitosisBufferTime:15,mitosisTime:0,mitosisUpdateTime:0},this.textDescriptions={chatIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">C</span> )</span><br>chat',pos:[1,-1.5]},multiverseIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">U</span> )</span><br>multiverse<br>selection',pos:[0,-1.3]},djPlayerVolumeParent:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">B</span> )</span><br>music volume',pos:[0,-1.5]},speakerIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">N</span> )</span><br>mute people<br>pick audio output',pos:[0,-1.5]},micIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">M</span> )</span><br>mute/pick<br>mic input',pos:[0,-1.5]},camIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">V</span> )</span><br>enable/pick<br>video input',pos:[0,-1.5]},helpIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">?</span> )</span><br>help &<br>instructions',pos:[0,-1.5]},infoIconParent:{text:'Info <span class="helpHotKeyParent">( <span class="helpHotKey">I</span> )</span>',pos:[-1,0],offset:[-10,0]},settingsIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">G</span> )</span><br>graphics &<br>navigation',pos:[0,-1.5]},muteAllIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">N</span> )</span><br>mute all users',pos:[1,0]},fullScreenIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">F</span> )</span><br>toggle full screen',pos:[-1,0]},videoQualityIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">H</span> )</span><br>video quality settings',pos:[-1,0]},statsIcon:{text:"jitsi connection status; toggle connection ",pos:[1,0]},usersIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">T</span> )</span> user moderator tools',pos:[1,0]},ft2Button:{text:"Environment",pos:[-1,0],offset:[-10,0]},ft3Button:{text:"Invite Friends",pos:[-1,0],offset:[-10,0]},hud_userCount:{text:"# of People",pos:[-1,0],offset:[-10,0]}},this.loading=!0,this.disclaimer=!1,this.mapPrompt=null,this.mapPromptBG=null,this.delayLoadChatWindow=!1,this.renderSettings=null,this.controlSettings=null,this.shaderEditorDisplay=null,this.radioControls=[],this.controlState=[!0,!1,!1,!1],this.controlToggle=[!0,!0,!1,!1],this.buttonPadding=6,this.toggleOpacity=[.6,1],this.qualityText=["Netbook","Laptop","Desktop Computer","Gamer Rig"],this.activeItem=null,this.jmaWindowVis=!1,this.actionPopUp=null,this.ctaLocalDocURL={},this.ctaContentLoading=!1,this.googleDocHTML=null,this.googleDocURL="";}setDependencies(pxlNav){this.pxlFile=pxlNav.pxlFile,this.pxlCookie=pxlNav.pxlCookie,this.pxlTimer=pxlNav.pxlTimer,this.pxlAudio=pxlNav.pxlAudio,this.pxlUtils=pxlNav.pxlUtils,this.pxlUser=pxlNav.pxlUser,this.pxlDevice=pxlNav.pxlDevice,this.pxlAutoCam=pxlNav.pxlAutoCam,this.pxlCamera=pxlNav.pxlCamera,this.pxlNavCanvas=pxlNav.pxlNavCanvas,this.pxlQuality=pxlNav.pxlQuality,this.pxlEnv=pxlNav.pxlEnv,this.mobile=pxlNav.mobile,this.renderSettings=this.pxlCookie.readCookie(this.pxlUser.renderSettingsCookie),this.controlSettings=this.pxlCookie.readCookie(this.pxlUser.controlModeCookie),pxlNav.pxlDevice.subscribe("resize",this.resize.bind(this));}init(){this.cssBuildClasses(),this.buildConsole();}prepLoader(){this.mapPromptBG=document.createElement("div"),this.mapPromptBG.classList.add("mapPromptBackgroundStyle"),document.body.appendChild(this.mapPromptBG),this.mapPrompt=document.createElement("div"),this.mapPrompt.setAttribute("id","mapPrompt"),this.mapPrompt.classList.add("mapPromptStyle"),this.mapPrompt.classList.add("fader"),this.mapPrompt.classList.add("visOn"),this.mapPrompt.innerHTML="\n            <div id=\"loaderLogoBranding\" class='pxlLoaderLogo'></div>\n            <div class='loadStyleParent'>\n              <div id='pxlLoader' class='loadStyle'></div>\n              <div id='pxlLoaderBackground' class='loadStyleBackground'></div>\n            </div>\n            <div id=\"loaderBranding\" class='pxlLoaderTitle'>".concat(this.projectTitle,"</div>\n            <div id=\"loaderMessage\" class='pxlLoaderMessage'></div>\n          "),document.body.appendChild(this.mapPrompt);var e=document.getElementById("loaderMessage");if(e){var t=this.loaderPhrases[Math.floor(Math.random()*this.loaderPhrases.length)];e.innerHTML=t;}this.buildGuiStatus.loadingBranding&&SVGUtils.svgPromise(this.branding.loader,"loaderBranding","pxlLoaderTitle","loadBrandingLogo"),this.pxlLoader=document.getElementById("pxlLoader"),this.pxlLoader.style.width="2%";var i=document.createElement("div");i.classList.add("canvasCrashPromptBackgroundStyle"),document.body.appendChild(i);var s,a=document.createElement("div");a.classList.add("canvasCrashPromptStyle"),i.appendChild(a),this.pxlQuality&&(s=0==parseInt(this.pxlQuality.detailLimit)?'Looks like your computer is having a hard time, but we’ve got your fix.\n          <br>Please click <a id="crashLink" class="crashLink">HERE</a> to reload '.concat(this.projectTitle,".\n          <br>If you’re still having issues, drop us a line in the chat."):'Looks like your computer is still having trouble, but we’ve got another fix for ya.\n          <br>Please click <a id="crashLink" class="crashLink">HERE</a> to reload '.concat(this.projectTitle," again.\n          <br>Again, if you’re still having issues, drop us a line in the chat.")),a.innerHTML=s;var r=document.getElementById("crashLink"),n=this;r&&(r.onclick=e=>{n.crashLinkTrigger(e,n);});}stepLoader(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";this.pxlLoaderCount+=1;var t=Math.min(100,this.pxlLoaderCount/(this.pxlLoaderTotal-1)*100);100==t&&(this.pxlLoader.style.borderRadius="5px"),this.pxlLoader.style.width=t+"%",this.verbose>=P.INFO&&console.log("Loader",this.pxlLoaderCount,this.pxlLoader.style.width,"; "+e);}setLoaderPhrases(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];e&&e.length>0&&(t&&(this.loaderPhrases=[]),this.loaderPhrases=this.loaderPhrases.concat(e),this.setLoaderObjMessage());}setLoaderObjMessage(){var e=document.getElementById("loaderMessage");if(e){var t=Math.floor(17391.537193*Math.random()*this.loaderPhrases.length%this.loaderPhrases.length),i=this.loaderPhrases[t];e.innerHTML=i;}}booted(){this.buildHudBlock(),this.buildTopBar(),this.buildBottomBar(),this.buildGuiWindowContainer(),this.buildUserControlBlock(),this.buildRawHtml(),this.prepPageDisplay();}step(){var e;this.updateGuiPositions(),null!==(e=this.pxlUser)&&void 0!==e&&e.checkItemWearOff(this.pxlTimer.prevMS)&&this.hideItemHud(),this.pxlNavDataUpdate();}resize(){this.sW=window.innerWidth,this.sH=window.innerHeight,this.resetHelpTextPlacement();["videoinput","audioinput","audiooutput"].forEach((e=>{var t=null,i=null;"videoinput"==e?(t="camChoiceOptionsBlock",i=this.hudIcons.camChoiceIcon):"audioinput"==e?(t="micChoiceOptionsBlock",i=this.hudIcons.micChoiceIcon):"audiooutput"==e&&(t="speakerChoiceOptionsBlock",i=this.hudIcons.speakerChoiceIcon);var s=document.getElementById(t);if(s&&i){var a=s.getBoundingClientRect().width,r=i.parent.getBoundingClientRect();s.style.left=r.x-.5*a,s.style.bottom=this.sH-this.hudBottomBar.getBoundingClientRect().y;}})),this.setUserControlPosition(),this.inviteUserPosition(),this.setArtistInfoSizing();}resetHelpTextPlacement(){Object.keys(this.textDescriptions).forEach((e=>{var t=this.textDescriptions[e];if(t){var i=document.getElementById("helpText_"+e);if(!i)return;var s=document.getElementById(e);if(s){var a=t.pos,r=t.offset?t.offset:[0,0],n=s.getBoundingClientRect(),o=i.getBoundingClientRect(),l=0,h=0,d=!1;a[1]<0?(h=n.y+o.height*a[1],d=!0):0==a[1]?h=n.y+.5*n.height-.5*o.height:a[1]>0&&(h=n.y+n.height+o.height*(a[1]-1),d=!0),d?a[0]<0?l=n.x+n.width+o.width*a[0]:0==a[0]?l=n.x+.5*n.width-.5*o.width:a[0]>0&&(l=n.x+n.width*(a[0]-1)):a[0]<0?l=n.x+o.width*a[0]:0==a[0]?l=n.x+.5*n.width-.5*o.width:a[0]>0&&(l=n.x+2*n.width*a[0]),(l+=r[0])+o.width>this.sW-2?l=this.sW-2-o.width:l<2&&(l=2),h+=r[1],i.style.left=l,i.style.top=h;}else i.style.display="none";}}));}crashLinkTrigger(e,t){var i=location.search.match(/[a-zA-Z0-9=]+/g),s="?";i.forEach((e=>{var t=e.split("=");"dlimit"==t[0]?s+=t[0]+"="+(parseInt(t[1])+1)+"&":s+=e+"&";})),location.search=s;}guiToggleVisibility(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(e=null==e?!this.hudVisibility:e,this.hudVisibility=e,this.hudTopBar&&!this.hudTopBar.origDisplay&&(this.hudTopBar.origDisplay=this.hudTopBar.style.display),this.fastTravelBar&&!this.fastTravelBar.origDisplay&&(this.fastTravelBar.origDisplay=this.fastTravelBar.style.display),this.hudBottomBar&&!this.hudBottomBar.origDisplay&&(this.hudBottomBar.origDisplay=this.hudBottomBar.style.display),e){if(this.hudTopBar&&this.hudTopBar.removeAttribute("style"),this.fastTravelBar&&this.fastTravelBar.removeAttribute("style"),this.hudBottomBar&&this.hudBottomBar.removeAttribute("style"),this.userControlBlock){var t=this.userControlBlock.gui.style.top;this.userControlBlock.gui.removeAttribute("style"),this.userControlBlock.gui.style.top=t;}}else this.hudTopBar&&(this.hudTopBar.style.display="none"),this.fastTravelBar&&(this.fastTravelBar.style.display="none"),this.hudBottomBar&&(this.hudBottomBar.style.display="none"),this.userControlBlock&&(this.userControlBlock.gui.style.display="none");this.hudElements.artistInfo&&(this.hudElements.artistInfo.parent.style.display=e?"grid":"none");}cssBuildClasses(){var e=document.createElement("style");e.type="text/css",e.innerHTML="\n\t\t\t.fader{\n\t\t\t\ttransition: opacity .8s, filter .8s;\n\t\t\t}\n\t\t\t.visOn{\n\t\t\t\tfilter:alpha(opacity=100);\n\t\t\t\topacity:1.0;\n\t\t\t}\n\t\t\t.visOff{\n\t\t\t\tfilter:alpha(opacity=0);\n\t\t\t\topacity:0.0;\n\t\t\t}\n\t\t",document.getElementsByTagName("head")[0].appendChild(e);}prepPromptFader(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=e;("string"!=typeof i||(i=document.getElementById(i)))&&(i.classList.add("fader"),i.classList.add(t?"visOn":"visOff"),i.style.display=t?"inline-block":"none");}promptFader(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if("string"!=typeof e||(e=document.getElementById(e)))if(e.classList.value.indexOf("fader")<0&&e.classList.add("fader"),t)e.style.display="inline-block",setTimeout((()=>{e.classList.contains("visOff")&&(e.classList.remove("visOff"),e.classList.add("visOn"),null!=i&&(e.setAttribute("fadeOut",clockTime+1e3*i),fadeOutList.push(e)));}),50);else if(e.classList.remove("visOn"),e.classList.add("visOff"),s){["webkitTransitionEnd","otransitionend","oTransitionEnd","msTransitionEnd","transitionend"].forEach((t=>{e.addEventListener(t,(()=>{var t=e.parentNode;t&&t.removeChild(e);}));}));}else setTimeout((()=>{e.classList.contains("visOff")&&(e.style.display="none");}),1e3);}buildConsole(){var e=document.createElement("div");e.id="consoleBlock",e.classList.add("consoleBlockStyle"),document.body.appendChild(e),this.guiWindows.consoleBlock={active:!1,gui:e};}buildMessageBlock(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Info",i=document.createElement("div");this.msgCount++,i.id="messageBlock-"+this.msgCount,i.classList.add("messageBlockStyle"),i.classList.add("message"+t);var s=this,a=document.createElement("div");a.classList.add("messageCloseBtn"),a.innerHTML="X",a.addEventListener("click",(function(){s.removeMessage(i);}));var r=document.createElement("div");r.classList.add("messageTopBarStyle");var n=document.createElement("div");n.classList.add("messageHeaderStyle"),n.innerHTML=t,r.appendChild(n),r.appendChild(a),i.appendChild(r);var o=document.createElement("div");return o.classList.add("messageContentStyle"),o.innerHTML=e,i.appendChild(o),i}print(e){this.guiWindows.consoleBlock||this.buildConsole(),this.guiWindows.consoleBlock.active||(this.guiWindows.consoleBlock.active=!0,this.promptFader(this.guiWindows.consoleBlock.gui,!0));var t=this.guiWindows.consoleBlock.gui,i=this.buildMessageBlock(e);t.appendChild(i);}buildHudBlock(){if(this.buildGuiStatus.hud){var e=document.createElement("div");e.id="hudBlock",e.classList.add("hudBlockStyle"),this.hudBlock.obj=e,document.body.appendChild(this.hudBlock.obj),this.hudBlock.obj.style.display="none";var t=this;this.hudBlock.obj.addEventListener("click",(e=>{t.toggleHudBlock(!1,!0);}));}}toggleHudBlock(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(this.hudBlock){e=null==e?!this.hudBlock.active:e,this.hudBlock.active=e;var i=!1;e?i="inline-block":this.checkOpenWindows(t)||(i="none",this.pxlNavCanvas&&this.pxlNavCanvas.focus()),this.hudBlock.obj&&this.hudBlock.obj.style&&0!=i&&(this.hudBlock.obj.style.display=i);}}checkOpenWindows(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=Object.keys(this.guiWindows),i=!1;return t.forEach((t=>{"chatBoxGui"!=t&&(e&&(this.guiWindows[t].button&&this.flipIcon(this.guiWindows[t].button,!1),this.guiWindows[t].gui&&this.guiWindows[t].active&&(this.guiWindows[t].active=!1,this.promptFader(this.guiWindows[t].gui,!1),"settingsGui"==t&&this.togglePxlNavDataDisplay(!1))),i=i||this.guiWindows[t].active);})),i}checkFocus(){!0===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:null)&&this.guiWindows.inviteUserGui&&this.guiWindows.inviteUserGui.active&&this.toggleInviteUser(!1);}buildRawHtml(){}buildTopBar(){if(!this.mobile&&this.buildGuiStatus.userTopBar){var e=document.createElement("div");e.id="hud_topBar",e.classList.add("hud_topBarBlockStyle"),this.hudTopBar=e,document.body.appendChild(this.hudTopBar);var t;t='\n\t\t\t<div id="hud_localVideoStyle" class="hud_localVideoStyle"></div>\n\t\t\t<div id="hud_topBarParent" class="hud_topBarParentStyle">\n\t\t<div id="statsIconParent">\n\t\t\t'.concat('<div id="statsIcon"></div></div>\n\t\t<div id="usersIconParent">\n\t\t\t<div id="usersIcon"></div>','\n\t\t</div>\n\t\t<div  class="hud_topBarVSpacerStyle"></div>\n\t\t\t</div>\n\t\t'),e.innerHTML=t,this.hudIcons.statsIcon=SVGUtils.svgIconPromise("".concat(this.guiRoot,"icons/icon_stats.svg"),"statsIcon","stats"),this.hudIcons.statsIcon.promise.finally((()=>{})),this.hudIcons.usersIcon=SVGUtils.svgIconPromise("".concat(this.guiRoot,"icons/icon_user.svg"),"usersIcon","users");var i=document.createElement("div");i.id="hud_pxlNavData",i.classList.add("hud_pxlNavDataParentStyle"),e.appendChild(i),this.pxlNavData.gui=i;var s=document.createElement("div");s.id="hud_pxlNavData",s.classList.add("hud_pxlNavDataStyle"),i.appendChild(s),t='\n      <div class="hud_pxlNavData_FPS gui_boldText">FPS</div><div class="hud_pxlNavData_FPS">:</div><div id="hud_pxlFPS" class="hud_pxlNavData_FPS"> - </div>\n      <div class="hud_pxlNavData_UL gui_boldText">↑</div><div class="hud_pxlNavData_UL">:</div><div id="hud_pxlUL" class="hud_pxlNavData_UL"> - </div>\n      <div class="hud_pxlNavData_DL gui_boldText">↓</div><div class="hud_pxlNavData_DL">:</div><div id="hud_pxlDL" class="hud_pxlNavData_DL"> - </div>\n    ',s.innerHTML=t,this.pxlNavData.fps=document.getElementById("hud_pxlFPS"),this.pxlNavData.ul=document.getElementById("hud_pxlUL"),this.pxlNavData.dl=document.getElementById("hud_pxlDL");}}buildUserControlBlock(){this.userControlBlock={},this.userControlBlock.activeList=[],this.userControlBlock.userList={},this.userControlBlock.mutedList=[];var e=document.createElement("div");e.classList.add("userControlBlockStyle"),document.body.appendChild(e),this.userControlBlock.gui=e,this.userControlBlock.speakerIcon=null;}buildMedalionBar(){if(this.buildGuiStatus.medalion){var e=document.createElement("div");e.id="hud_medalionBar",e.classList.add("hud_medalionIconBlockStyle"),this.hudMedalionBar=e,document.body.appendChild(this.hudMedalionBar);var t='\n        <div id="medalionIconParent" class="hud_speakerIconStyle">\n          <div id="medalionIcon"></div>\n        </div>\n        <div id="medalionTitle" class="medalionTitleStyle">'.concat(this.branding.title,"</div>\n      ");this.hudMedalionBar.innerHTML=t;var i=document.getElementById("medalionIcon"),s=document.getElementById("medalionTitle");i.addEventListener("mouseover",(()=>{s.classList.add("medalionTitleGrowStyle");})),i.addEventListener("mouseout",(()=>{s.classList.remove("medalionTitleGrowStyle");})),this.hudIcons.medalionIcon=SVGUtils.svgIconPromise(this.branding.medalion,"medalionIcon","info",null,"medalionStyle");}}buildBottomBar(){if(this.buildGuiStatus.bottomBar){var e=document.createElement("div");e.id="hud_bottomBar",e.classList.add("hud_bottomBarStyle"),this.hudBottomBar=e,document.body.appendChild(this.hudBottomBar);var t="";if(t+='\n    <div id="hud_chatIconBlock" class="hud_bottomLeftBlockStyle">\n        <div id="settingsIconParent" class="hud_settingsIconStyle">\n          <object id="settingsIcon"></object>\n        </div>\n  <div></div>\n        <div id="helpIconParent" class="hud_helpIconStyle">\n          <object id="helpIcon"></object>\n        </div>\n        ',!this.mobile&&this.buildGuiStatus.verseList&&(t+='<div class="hud_usersIconStyle">\n            <div id="multiverseIcon"></div>\n          </div>\n          <div></div>'),t+="</div>",this.mobile||(t+='\n        <div class="hud_micCamIconsBlockStyle">\n          <div id="speakerIconParent" class="hud_speakerIconStyle">\n            <div id="speakerIcon"></div>\n          </div>\n          <div id="speakerChoiceIconParent" class="hud_speakerChoiceIconStyle">\n            <div id="speakerChoiceOptionsBlock" class="gui_iconButtonPopup">\n            </div>\n            <div id="speakerChoiceIconParent">\n              <div id="speakerChoiceIcon" class="iconCaretStyle"></div>\n            </div>\n          </div>\n          <div class="hud_micCamSpacerStyle"></div>\n          <div id="micIconParent" class="hud_micIconStyle">\n            <div id="micIcon"></div>\n          </div>\n          <div id="micChoiceIconParent" class="hud_micChoiceIconStyle">\n            <div id="micChoiceOptionsBlock" class="gui_iconButtonPopup">\n            </div>\n            <div id="camChoiceIconParent">\n              <div id="micChoiceIcon" class="iconCaretStyle"></div>\n            </div>\n          </div>\n          <div class="hud_micCamSpacerStyle"></div>\n          <div id="camIconParent" class="hud_camIconStyle">\n            <div id="camIcon"></div>\n          </div>\n          <div id="camChoiceIconBlock" class="hud_camChoiceIconStyle">\n            <div id="camChoiceOptionsBlock" class="gui_iconButtonPopup">\n            </div>\n            <div id="camChoiceIconParent">\n              <div id="camChoiceIcon" class="iconCaretStyle"></div>\n            </div>\n          </div>\n        </div>\n        \n        <div id="hud_helpInfoSettingsBlock" class="hud_helpInfoSettingsBlockStyle">\n          <div class="guiVerseHudTitle">\n            <span id="guiVerseTitle"></span>\n          </div>\n          <div></div>\n          <div id="chatIconParent" class="hud_chatIconStyle">\n            <div id="chatIcon"></div>\n          </div>\n          <div id="hud_messageCount" class="hud_userCountStyle hud_messageCountBaseStyle">0</div>\n        </div>\n      '),this.hudBottomBar.innerHTML=t,this.messageCountObj=document.getElementById("hud_messageCount"),this.hudIcons.chatIcon=SVGUtils.svgIconPromise("".concat(this.guiRoot,"icons/icon_chat.svg"),"chatIcon","chat"),this.mobile||this.pxlAutoCam.enabled){var i=document.getElementById("hud_chatIconBlock");i.style.gridAutoColumns="max-content max-content auto max-content",i.style.margin="0px 10px";}else {this.hudIcons.multiverseIcon=SVGUtils.svgIconPromise("".concat(this.guiRoot,"icons/icon_multiverse.svg"),"multiverseIcon","multiverse"),this.hudIcons.speakerIcon=SVGUtils.svgIconPromise("".concat(this.guiRoot,"icons/icon_ProxAudio.svg"),"speakerIcon","speakerToggle",!1),this.hudIcons.speakerChoiceIcon=SVGUtils.svgIconPromise("".concat(this.guiRoot,"icons/icon_downcaret.svg"),"speakerChoiceIcon","speakerChoice",!1,"iconCaretStyle"),this.hudIcons.micIcon=SVGUtils.svgIconPromise("".concat(this.guiRoot,"icons/icon_mic.svg"),"micIcon","micToggle",!1),this.hudIcons.micChoiceIcon=SVGUtils.svgIconPromise("".concat(this.guiRoot,"icons/icon_downcaret.svg"),"micChoiceIcon","micChoice",!1,"iconCaretStyle"),this.hudIcons.camIcon=SVGUtils.svgIconPromise("".concat(this.guiRoot,"icons/icon_camera.svg"),"camIcon","camToggle",!1),this.hudIcons.camChoiceIcon=SVGUtils.svgIconPromise("".concat(this.guiRoot,"icons/icon_downcaret.svg"),"camChoiceIcon","camChoice",!1,"iconCaretStyle"),this.hudIcons.helpIcon=SVGUtils.svgIconPromise("".concat(this.guiRoot,"icons/icon_help.svg"),"helpIcon","help"),this.hudIcons.settingsIcon=SVGUtils.svgIconPromise("".concat(this.guiRoot,"icons/icon_settings.svg"),"settingsIcon","settings");document.getElementById("guiVerseTitle");}}}prepArtistInfo(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(null!==(e=this.pxlEnv)&&void 0!==e&&e.postIntro&&""!=t){if(!this.hudElements.artistInfo){this.hudElements.artistInfo={},this.hudElements.artistInfo.active=!1;var i=document.createElement("div");i.classList.add("hud_aristInfoParentStyle"),this.hudElements.artistInfo.parent=i;var s=document.createElement("div");s.classList.add("hud_aristInfoButtonStyle"),i.appendChild(s);var a=this;s.onclick=()=>{a.toggleArtistInfo();},this.hudElements.artistInfo.button=s;var r=document.createElement("div");r.classList.add("hud_aristInfoButtonTextStyle"),r.innerHTML="artwork info&nbsp;&nbsp;",s.appendChild(r),this.hudElements.artistInfo.buttonText=r;var n=document.createElement("div");n.classList.add("hud_aristInfoCarrotXStyle"),n.id="artistInfoCarrotX",s.appendChild(n);var o=document.createElement("div");o.classList.add("hud_aristInfoInner"),o.innerHTML=t,i.appendChild(o),this.hudElements.artistInfo.inner=o,document.body.appendChild(i),this.hudElements.artistInfo.closeSvg=SVGUtils.svgPromise("".concat(this.guiRoot,"global/carrotCloseAnimate.svg"),"artistInfoCarrotX"),this.hudElements.artistInfo.closeSvg.promise.finally((()=>{this.artistInfoButtonPrep();}));}this.toggleArtistInfo(!1),null!=t&&this.hudVisibility&&!this.pxlAutoCam.active?(this.hudElements.artistInfo.parent.style.zIndex=155,this.hudElements.artistInfo.parent.style.display="grid",this.hudElements.artistInfo.inner.innerHTML=t,setTimeout((()=>{this.setArtistInfoSizing();}),20)):(this.hudElements.artistInfo.parent.style.zIndex=-5,this.hudElements.artistInfo.parent.style.display="none");}}artistInfoButtonPrep(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=this.hudElements.artistInfo.closeSvg.svg;if(t){var i=t.getElementById("carrotToClone_on"),s=t.getElementById("carrotToClone_off");i&&s?(this.hudElements.artistInfo.onAnim=i,this.hudElements.artistInfo.offAnim=s):2==e||setTimeout((()=>{this.artistInfoButtonPrep(e+=1);}),100);}}setArtistInfoSizing(){if(this.hudElements.artistInfo){var e=this.hudElements.artistInfo.inner.clientHeight,t=this.hudElements.artistInfo.inner.clientWidth,i=this.hudElements.artistInfo.button.clientHeight,s=this.hudElements.artistInfo.button.clientWidth;this.hudElements.artistInfo.innerHeight=e,this.hudElements.artistInfo.innerWidth=t,this.hudElements.artistInfo.baseHeight=i,this.hudElements.artistInfo.baseWidth=s,this.hudElements.artistInfo.parent.style.height=e+"px",this.hudElements.artistInfo.parent.style.width=t+"px";var a=this.hudElements.artistInfo.buttonText.clientWidth;this.hudElements.artistInfo.buttonText.maxWidth=a,this.hudElements.artistInfo.buttonText.style.maxWidth=a+"px",this.toggleArtistInfo(this.hudElements.artistInfo.active);}}toggleArtistInfo(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;e=null==e?!this.hudElements.artistInfo.active:e,this.hudElements.artistInfo.active=e;var t=this.hudElements.artistInfo.innerHeight,i=Math.min(.3*this.pxlDevice.sW,this.hudElements.artistInfo.innerWidth),s=this.hudElements.artistInfo.baseHeight,a=this.hudElements.artistInfo.baseWidth;this.hudElements.artistInfo.parent.style.maxHeight=e?t+"px":s+"px",this.hudElements.artistInfo.parent.style.maxWidth=e?i+"px":a+"px",this.hudElements.artistInfo.parent.style.padding=e?"5px":"0px";var r=this.hudElements.artistInfo.buttonText.maxWidth;this.hudElements.artistInfo.buttonText.style.maxWidth=e?"0px":r+"px",this.hudElements.artistInfo.buttonText.style.opacity=e?"0":"1",this.hudElements.artistInfo.buttonText.style.filter="alpha(opacity="+(e?"0":"1000")+")",this.hudElements.artistInfo.inner.style.opacity=e?"1":"0",this.hudElements.artistInfo.inner.style.filter="alpha(opacity="+(e?"100":"0")+")",this.hudElements.artistInfo.onAnim&&(e?this.hudElements.artistInfo.onAnim.beginElement():this.hudElements.artistInfo.offAnim.beginElement());}prepPageDisplay(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(null!==(e=this.pxlEnv)&&void 0!==e&&e.postIntro&&""!=t){if(!this.hudElements.artistInfo){this.hudElements.artistInfo={},this.hudElements.artistInfo.active=!1;var i=document.createElement("div");i.classList.add("hud_aristInfoParentStyle"),this.hudElements.artistInfo.parent=i;var s=document.createElement("div");s.classList.add("hud_aristInfoButtonStyle"),i.appendChild(s);var a=this;s.onclick=()=>{a.togglePageDisplay();},this.hudElements.artistInfo.button=s;var r=document.createElement("div");r.classList.add("hud_aristInfoButtonTextStyle"),r.innerHTML="artwork info&nbsp;&nbsp;",s.appendChild(r),this.hudElements.artistInfo.buttonText=r;var n=document.createElement("div");n.classList.add("hud_aristInfoCarrotXStyle"),n.id="artistInfoCarrotX",s.appendChild(n);var o=document.createElement("div");o.classList.add("hud_aristInfoInner"),o.innerHTML=t,i.appendChild(o),this.hudElements.artistInfo.inner=o,document.body.appendChild(i);}this.togglePageDisplay(!1),null!=t&&this.hudVisibility&&!this.pxlAutoCam.active?(this.hudElements.artistInfo.parent.style.zIndex=155,this.hudElements.artistInfo.parent.style.display="grid",this.hudElements.artistInfo.inner.innerHTML=t,setTimeout((()=>{this.setArtistInfoSizing();}),20)):(this.hudElements.artistInfo.parent.style.zIndex=-5,this.hudElements.artistInfo.parent.style.display="none");}}setPageToDisplay(){if(this.hudElements.artistInfo){var e=this.hudElements.artistInfo.inner.clientHeight,t=this.hudElements.artistInfo.inner.clientWidth,i=this.hudElements.artistInfo.button.clientHeight,s=this.hudElements.artistInfo.button.clientWidth;this.hudElements.artistInfo.innerHeight=e,this.hudElements.artistInfo.innerWidth=t,this.hudElements.artistInfo.baseHeight=i,this.hudElements.artistInfo.baseWidth=s,this.hudElements.artistInfo.parent.style.height=e+"px",this.hudElements.artistInfo.parent.style.width=t+"px";var a=this.hudElements.artistInfo.buttonText.clientWidth;this.hudElements.artistInfo.buttonText.maxWidth=a,this.hudElements.artistInfo.buttonText.style.maxWidth=a+"px",this.toggleArtistInfo(this.hudElements.artistInfo.active);}}togglePageDisplay(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(this.hudElements.artistInfo){var t;e=null==e?!this.hudElements.artistInfo.active:e,null!==(t=this.hudElements)&&void 0!==t&&t.artistInfo&&(this.hudElements.artistInfo.active=e);var i=this.hudElements.artistInfo.innerHeight,s=Math.min(.3*this.pxlDevice.sW,this.hudElements.artistInfo.innerWidth),a=this.hudElements.artistInfo.baseHeight,r=this.hudElements.artistInfo.baseWidth;this.hudElements.artistInfo.parent.style.maxHeight=e?i+"px":a+"px",this.hudElements.artistInfo.parent.style.maxWidth=e?s+"px":r+"px",this.hudElements.artistInfo.parent.style.padding=e?"5px":"0px";var n=this.hudElements.artistInfo.buttonText.maxWidth;this.hudElements.artistInfo.buttonText.style.maxWidth=e?"0px":n+"px",this.hudElements.artistInfo.buttonText.style.opacity=e?"0":"1",this.hudElements.artistInfo.buttonText.style.filter="alpha(opacity="+(e?"0":"1000")+")",this.hudElements.artistInfo.inner.style.opacity=e?"1":"0",this.hudElements.artistInfo.inner.style.filter="alpha(opacity="+(e?"100":"0")+")",this.hudElements.artistInfo.onAnim&&(e?this.hudElements.artistInfo.onAnim.beginElement():this.hudElements.artistInfo.offAnim.beginElement());}}iconEvent(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(this.hudBlock.obj&&(this.hudBlock.obj.style.display="none"),"click"==e){if("chat"==i)return void this.toggleChatBox();if("musicToggle"==i)return this.pxlAudio.djPlayerMuteToggle(),void this.toggleIcon(t,!this.pxlAudio.djMuted,!0);if("userSpeakerToggle"==i)return void this.setUserControls(t);if("speakerToggle"==i)return void this.toggleIcon(t,!1,!0);if("speakerChoice"==i){var s="audiooutput";return void this.flipIcon(t,this.guiWindows[s]&&this.guiWindows[s].active)}if("help"==i){var a=!!this.guiWindows.helpGui&&this.guiWindows.helpGui.active;return this.checkOpenWindows(!0),void this.helpGuiToggle(!a)}if("info"==i){var r=!!this.guiWindows.infoGui&&this.guiWindows.infoGui.active;return this.checkOpenWindows(!0),void this.infoGuiToggle(!r)}if("settings"==i){var n=!!this.guiWindows.settingsGui&&this.guiWindows.settingsGui.active;return this.checkOpenWindows(!0),void this.settingsGuiToggle(!n)}if("userProfile"==i)return void this.toggleUserProfile();if("users"==i);else if("stats"==i)return}}setMicVolumeLevel(e){this.hudIcons.micIcon.volumeMask||(this.hudIcons.micIcon.volumeMask=document.getElementById("gui_micVolumeMask"),this.hudIcons.micIcon.timer=this.pxlTimer.msRunner.x-1);var t=12-11*e;this.hudIcons.micIcon.volumeMask.setAttribute("y",t);}toggleIcon(e,t){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(e){if(e.mute.style.filter=t?"alpha(opacity=0)":"alpha(opacity=100)",e.mute.style.opacity=t?"0":"1",e.mute.style.transform=t?"scale(0,0)":"scale(1,1)",["camToggle","speakerToggle"].includes(e.eventType))return;var s={speakerToggle:"speaker",micToggle:"audio",camToggle:"video"}[e.eventType];s&&i&&this.loadingDeviceChange(s,t);}}flipIcon(e,t){e.caret.style.transform="rotate( ".concat(t?"180deg":"0deg"," )");}loadingDeviceChange(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=null;"speaker"==e?i=this.hudIcons.speakerIcon:"audio"==e?i=this.hudIcons.micIcon:"video"==e&&(i=this.hudIcons.camIcon),i.indicator.style.display=t?"inline-block":"none",i.indicator.style.animationPlayState=t?"running":"paused",i.waiting.forEach((e=>{e.setAttribute("fill-opacity",t?".5":"1");})),t&&setTimeout((()=>{this.loadingDeviceChange(e,!1);}),1e3);}djBuildPlayer(){if(this.buildGuiStatus.djPlayer){this.djPlayerObj=document.createElement("div"),this.djPlayerObj.id="djPlayer";var e='\n          <audio id="djStream" playsinline muted>\n            <source src="'+this.pxlAudio.djUrlSource+'"></source>\n          </audio>\n          <table cellpadding=0 cellspacing=5 border=0 style="height:100%;"><tbody><tr>\n              <td align="left">\n                  <div id="djPlayerVol"></div>\n              <  d><td valign="center" align="left" width=100%>\n                  <div id="djPlayerVolumeParent" class="volParent"><div id="djPlayerVolume" class="volSlider"></div></div>\n              <  d><  r>\n          <  body><  able>';this.djPlayerObj.innerHTML=e,document.getElementById("musicControllerBlock").appendChild(this.djPlayerObj),this.hudIcons.musicIcon=SVGUtils.svgIconPromise("".concat(this.guiRoot,"icons/icon_music.svg"),"djPlayerVol","musicToggle",!this.pxlAudio.djMuted),this.pxlAudio.djBuildPlayer();}}buildItemHud(e,t){this.activeItem.innerHTML=t,this.activeItem.style.opacity="1",this.activeItem.style.filter="alpha(opacity=100)",this.activeItem.style.textShadow="1px 1px 3px #000000",setTimeout((()=>{this.activeItem.style.fontSize="1.5em",this.activeItem.style.top=".5%",this.activeItem.style.right="140px",this.activeItem.style.transform="translateX(0%)";}),1500);}hideItemHud(){this.activeItem.innerHTML="",this.activeItem.style.fontSize="3em",this.activeItem.style.top="10%",this.activeItem.style.right="50%",this.activeItem.style.transform="translateX(50%)",this.activeItem.style.opacity="0",this.activeItem.style.filter="alpha(opacity=0)";}mapPrepPrompts(){this.activeItem=document.createElement("div"),this.activeItem.classList.add("activeItemStyle"),document.body.appendChild(this.activeItem);}updateGuiPositions(){if(this.loading){for(var e=this.radioControls.length,t=!1,i=0;i<e;++i){if(!this.radioControls[i][3]){t=!0;break}var s=this.radioControls[i][0],a=this.radioControls[i][2].getBoundingClientRect(),r=a.width+2*this.buttonPadding,n=a.height+2*this.buttonPadding,o=a.top-this.buttonPadding,l=a.left-this.buttonPadding;s.style.width=r,s.style.height=n,s.style.top=o,s.style.left=l,this.radioControls[i][1].style.width=r,this.radioControls[i][1].style.height=n,this.radioControls[i][1].style.top=o,this.radioControls[i][1].style.left=l;}this.loading=t;}}togglGuiWindow(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];"helpGui"==e?this.helpGuiToggle(t,!1):"infoGui"==e?this.infoGuiToggle(t,!1):"settingsGui"==e&&this.settingsGuiToggle(t,!1);}svgCheckClick(){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;e&&("close"!=e?"ft1"!=e&&"ft2"!=e&&("ft3"!=e?"ft4"!=e&&("ft5"!=e||this.pxlAutoCam.toggleAutoCam()):this.toggleInviteUser()):this.toggleGuiWindowContainer(null,!1,!0));}svgStylize(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(e){var i=e.path?e.path[1]:e.target.parentNode,s=i.getElementById("state");if(s){var a=t?"white":"none";s.setAttribute("fill",a);}var r=i.getElementById("hover");r&&r.setAttribute("fill",color);}}renderQualitySettings(e){this.pxlQuality.percent=e,this.pxlQuality.screenResPerc=.75*e+.25,this.pxlQuality.mapAutoQualityUpdate(e,!0),this.pxlDevice.resizeRenderResolution();}pxlNavDataUpdate(){this.pxlNavData.active&&this.pxlTimer.msRunner.x>this.pxlNavData.fpsSet&&(this.pxlNavData.fpsSet=this.pxlTimer.msRunner.x+1,this.pxlNavData.fps.innerText=parseInt(1/this.pxlTimer.msRunner.y));}buildGuiWindowContainer(){var e=document.createElement("div");e.classList.id="guiWindowBackground",e.classList.add("guiWindowBackground"),e.classList.add("fader"),e.classList.add("visOff"),e.style.display="none";var t=this;e.onclick=e=>{t.toggleGuiWindowContainer(e,!1,!0);},this.guiWindowBG=e,document.body.appendChild(e);}toggleGuiWindowContainer(e,t){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(e){var s=(e.path?e.path[0]:e.target).getAttribute("id");if("guiWindowBackground"!=s){if(!["gui_helpGuiWindow","gui_helpContent","gui_infoGuiWindow","gui_infoContent","gui_settingsGuiWindow","gui_settingsContent"].includes(s))return null}}var a=this.checkOpenWindows(i);this.guiWindowBG&&a==t&&this.promptFader(this.guiWindowBG,t,null,!1),t?this.pxlNavCanvas.blur():this.pxlNavCanvas.focus();}helpGuiBuild(){this.guiWindows.helpGui={},this.guiWindows.helpGui.gui=null,this.guiWindows.helpGui.active=!1;var e=document.createElement("div");e.id="gui_helpGuiWindow",e.classList.add("gui_helpGuiParentStyle"),this.prepPromptFader(e),this.guiWindowBG.appendChild(e);e.innerHTML='\n    <div id="gui_helpContent" class="gui_contentStyle">\n  <div class="gui_body">\n    <div id="gui_helpGui_keyboardParent" class="gui_helpGui_keyboardParent">\n    <div id="gui_helpGui_controlsKeyboard" class="guiPadding settings_sectionHeader">keyboard controls</div>\n    <div class="gui_helpGui_ASDWorUDLR">\n      <div id="gui_helpGui_asdw" class="gui_helpGui_asdw"></div>\n      <div id="gui_helpGui_or" class="gui_helpGui_text">or</div>\n      <div id="gui_helpGui_udlr" class="gui_helpGui_udlr"></div>\n    </div>\n    <div id="gui_helpGui_useKeys" class="gui_helpGui_text" style="display:inline-block;">Use your keyboard <span class="gui_boldText">ARROWS</span> or<br><span class="gui_boldText">AWSD</span> keys to move around</div>\n    </div>\n    <div id="gui_helpGui_mouse" class="gui_helpGui_mouse">\n    <div id="gui_helpGui_MouseControls" class="guiPadding settings_sectionHeader">mouse controls</div>\n    <div id="gui_helpGui_MouseOutlined" class="gui_helpGui_mouseOutline"></div>\n    <div id="gui_helpGui_useMouse" class="guiPadding gui_helpGui_text" style="display:inline-block;">To orient your view:<br><span class="gui_boldText">LEFT CLICK</span> and drag your mouse<br><span class="gui_boldText">RIGHT CLICK</span> to lock your mouse</div>\n    </div>\n  </div>\n  <div id="gui_helpGui_hotKeys" class="gui_helpGui_hotKeys">\n          You can change <span class="gui_boldText">Navigation</span> and <span class="gui_boldText">Look controls</span> in the <span class="gui_boldText">Settings</span> <span id="gui_helpGui_settingIcon"></span> menu\n        </div>\n  <div id="guiHelpFooter" class="gui_footer">\n    <div class="guiButton" id="guiHelpBackButton">close</div>\n  </div>\n  <div class="gui_spacer"></div>\n    </div>\n  ',[[this.guiRoot+"keyboard/asdw.svg","gui_helpGui_asdw","guiKeyDispSVG",!1],[this.guiRoot+"keyboard/udlr.svg","gui_helpGui_udlr","guiKeyDispSVG",!1],[this.guiRoot+"mouse/MouseOutlined.svg","gui_helpGui_MouseOutlined","guiMouseDispSVG",!1]].forEach((e=>{SVGUtils.svgButtonPromise(...e);}));var t=this;document.getElementById("guiHelpBackButton").onclick=e=>{t.introHelpActive&&(t.introHelpActive=!1,t.pxlEnv.postHelpIntro()),t.svgCheckClick(e,"close");},Object.keys(this.textDescriptions).forEach((t=>{var i=this.textDescriptions[t];if(i){var s=i.text,a=(i.pos,document.createElement("div"));a.id="helpText_"+t,a.classList.add("helpTextDescriptionParent"),a.innerHTML=s,e.appendChild(a),this.textDescriptions[t].obj=a;}}));var i=document.getElementById("gui_helpGui_settingIcon");i&&this.hudIcons.settingsIcon&&(i.innerHTML=this.hudIcons.settingsIcon.svg.parentNode.innerHTML,i.style.position="relative",i.style.top="7.3px",i.style.width="30px",i.style.padding="2px",i.style.cursor="pointer",i.children[0].style.height="26px",i.onclick=()=>{t.iconEvent("click",null,"settings");}),this.guiWindows.helpGui.gui=e,setTimeout((()=>{this.resize();}),50);}helpGuiToggle(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.guiWindows.helpGui||this.helpGuiBuild(),e=null==e?!this.guiWindows.helpGui.active:e,this.guiWindows.helpGui.active=e,this.promptFader(this.guiWindows.helpGui.gui,e),this.toggleGuiWindowContainer(null,e),this.hudBlock.active&&this.toggleHudBlock(e),this.introHelpActive&&!e&&(this.introHelpActive=!1,this.pxlEnv.postHelpIntro()),setTimeout((()=>{this.resetHelpTextPlacement();}),20);}infoGuiBuild(){this.guiWindows.infoGui={},this.guiWindows.infoGui.gui=null,this.guiWindows.infoGui.active=!1;var e=document.createElement("div");e.id="gui_infoGuiWindow",e.classList.add("gui_infoGuiParentStyle"),this.prepPromptFader(e),this.guiWindowBG.appendChild(e);var t="";t+='\n    <div id="gui_infoContent" class="gui_contentInfoStyle">\n  <div class="gui_infoBody">\n    <div id="gui_infoGuiParent" class="gui_infoGuiParent">\n    <br>'.concat(this.projectTitle,', created by <a href="https://www.theumbrella.nyc/">The Umbrella</a>,\n    <br>an experience design collective.\n    <br>\n    <br>Want to chat?\n    <br><a href="mailto:info@theumbrella.nyc">info@theumbrella.nyc</a>\n    <br>\n    <br>We’re in active development. Get in touch if you have any issues.\n    <br>\n    </div>\n  </div>\n  <div id="guiInfoFooter" class="gui_footer">\n    <div class="guiButton" id="guiInfoBackButton">close</div>\n  </div>\n    </div>\n  '),e.innerHTML=t;var i=this;document.getElementById("guiInfoBackButton").onclick=e=>{i.svgCheckClick(e,"close");},this.guiWindows.infoGui.gui=e;}infoGuiToggle(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.guiWindows.infoGui||this.infoGuiBuild(),e=null==e?!this.guiWindows.infoGui.active:e,this.guiWindows.infoGui.active=e,this.promptFader(this.guiWindows.infoGui.gui,e),this.toggleGuiWindowContainer(null,e),this.hudBlock.active&&this.toggleHudBlock(e),this.introHelpActive&&!e&&(this.introHelpActive=!1,this.pxlEnv.postHelpIntro());}applyCookies(){this.controlSettings&&(console.log(this.controlSettings),this.controlSettings=this.controlSettings),this.renderSettings&&(console.log(this.renderSettings),this.renderSettings=this.renderSettings);}settingsGuiBuild(){var e=this;this.guiWindows.settingsGui={},this.guiWindows.settingsGui.gui=null,this.guiWindows.settingsGui.active=!1;var t=document.createElement("div");t.id="gui_settingsGuiWindow",t.classList.add("gui_settingsGuiParentStyle"),this.prepPromptFader(t),this.guiWindowBG.appendChild(t);var i="Default",s='\n    <div id="gui_settingsContent" class="gui_contentSettingsStyle">\n  <div class="gui_settingsBody">\n    <div class="gui_settingsParentGrid">\n      \x3c!-- -- Username -- -- --\x3e\n    <div class="cellMargin settings_icon" id="settings_user"></div>\n    <div class="settings_optionHeader">Username</div>\n    <div class="settings_radio" style="grid-auto-flow: row; justify-content: start;">\n                    <div id="guiuserProfileBoxFieldParent" class="gui_userProfileBoxFieldParentStyle">\n                      <input type="text" placeholder="Set your username" value="'.concat(i=i||"",'" id="settings_usernameInput" class="settings_usernameInput"></input>\n                      <input type="button" value="Set" id="settings_sendUsername" class="sendUsername">\n                    </div>\n                    <div id="settings_usernameResponseMessage" class="usernameResponseMessageStyle"></div>\n                </div>\n      \x3c!-- -- -- -- -- -- --\x3e\n    <div class="settingsGridSpan settingsSpacer"></div>\n      \x3c!-- -- Left/Right -- -- --\x3e\n    <div class="cellMargin settings_icon" id="settings_left_right"></div>\n    <div class="settings_optionHeader">Left/Right</div>\n    <div class="settings_radio" id="settingsRadioBlock_leftRight">\n      <span>\n      <input type="radio" id="settings_tankTurning" name="settings_leftRight" value="0" hidden>\n      <label for="settings_tankTurning">Turn</label>\n      </span>\n      <span>\n      <input type="radio" id="settings_strafing" name="settings_leftRight" value="1" hidden>\n      <label for="settings_strafing">Strafe</label>\n      </span>\n    </div>\n      \x3c!-- -- Mouse -- -- --\x3e\n    <div class="cellMargin settings_icon" id="settings_mouse"></div>\n    <div class="settings_optionHeader">Mouse Looking</div>\n    <div class="settings_radio" id="settingsRadioBlock_mouse">\n      <span>\n      <input type="radio" id="settings_dragLooking" name="settings_mouse" value="0" hidden>\n      <label for="settings_dragLooking">Native</label>\n      </span>\n      <span>\n      <input type="radio" id="settings_pointLooking" name="settings_mouse" value="1" hidden>\n      <label for="settings_pointLooking">Inverted</label>\n      </span>\n    </div>\n      \x3c!-- -- -- -- -- -- --\x3e\n    <div class="settingsGridSpan settingsSpacer"></div>\n      \x3c!-- -- Graphics Quality -- -- --\x3e\n    <div class="cellMargin settings_icon" id="settings_graphics"></div>\n    <div class="settings_optionHeader">Graphics Quality</div>\n    <div class="settings_radio" id="settingsRadioBlock_graphics">\n      <span>\n      <input type="radio" id="settings_graphicsQuality_low" name="settings_autoQuality" value="0" hidden>\n      <label for="settings_graphicsQuality_low">Low</label>\n      </span>\n      <span>\n      <input type="radio" id="settings_graphicsQuality_med" name="settings_autoQuality" value="1" hidden>\n      <label for="settings_graphicsQuality_med">Medium</label>\n      </span>\n      <span>\n      <input type="radio" id="settings_graphicsQuality_high" name="settings_autoQuality" value="2" hidden>\n      <label for="settings_graphicsQuality_high">High</label>\n      </span>\n      <span>\n      <input type="radio" id="settings_graphicsQuality_custom" name="settings_autoQuality" value="3" hidden>\n      <label for="settings_graphicsQuality_custom">Custom</label>\n      </span>\n    </div>\n      \x3c!-- -- -- -- --\x3e\n      <div class="r7Adv gui_settingsAdvancedParentGrid" id="gui_advancedSettings">\n    \x3c!-- -- -- -- --\x3e\n      <div class="cellMargin settings_icon" id="settings_render"></div>\n      <div class="settings_optionHeader">Render Resolution</div>\n      <div class="settings_radio" id="settingsRadioBlock_resolution">\n      <span>\n        <input type="radio" id="settings_render_25" name="settings_renderPerc" value=".25" hidden>\n        <label for="settings_render_25">25%</label>\n      </span>\n      <span>\n        <input type="radio" id="settings_render_50" name="settings_renderPerc" value=".5" hidden>\n        <label for="settings_render_50">50%</label>\n      </span>\n      <span>\n        <input type="radio" id="settings_render_75" name="settings_renderPerc" value=".75" hidden>\n        <label for="settings_render_75">75%</label>\n      </span>\n      <span>\n        <input type="radio" id="settings_render_100" name="settings_renderPerc" value="1" hidden>\n        <label for="settings_render_100">100%</label>\n      </span>\n      </div>\n    \x3c!-- -- -- -- --\x3e\n      <div class="cellMargin settings_icon" id="settings_fog"></div>\n      <div class="settings_optionHeader">Fog Quality</div>\n      <div class="settings_radio" id="settingsRadioBlock_fog">\n      <span>\n        <input type="radio" id="settings_noRedFog" name="settings_fogLevel" value="0" hidden>\n        <label for="settings_noRedFog">Low</label>\n      </span>\n      <span>\n        <input type="radio" id="settings_cheapResFog" name="settings_fogLevel" value="1" hidden>\n        <label for="settings_cheapResFog">Medium</label>\n      </span>\n      <span>\n        <input type="radio" id="settings_highResFog" name="settings_fogLevel" value="2" hidden>\n        <label for="settings_highResFog">High</label>\n      </span>\n      </div>\n    \x3c!-- -- -- -- --\x3e\n      <div class="cellMargin settings_icon" id="settings_bloom"></div>\n      <div class="settings_optionHeader">Bloom Effects</div>\n      <div class="settings_radio" id="settingsRadioBlock_bloom">\n      <span>\n        <input type="radio" id="settings_noBloom" name="settings_bloomEffects" value="0" hidden>\n        <label for="settings_noBloom">Off</label>\n      </span>\n      <span>\n        <input type="radio" id="settings_bloomActive" name="settings_bloomEffects" value="1" hidden>\n        <label for="settings_bloomActive">On</label>\n      </span>\n      </div>\n    \x3c!-- -- -- -- --\x3e\n      </div>\n    </div>\n      <div class="settingsGridSpan settingsEmptySpacer"></div>\n    </div>\n    <div class="guiSettingsFooterButtons">\n    <div class="guiButton" id="guiSettingsBackButton">close</div>\n    </div>\n  </div>\n    </div>\n  ');t.innerHTML=s,this.guiWindows.settingsGui.gui=t;var a=this;this.qualitySlider=document.getElementById("SettingsGraphicsQualitySlider"),document.getElementById("guiSettingsBackButton").onclick=e=>{a.svgCheckClick(e,"close");},[[this.guiRoot+"settingsIcons/settings_user.svg","settings_user",["settings_icon_scale"],!1],[this.guiRoot+"settingsIcons/settings_left_right.svg","settings_left_right",["settings_icon"],!1],[this.guiRoot+"settingsIcons/settings_mouse.svg","settings_mouse",["settings_icon"],!1],[this.guiRoot+"settingsIcons/settings_graphics.svg","settings_graphics",["settings_icon"],!1],[this.guiRoot+"settingsIcons/settings_render.svg","settings_render",["settings_icon"],!1],[this.guiRoot+"settingsIcons/settings_fog.svg","settings_fog",["settings_icon"],!1],[this.guiRoot+"settingsIcons/settings_bloom.svg","settings_bloom",["settingsIconStyle"],!1]].forEach((e=>{SVGUtils.svgButtonPromise(...e);}));var r=document.getElementById("settings_usernameInput");r.onkeyup=e=>{a.keyUsernameSet(e);},r.onkeydown=e=>{a.keyDownUsernameSet(e);},this.guiWindows.settingsGui.usernameInput=r,document.getElementById("settings_sendUsername").addEventListener("click",(()=>{a.sendUsernameUpdate(r);}));var n,o,l=document.getElementById("settings_usernameResponseMessage");this.guiWindows.settingsGui.usernameReturn=l,this.guiWindows.settingsGui.advObj=document.getElementById("gui_advancedSettings"),this.guiWindows.settingsGui.customObj=document.getElementById("settings_graphicsQuality_custom"),o=(n=["settings_graphicsQuality_low","settings_graphicsQuality_med","settings_graphicsQuality_high","settings_graphicsQuality_custom"]).length;for(var h=function _loop(){var t=n[d],i=document.getElementById(t);e.setRadioStyle(i,d,o);var s=parseInt(i.value);i.addEventListener("change",(e=>{a.pxlQuality.setQualityLevel(s),a.setRadioValues();}));},d=0;d<o;++d)h();o=(n=["settings_render_25","settings_render_50","settings_render_75","settings_render_100"]).length;for(var c=function _loop2(){var t=n[u],i=document.getElementById(t);e.setRadioStyle(i,u,o);var s=parseFloat(i.value);i.addEventListener("change",(e=>{a.guiWindows.settingsGui.customObj.checked=!0,a.pxlQuality.setGraphicsSettings({resolution:s}),a.pxlQuality.setQualityCookie(3);}));},u=0;u<o;++u)c();o=(n=["settings_noRedFog","settings_cheapResFog","settings_highResFog"]).length;for(var p=function _loop3(){var t=n[m],i=document.getElementById(t);e.setRadioStyle(i,m,o);var s=i.value;i.addEventListener("change",(e=>{a.guiWindows.settingsGui.customObj.checked=!0,a.pxlQuality.setGraphicsSettings({fog:s}),a.pxlQuality.setQualityCookie(3);}));},m=0;m<o;++m)p();o=(n=["settings_noBloom","settings_bloomActive"]).length;for(var v=function _loop4(){var t=n[g],i=document.getElementById(t);e.setRadioStyle(i,g,o);var s=1==i.value;i.addEventListener("change",(e=>{a.guiWindows.settingsGui.customObj.checked=!0,a.pxlQuality.setGraphicsSettings({bloom:s}),a.pxlQuality.setQualityCookie(3);}));},g=0;g<o;++g)v();o=(n=["settings_tankTurning","settings_strafing"]).length;for(var f=function _loop5(){var t=n[x],i=document.getElementById(t);e.setRadioStyle(i,x,o);var s=1==i.value;i.addEventListener("change",(e=>{a.pxlQuality.setGraphicsSettings({leftRight:s},null);}));},x=0;x<o;++x)f();o=(n=["settings_dragLooking","settings_pointLooking"]).length;for(var y=function _loop6(){var t=n[b],i=document.getElementById(t);e.setRadioStyle(i,b,o);var s=1==i.value;i.addEventListener("change",(e=>{a.pxlQuality.setGraphicsSettings({mouse:s},null);}));},b=0;b<o;++b)y();this.setRadioValues();}setRadioStyle(e,t,i){var s="settings_radio_label_mid";0==t?s="settings_radio_label_start":t==i-1&&(s="settings_radio_label_end"),e.parentNode.children[1].classList.add(s);}setRadioValues(){var e=this.pxlQuality.settings;Object.keys(e).forEach((t=>{var i=document.getElementById("settingsRadioBlock_"+t);if(i){var s="resolution"==t?4*e[t]-1:~~e[t];i.children[s].children[0].checked=!0;}}));}settingsGuiAdvObjSizing(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=this.guiWindows.settingsGui.advObj,i=t.offsetHeight;t.style.maxHeight=(e?i:0)+"px",t.setAttribute("maxHeight",i);}settingsGuiToggle(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.guiWindows.settingsGui||this.settingsGuiBuild(),(e=null==e?!this.guiWindows.settingsGui.active:e)&&this.guiWindows.settingsGui&&(this.guiWindows.settingsGui.usernameReturn.innerText=""),this.guiWindows.settingsGui.active=e,this.promptFader(this.guiWindows.settingsGui.gui,e),this.toggleGuiWindowContainer(null,e),this.hudBlock.active&&this.toggleHudBlock(e),this.toggleHudBlock(e,!1),this.togglePxlNavDataDisplay(e),this.introHelpActive&&!e&&(this.introHelpActive=!1,this.pxlEnv.postHelpIntro());}togglePxlNavDataDisplay(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;null==e&&(e=!!this.guiWindows.settingsGui&&this.guiWindows.settingsGui.active),this.pxlNavData.active=e;var t=this.pxlNavData.height||200;this.pxlNavData.gui.style.maxHeight=e?t+"px":"0px",e||(this.pxlNavData.height=this.pxlNavData.gui.offsetHeight);}renderRadius(e){this.pxlEnv.mapGlowPass.strength=Number(e),this.pxlEnv.roomBloomPass.strength=Number(e);}renderThreshold(e){this.pxlEnv.mapGlowPass.threshold=Number(e),this.pxlEnv.roomBloomPass.threshold=Number(e);}renderGlowRadius(e){this.pxlEnv.mapGlowPass.radius=Number(e),this.pxlEnv.roomBloomPass.radius=Number(e);}renderResolution(e){this.pxlQuality.screenResPerc=.75*e+.25,this.pxlDevice.resizeRenderResolution();}inviteUserBuild(){this.guiWindows.inviteUserGui={},this.guiWindows.inviteUserGui.gui=null,this.guiWindows.inviteUserGui.active=!1;var e=document.createElement("div");e.id="gui_inviteUserWindow",e.classList.add("gui_inviteUserParentStyle"),this.prepPromptFader(e),document.body.appendChild(e);var t=window.location+"";console.log(t),t=t.replace(/^https?:\/\//,""),console.log(t);var i="";i+='\n      <div class="gui_inviteUserBody">\n        <div class="iu_urlStyle">'.concat(t,'</div>\n        <div id="iu_copy" class="iu_copyStyle">Copy</div>\n      </div>\n  '),e.innerHTML=i;var s=this.pxlUtils,a=document.getElementById("iu_copy");a.addEventListener("click",(()=>{var e=s.copyRoomUrl();a.innerText=e?"Copied":"Error",a.timeout&&clearTimeout(a.timeout),a.timeout=setTimeout((()=>{a.innerText="Copy",clearTimeout(a.timeout);}),2e3);})),this.guiWindows.inviteUserGui.gui=e;}inviteUserPosition(){if(this.guiWindows.inviteUserGui&&this.guiWindows.inviteUserGui.active){var e=document.getElementById("ft3Button").getBoundingClientRect();this.guiWindows.inviteUserGui.gui.style.display="grid",this.guiWindows.inviteUserGui.gui.style.top=e.y,this.guiWindows.inviteUserGui.gui.style.right=this.pxlDevice.sW-e.x+5,this.guiWindows.inviteUserGui.gui.style.minHeight=e.height;}}toggleInviteUser(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.guiWindows.inviteUserGui||this.inviteUserBuild(),e=null==e?!this.guiWindows.inviteUserGui.active:e,this.guiWindows.inviteUserGui.active=e,this.promptFader(this.guiWindows.inviteUserGui.gui,e),this.inviteUserPosition();}buildMobileWelcome(){this.guiWindows.mobileGui={},this.guiWindows.mobileGui.gui=null,this.guiWindows.mobileGui.active=!1;var e=document.createElement("div");e.id="gui_mobileWelcomeGuiWindow",e.classList.add("gui_helpGuiParentStyle"),this.prepPromptFader(e),this.guiWindowBG.appendChild(e);var t="";t+='\n    <div id="gui_helpContent" class="gui_contentStyle" style="min-height:45%;">\n  <div class="gui_mobileBody">\n    welcome to\n          <br>'.concat(this.projectTitle,'\n  </div>\n  <div id="guiHelpFooter" class="gui_footer" style="margin-bottom: 4vh;">\n    <div class="guiButton" style="font-weight: 700; font-size: 5vw;" id="guiMobileWelcomeButton">enter</div>\n  </div>\n  <div class="gui_spacer"></div>\n    </div>\n  '),e.innerHTML=t;var i=this;document.getElementById("guiMobileWelcomeButton").onclick=e=>{i.toggleMobileWelcome(!1),i.pxlEnv.postHelpIntro();},this.guiWindows.mobileGui.gui=e;}toggleMobileWelcome(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.guiWindows.mobileGui||this.buildMobileWelcome(),e=null==e?!this.guiWindows.mobileGui.active:e,this.guiWindows.mobileGui.active=e,this.promptFader(this.guiWindows.mobileGui.gui,e),this.toggleGuiWindowContainer(null,e),this.hudBlock.active&&this.toggleHudBlock(e);}ctaBuildPopup(){this.ctaContentLoading||(this.googleDocHTML?this.ctaDisplayPopup():(this.ctaContentLoading=!0,this.pxlFile.getURLContent(this.ctaLocalDocURL.blmSupport).then((e=>{this.ctaContentLoading=!1,this.googleDocHTML=e,this.ctaDisplayPopup();}))));}ctaDisplayPopup(){this.actionPopUp&&this.actionPopUp.parentNode.removeChild(this.actionPopUp);var e=this.googleDocHTML;this.actionPopUp=document.createElement("div"),this.actionPopUp.setAttribute("id","ctaPopup"),this.actionPopUp.classList.add("parentGoogleLinkDoc"),this.actionPopUp.classList.add("fader"),this.actionPopUp.classList.add("visOff");var t=document.createElement("div");t.setAttribute("id","ctaPopupInner"),this.actionPopUp.appendChild(t),document.body.appendChild(this.actionPopUp);var i=null;""!=e&&e?(t.innerHTML=e,t.classList.add("iframeGoogleLinkDoc")):((i=document.createElement("iframe")).src="",i.classList.add("iframeGoogleLinkDoc"),t.appendChild(i),i.referrerpolicy="unsafe-url");var s=this;this.actionPopUp.onclick=function(e){"ctaPopup"==e.srcElement.getAttribute("id")&&(s.promptFader(this,!1,null,!0),s.actionPopUp=null);},i?i.onload=function(){setTimeout((()=>{this.promptFader(this.actionPopUp,!0,null,!1);}),100);}:setTimeout((()=>{this.promptFader(this.actionPopUp,!0,null,!1);}),100);}getUserControls(e){if(!e)return [null];var t=e,i=t.userStatusGui,s=t.audio,a=t.audioMuted,r=t.userSoundGui;return {curAvatar:t,curName:t.displayName,curAudio:s,curAudioMuted:a,curGui:i,curNameGui:t.userNameGui,curAudioGui:r,curVerse:t.verse}}setUserControlPosition(){var e=this;return GUIBase_asyncToGenerator((function*(){if(e.userControlBlock){var t=0;if(e.hudTopBar){var i=e.hudTopBar.getBoundingClientRect();t=i.y+i.height;}e.userControlBlock.gui.style.top=t+"px";}}))()}buildUserSpeaker(){var e={},t=this.userControlBlock.speakerIcon.svg.cloneNode(!0);t.classList.add("userControlSpeakerStyle"),t.classList.add("userControlSpeakerButtonStyle"),e.gui=t,e.remoteMuted=!1,e.volPrev=0;for(var i=t.children,s=0;s<i.length;++s){var a=i[s],r=a.getAttribute("id");e[r]=a,"mute"==r?a.classList.add("userControlVisStyle"):"button"==r&&a.classList.add("userControlSpeakerButtonStyle");}for(var n=e.volLines.children,o=0;o<n.length;++o){var l=n[o];e[l.getAttribute("id")]=l;}n=e.remoteMutedLines.children;for(var h=0;h<n.length;++h){var d=n[h];e[d.getAttribute("id")]=d;}return e}addUserControls(e){var t=this;return GUIBase_asyncToGenerator((function*(){var{curAvatar:i,curName:s,curGui:a}=t.getUserControls(e),r=document.createElement("div");r.classList.add("userControlProximityOff"),r.classList.add("userControlParentStyle"),r.classList.add("userControlSpeakerButtonStyle"),t.mobile&&(r.style.display="none");var n=t;r.onclick=()=>{n.setUserControlMute(e);},i.userStatusGui=r,t.userControlBlock.gui.appendChild(r);var o=document.createElement("div");o.classList.add("userControlInnerParentStyle"),r.appendChild(o);var l=document.createElement("div");l.classList.add("userControlSpeakerParentStyle");var h=t.buildUserSpeaker();l.appendChild(h.gui),i.userSoundGui=h,o.appendChild(l);var d=document.createElement("div");d.classList.add("userControlNameStyle"),d.innerText=s,i.userNameGui=d,o.appendChild(d),t.setUserControlColor(e);}))()}setUserControlVolume(e,t){var i=arguments,s=this;return GUIBase_asyncToGenerator((function*(){var a=!(i.length>2&&void 0!==i[2])||i[2];if(s.userControlBlock.activeList.includes(e)){var{curAudioGui:r,curAudioMuted:n}=s.getUserControls(e);!r||n&&0!=t||(r.remoteMuted?t=0:a&&t>0&&(t*=2,t=Math.min(1,Math.max(t,.5*(t+r.volPrev)))),r.volPrev=t,r.volLines.style.opacity=t,r.volLines.style.filter="alpha(opacity="+100*t+")");}}))()}setUserControlMute(e){var t=this;return GUIBase_asyncToGenerator((function*(){var{curAvatar:i,curAudio:s,curAudioMuted:a,curAudioGui:r}=t.getUserControls(e);if(s){var n=!a;n?(t.setUserControlVolume(e,0,!1),r.mute.classList.add("userControlVisible"),s.volume=0,s.muted=!0):(r.mute.classList.remove("userControlVisible"),s.muted=!1,s.volume=1),i.audioMuted=n;}}))()}setUserControlRemoteMute(e){var t=arguments,i=this;return GUIBase_asyncToGenerator((function*(){var s=t.length>1&&void 0!==t[1]?t[1]:null,a=!(t.length>2&&void 0!==t[2])||t[2],r=t.length>3&&void 0!==t[3]?t[3]:"#ffffff",{curAudio:n,curAudioGui:o}=i.getUserControls(e);if(o){null==s&&(s=!!n&&n.muted);var l="object"==typeof s?s.muted:s;o.remoteMuted=l,o.base.setAttribute("fill",l?"#ff0000":r),o.remoteMutedLines.style.display=l||!a?"inline-block":"none",o.remoteS1.setAttribute("stroke",a?"#ff0000":r),o.remoteS2.setAttribute("stroke",a?"#ff0000":r),i.setUserControlVolume(e,0,!1);}}))()}setUserControlVis(e){var t=arguments,i=this;return GUIBase_asyncToGenerator((function*(){var s=t.length>1&&void 0!==t[1]?t[1]:null,{curAvatar:a,curGui:r,curAudio:n}=i.getUserControls(e);if(r){var o="userControlProximityOff";if(null==s&&(s=!r.classList.contains(o)),s)r.classList.remove(o),r.style.maxWidth=r.children[0].getBoundingClientRect().width+"px",i.setUserControlVolume(e,0),i.userControlBlock.activeList.includes(e)||i.userControlBlock.activeList.push(e);else {r.classList.add(o),r.style.maxWidth="30px";var l=i.userControlBlock.activeList.indexOf(e);l>-1&&i.userControlBlock.activeList.splice(l,1);}i.userControlBlock.gui.style.padding=0==i.userControlBlock.activeList.length?"0px":"5px";}}))()}deleteUserControlVis(e){var t=this;return GUIBase_asyncToGenerator((function*(){var{curAvatar:i,curGui:s}=t.getUserControls(e);if(s){s.classList.add("userControlProximityOff"),s.style.maxWidth="30px";var a=t.userControlBlock.activeList.indexOf(e);a>-1&&t.userControlBlock.activeList.splice(a,1),t.userControlBlock.gui.style.padding=0==t.userControlBlock.activeList.length?"0px":"5px",s&&s.parentNode.removeChild(s);}}))()}userControlsSwap(e,t){var i=this.userControlBlock.activeList.indexOf(e);i>-1&&(this.userControlBlock.activeList.splice(i,1),this.userControlBlock.activeList.includes(t)||this.userControlBlock.activeList.push(t));}setUserControlColor(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,{curAvatar:i,curGui:s,curAudioGui:a,curVerse:r}=this.getUserControls(e),n=!0;null==t&&(t="#ffffff");s.style.color=t,a.base.setAttribute("fill",t),a.mute.setAttribute("stroke",t),a.mid.setAttribute("fill",t),a.max.setAttribute("fill",t),a.volPrev=0,a.volLines.style.opacity=0,a.volLines.style.filter="alpha(opacity=0)";var o=this;i.userStatusGui.onclick=()=>{o.setUserControlMute(e);},this.setUserControlRemoteMute(e,null,n,t);}toggleUserControls(e){if(!e)return null}}class ShaderEditor{constructor(e,t){this.active=!1,this.isEditing=!1,this.name="GLSL Editor",this.type="shaderGui",this.pxlCore=e,this.pxlEnv=e.pxlEnv,this.guiManager=t,this.parent=null,this.gui=null,this.helpGui=null,this.shaderEditorDisplay=null,this.children={},this.uniformsObj=null,this.vertObj=null,this.fragObj=null,this.currentShader=null,this.shaderSliderValues=new b.Vector3,this.editorWidthMinMax={min:30,max:70};}addSlider(e,t,i,s,a,r,n,o){"string"==typeof e&&(e=document.getElementById(e));var l=document.createElement("div");l.style.display="grid",l.style.gridAutoFlow="column",l.style.alignItems="center",l.style.gridAutoColumns="max-content auto max-content",l.innerHTML="<div class='input_sliderLabel'>"+t+" : </div>";var h=document.createElement("input");h.type="range",h.classList.add("input_sliderRange"),h.min=s,h.max=a,h.step=r,h.value=i,l.appendChild(h);var d=document.createElement("input");d.type="number",d.classList.add("gui_defaultInput"),d.classList.add("input_numberInput"),d.value=i,l.appendChild(d),d.onchange=e=>{h.value=e.target.value;},h.onchange=e=>{d.value=e.target.value,n(e.target.value,...o);},h.oninput=e=>{d.value=e.target.value,n(e.target.value,...o);},e.appendChild(l);}updateShaderTextFields(){var e,t,i,s,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;a||(a=this.pxlEnv.currentRoom==this.pxlEnv.mainRoom?this.currentShader:this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].getCurrentShader());try{e=this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].readShader(a,this.shaderSliderValues);}catch(e){return}t=i=s="Unable To Load";try{for(var r in e.uniforms.sliders={type:"v",value:this.shaderSliderValues},t=JSON.stringify(e.uniforms),i=e.vertexShader,s=e.fragmentShader,t="",e.uniforms){var n="float",o={t:"sampler2D",b:"bool",i:"int",f:"float",v:"vec",c:"vec"};if("object"==(n=typeof e.uniforms[r].value)){if(n="",!e.uniforms[r].value)continue;n="image"in e.uniforms[r].value?"sampler2D":n+"vec"+Object.keys(e.uniforms[r].value).length;}else o.hasOwnProperty(e.uniforms[r].type)&&(n="i"==e.uniforms[r].type?"i":""),o.hasOwnProperty(e.uniforms[r].type)&&(n=o[e.uniforms[r].type]);t+="uniform ".concat(n," ").concat(r,";   ");}i=i.replace(/[\t]/g,"  "),s=s.replace(/[\t]/g,"  ");}catch(e){console.log("Error Reading Shader"),console.log(e);}e&&(e.needsUpdate=!0,this.children.uniformsObj.value=t,this.children.vertObj.value=i,this.children.fragObj.value=s);}buildShaderEditor(){var e="shaderGui",t=document.createElement("div");t.id="guiShaderEditorBlock",t.classList.add("gui_shaderEditorBlockStyle"),t.style.transition="max-width .5s ease, opacity .8s, filter .8s",this.pxlEnv.pxlGuiDraws.prepPromptFader(t),this.pxlEnv.pxlGuiDraws.guiWindows[e]={},this.pxlEnv.pxlGuiDraws.guiWindows[e].gui=t,this.pxlEnv.pxlGuiDraws.guiWindows[e].active=!1,this.gui=t;var i=document.createElement("div");i.id="guiShaderHelpBlock",i.classList.add("gui_shaderHelpBlockStyle"),i.style.transition="left .3s ease, opacity .8s, filter .8s",this.pxlEnv.pxlGuiDraws.prepPromptFader(i),this.pxlEnv.pxlGuiDraws.guiWindows[e].help=i,this.helpGui=i;var s=this.pxlEnv.currentRoom,a=this.pxlEnv.roomSceneList[s].geoList,r=Object.keys(a),n="";r.forEach((e=>{if(["Mesh","Points"].includes(a[e].type)&&"ShaderMaterial"==a[e].material.type){var t=e.substring(0,1).toUpperCase()+e.substring(1,e.length);n+="<option value='geo_"+e+"'>"+t+"</option>";}}));this.pxlEnv.pxlGuiDraws.guiWindows[e].currentShader="script_fog";var o='\n    <div id="gui_shaderEditorParent" class="gui_shaderEditorParentStyle">\n      <div id="gui_shaderEditorHeaderBlock" class="gui_shaderEditorHeaderBlock">\n      <div class="gui_shaderEditorOptionBlock">\n        <div class="gui_shaderEditorTitleBlock">\n        <div id="gui_shaderEditorTitleParent" class="gui_shaderEditorTitleParentStyle">\n            <div id="gui_shaderEditorTitle" clsss="gui_shaderEditorTitleStyle">GLSL Shader Editor</div>\n            <div id="gui_shaderEditorHeaderList" clsss="gui_shaderEditorHeaderListStyle">\n              <span id="gui_shaderEditorPulldownHeader" clsss="gui_shaderEditorPulldownHeaderStyle">Edit Shader</span>\n              <select name="shaderEditor_loadShader" id="shaderEditor_loadShader" class="pickerStyle gui_shaderPickerStyle">\n                <option value="script_avatar" '.concat("",'>Avatar</option>\n                <option value="script_fog" ').concat("selected",'>Fog</option>\n                <option value="script_dArrows">Direction Arrows</option>\n                <option value="script_userScreens">User Screens</option>\n                <option value="script_warpZonePortals">Warp Zone Portals</option>\n                <option value="script_lizardking">Item; Lizard King</option>\n                <option value="script_majorTom">Item; Major Tom</option>\n                <option value="script_fractalSubstrate">Item; Fractal Substrate</option>\n                <option value="script_fractalEcho">Item; Fractal Echo Pass</option>\n                ').concat(n,'\n              </select>\n            </div>\n            <div id="gui_shaderEditorFontSize" clsss="gui_shaderEditorFontSizeStyle">\n              <span  style="font-size:.75em;margin-right:5px;">Font Size</span>\n              <span id="gui_shaderEditorFontSmaller" class="shaderEditor_settingsButton">-</span>\n              <span id="gui_shaderEditorFontLarger" class="shaderEditor_settingsButton">+</span>\n              <span class="gui_shaderEditorOptionBarSpacer"> </span>\n              <span id="gui_shaderEditorCloseButton" class="shaderEditor_settingsButton">X</span>\n            </div>\n          </div>\n        </div>\n        <div class="gui_shaderEditorHeaderLine"></div>\n        <div id="guiShaderUserSliders"></div>\n        <div class="gui_shaderEditorHeaderLine"></div>\n      </div>\n      </div>\n      \n      \n      <div id="guiShaderFieldParent" class="gui_shaderEditorFieldParentStyle">\n        <span style=\'height:12px\'>Uniforms -</span>\n        <textarea spellcheck="false" placeholder="Shader Uniforms" rows="3" id="shaderEditor_uniformInput" style="height:unset;" readonly></textarea>\n        <span style=\'height:12px\'>Vertex Shader -</span>\n        <textarea spellcheck="false" placeholder="Vertex Shader" id="shaderEditor_vertInput"></textarea>\n        <span style=\'height:12px\'>Fragment Shader -</span>\n        <textarea spellcheck="false" placeholder="Fragment Shader" id="shaderEditor_fragInput"></textarea>\n      </div>\n      <div id="shader_updateShader" class="shaderEditor_sendMessage">Update Shader</div>\n    </div>\n    '),l="<div class='gui_shaderHelpSpacerStyle'></div>";o+='\n    <div id="gui_shaderHelpBlock" class="gui_shaderHelpBlockStyle">\n      <div class="gui_shaderHelpTitle">:: Keyboard Shortcuts ::</div>\n      '.concat(l,'\n      <span><span class="gui_boldText">Ctrl + Enter</span><br> - Update Shader on Material</span>\n      <br>&nbsp;&nbsp;<span>Returns use existing indent type (Spaces or Tabs)</span>\n      ').concat(l,'\n      <span><span class="gui_boldText">Ctrl + D</span><br> - Duplicate current line</span>\n      ').concat(l,'\n      <span><span class="gui_boldText">Ctrl + K</span><br> - Comment current/selected lines</span>\n      ').concat(l,'\n      <span><span class="gui_boldText">Ctrl + Shift + K</span><br> - Uncomment current/selected lines</span>\n      ').concat(l,"\n      <span><span class=\"gui_boldText\">Ctrl + NumPad {1,2,3}</span><br> - Add selection or '.0' into float(), vec2(), vec3() </span>\n      ").concat(l,'\n      <span><span class="gui_boldText">Ctrl + {Up,Down,Left,Right}</span><br> - Searches for current selection in direction</span>\n      ').concat(l,'\n      <span><span class="gui_boldText">Y</span><br> - To opn/close the Shader Editor</span>\n      ').concat(l,"\n    </div>\n    "),t.innerHTML=o,document.body.appendChild(t);var h=document.getElementById("guiShaderUserSliders");this.parentObj=h;var d=this.shaderSliderValues,c=function sliderSetShader(e){for(var t=arguments.length,i=new Array(t>1?t-1:0),s=1;s<t;s++)i[s-1]=arguments[s];d[i[0]]=e;};this.addSlider(h,"sliders.x",0,-1,1,.01,c,["x"]),this.addSlider(h,"sliders.y",0,-5,5,.1,c,["y"]),this.addSlider(h,"sliders.z",0,-10,10,.1,c,["z"]),this.children.shaderSliders=h,this.children.shaderParentObj=document.getElementById("shaderEditor_uniformInput").parentNode,this.children.shaderEditor=document.getElementById("gui_shaderEditorParent"),this.children.headerBar=document.getElementById("gui_shaderEditorHeaderBlock"),this.children.titleParentObj=document.getElementById("gui_shaderEditorTitleParent"),this.children.titleObj=document.getElementById("gui_shaderEditorTitle"),this.children.pulldownHeaderObj=document.getElementById("gui_shaderEditorPulldownHeader"),this.children.uniformsObj=document.getElementById("shaderEditor_uniformInput"),this.children.vertObj=document.getElementById("shaderEditor_vertInput"),this.children.fragObj=document.getElementById("shaderEditor_fragInput"),this.children.updateObj=document.getElementById("shader_updateShader"),this.children.helpDiv=document.getElementById("gui_shaderHelpBlock"),this.children.shaderList=document.getElementById("gui_shaderEditorHeaderList"),this.children.shaderFieldParent=document.getElementById("guiShaderFieldParent"),this.shaderEditorDisplay=document.getElementById("shaderEditorDisplay"),this.children.shaderSelect=document.getElementById("shaderEditor_loadShader");var u=document.getElementById("gui_shaderEditorFontSize");u.style.justifySelf="end",u.style.marginTop="2px",u.style.marginRight="3px",u.style.userSelect="none",u.style.display="flex",u.style.alignItems="center";var p=this;this.children.shaderSelect.onchange=e=>{p.updateShaderTextFields(this.children.shaderSelect.value);},document.getElementById("gui_shaderEditorFontSmaller").onclick=e=>{p.shiftFontSize(-.15);},document.getElementById("gui_shaderEditorFontLarger").onclick=e=>{p.shiftFontSize(.15);},document.getElementById("gui_shaderEditorCloseButton").onclick=e=>{p.toggleShaderEditor();},this.children.updateObj.addEventListener("click",(()=>{this.isEditing=!1;var e=document.getElementById("shaderEditor_uniformInput").value,t=document.getElementById("shaderEditor_vertInput"),i=t.value,s=document.getElementById("shaderEditor_fragInput"),a=s.value,r=document.createElement("div");r.innerHTML=e,e=r.innerText,r.innerHTML=i,i=r.innerText,r.innerHTML=a,a=r.innerText,p.pxlEnv.roomSceneList[p.pxlEnv.currentRoom].setShader(e,i,a),t.blur(),s.blur(),p.guiManager.pxlNavCanvas.focus();})),this.children.vertObj.onfocus=e=>{p.focusShaderMessage(e,"vertObj");},this.children.vertObj.onkeydown=e=>{p.keyShaderMessage(e);},this.children.vertObj.onmousedown=e=>{p.mDownShaderMessage(e);},this.children.vertObj.onclick=e=>{p.clickShaderMessage(e);},this.children.vertObj.ondblclick=e=>{p.dblclickShaderMessage(e);},this.children.fragObj.onfocus=e=>{p.focusShaderMessage(e,"fragObj");},this.children.fragObj.onkeydown=e=>{p.keyShaderMessage(e);},this.children.fragObj.onmousedown=e=>{p.mDownShaderMessage(e);},this.children.fragObj.onclick=e=>{p.clickShaderMessage(e);},this.children.fragObj.ondblclick=e=>{p.dblclickShaderMessage(e);},this.mouseX=0,this.mouseY=0,this.prevSelectStart=0,this.prevSelectEnd=0;}shiftFontSize(e){var t=document.getElementById("gui_shaderEditorParent");if(t){t.hasAttribute("styleStore")||t.setAttribute("styleStore",1);var i=parseFloat(t.getAttribute("styleStore"))+e;t.setAttribute("styleStore",i),t.style.fontSize=i+"em";var s=document.getElementById("shaderEditor_uniformInput");s&&(s.style.fontSize=i+"em");var a=document.getElementById("shaderEditor_vertInput");a&&(a.style.fontSize=i+"em");var r=document.getElementById("shaderEditor_fragInput");r&&(r.style.fontSize=i+"em"),setTimeout((()=>{this.resizeShaderElements();}),130);}}updateHeaderBar(){this.isEditing?(this.children.titleParentObj.style.fontSize="2.05em",this.children.titleObj.style.fontSize="1.15em"):(this.children.titleParentObj.style.fontSize="1.3em",this.children.titleObj.style.fontSize="1em");}mDownShaderMessage(e){this.mouseX=e.x,this.mouseY=e.y;}clickShaderMessage(e){if(!this.pxlEnv.pxlGuiDraws.guiWindows.shaderGui.dcActive){var t=Math.abs(this.mouseX-e.x),i=Math.abs(this.mouseY-e.y);if(Math.max(t,i)<5){var s=e.target,a=s.selectionStart,r=s.selectionEnd;a!=r&&(this.pxlEnv.pxlGuiDraws.guiWindows.shaderGui.prevSelectStart=a,this.pxlEnv.pxlGuiDraws.guiWindows.shaderGui.prevSelectEnd=r);}}}dblclickShaderMessage(e){var t=this.pxlEnv.pxlGuiDraws.guiWindows.shaderGui.prevSelectStart,i=this.pxlEnv.pxlGuiDraws.guiWindows.shaderGui.prevSelectEnd,s=e.target,a=(s.selectionStart,s.selectionEnd,s.value.substring(t,i+20)),r=a.match(/[a-zA-Z0-9\.\_\[\]]+/);r&&!a[0].match(/\n/)&&(i=t+r[0].length),s.setSelectionRange(t,i),this.pxlEnv.pxlGuiDraws.guiWindows.shaderGui.dcActive=!0,setTimeout((()=>{this.pxlEnv.pxlGuiDraws.guiWindows.shaderGui.dcActive=!1;}),500);}keyShaderMessage(e){if(e.repeat)return !1;var t=e.key,i=e.code,s=e.shiftKey,a=e.ctrlKey,r=(e.altKey,i.includes("Numpad"));if(!("Enter"==t||"Tab"==t||"KeyD"==i&&a||"KeyK"==i&&a||r&&a||i.includes("Arrow")&&a))return !1;e.preventDefault();var n=e.target;if("NumpadAdd"==i){var o=window.getComputedStyle(n),l=parseFloat(o.fontSize)+2;return n.style.fontSize=l,!1}if("NumpadSubtract"==i){var h=window.getComputedStyle(n),d=parseFloat(h.fontSize)-2;return n.style.fontSize=d,!1}var c=n.selectionStart,u=n.selectionEnd,p=n.value;if(i.includes("Arrow")){if(c==u)return !1;var m,v,g,f=p.substring(c,u);if("ArrowUp"==i?(v=p.substring(0,c),c=v.search(/.*$/),i="ArrowLeft"):"ArrowDown"==i&&(v=p.substring(u,p.length),u=v.search(/\n/)+u,i="ArrowRight"),"ArrowLeft"==i){m=new RegExp(f+".*","gm");var x=[...(v=p.substring(0,c)).matchAll(f,"g")];if(0==x.length&&0==(x=[...p.matchAll(f,"g")]).length)return !1;g=x.pop().index;}if("ArrowRight"==i){m=new RegExp(f,"m"),v=p.substring(u,p.length);var y=m.exec(v);if(y)g=y.index+u;else {if(!(y=m.exec(p)))return !1;g=y.index;}}if(g>-1){var b=g+f.length;n.setSelectionRange(g,b);var C=n.getBoundingClientRect(),P=window.getComputedStyle(n).font,S=[p.slice(0,g),"<span id='tmpShaderPosition'>.</span>",p.slice(g)].join("");S=S.replace(/(?:\r\n|\r|\n)/g,"<br>");var w=document.createElement("div");w.style.position="fixed",w.style.width=C.width,w.style.height=C.height,w.style.overflowY="scroll",w.style.font=P,w.innerHTML=S,document.body.appendChild(w);var D=w.querySelector("#tmpShaderPosition").offsetTop-200;document.body.removeChild(w),n.scrollTo(0,D);}return !1}if("Enter"==t&&a)return this.children.updateObj.click(),n.focus(),n.setSelectionRange(c,u),!1;if(r){var E=p.substring(c,u),L=E.length>0,M=p.substr(c-1,1);M=/[\w|\d]/.test(M)&&0==E.length?" ":"";var T=p.substr(u+1,1);T=/[\w|\d]/.test(T)&&0==E.length?" ":"";var A=c+M.length;if("Numpad1"==i){var _="float(";A+=6,E=_+(E=L?E:".0")+")";}else if("Numpad2"==i){var k="vec2(";A+=5,E=k+(E=L?E:".0, .0")+")";}else if("Numpad3"==i){var R="vec3(";A+=5,E=R+(E=L?E:".0, .0, .0")+")";}return E=M+E+T,document.execCommand("insertText",!1,E),L||n.setSelectionRange(A,A),!1}var I=Math.min(c,u),U=p.substr(0,I);if("KeyK"==i){var j,G,O,B=!1;if(c!=u&&(j=U.search(/.*$/),G=u,O=p.substring(j,u),B=/\n/.test(O)),!B){var V=U.search(/[\S\w].*$/);if(-1==V){if(-1==(V=p.substring(I,p.length).search(/(?:[^\s])/)))return !1;V+=I;}var F=V,H=F,N="";if(s){if(H+=2,"//"!=p.substr(F,2))return !1;c-=2,u-=2;}else {if("//"==p.substr(F,2))return !1;N="//",c+=2,u+=2;}return n.setSelectionRange(F,H),document.execCommand("insertText",!1,N),n.setSelectionRange(c,u),!1}if(B){var W=G+p.substring(G,p.length).search(/\n./),z=p.substring(j,W),Q=s?-2:2,K=[...z.matchAll(/[\S\w].*/g)],X=[],q=c-j,Y=G-j;return K.forEach((e=>{var t=e.index;X.push(t);})),(X=X.reverse()).forEach((e=>{var t=z.substr(e,2);if(s){if("//"!=t)return;z=z.substring(0,e)+z.substring(e+2,z.length);}else {if("//"==t)return;z=z.substring(0,e)+"//"+z.substring(e,z.length);}c+=e<q?Q:0,u+=e<Y?Q:0;})),n.setSelectionRange(j,W),document.execCommand("insertText",!1,z),n.setSelectionRange(c,u),!1}return !1}var Z=U.split("\n");if("Enter"==t||"Tab"==t){var J=Z.pop();0==J.length&&(J=Z.pop());var $=J.replace(/[\S\w].*$/g,""),ee=$="Tab"==t?" "===($=0==$.length?" ":$.substr(0,1))?"  ":"\t":"\n"+$,te=c,ie=u;if("Tab"==t&&c!=u){var se=p.substring(c,u);se=se.split("\n"),ie=te+(ee=(se=s?se.map((e=>""==e?e:e.replace($,""))):se.map((e=>""==e?e:$+e))).join("\n")).length;}else ie=te+=ee.length;return document.execCommand("insertText",!1,ee),n.setSelectionRange(te,ie),!1}if("KeyD"==i&&a)if(c==u){var ae=p.split("\n");Z.pop();var re=ae[Z.length],ne=[...Z,re].join("\n").length;re="\n"+re,n.setSelectionRange(ne,ne),document.execCommand("insertText",!1,re),ne=I+re.length,n.setSelectionRange(ne,ne);}else {var oe=p.substring(c,u);n.setSelectionRange(u,u),document.execCommand("insertText",!1,oe),u+=oe.length,n.setSelectionRange(u,u);}return !1}updateShaderList(){var e=this.children.shaderSelect;if(!e)return console.log("No pulldown"),void console.log(this.gui);var t=this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].getShaderList(),i=Object.keys(t),s="",a=this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].getCurrentShader();i.forEach((e=>{var i=e==a?" selected":"";s+='<option value="'.concat(e,'" ').concat(i,">").concat(t[e],"</option>");})),e.innerHTML=s;}resize(e){this.resizeShaderElements();}resizeShaderElements(){var e=0;if(this.hudBottomBar&&(e=this.hudBottomBar.offsetHeight),this.children.headerBar&&(e+=this.children.headerBar.offsetHeight),this.gui){this.gui.style.height=this.guiManager.sH-e;var t=this.children.vertObj.getBoundingClientRect().top,i=this.children.updateObj.getBoundingClientRect().height;i+=40;var s=this.guiManager.sH-i-t;this.children.vertObj.style.maxHeight=.4*s+"px",this.children.vertObj.displayHeight=.4*s,this.children.fragObj.style.maxHeight=.6*s+"px",this.children.fragObj.displayHeight=.6*s,this.children.fieldBodyHeight=s;}}toggleShaderEditor(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.gui||this.buildShaderEditor(),this.updateShaderList(),this.updateShaderTextFields(this.children.shaderSelect.value),e=null==e?!this.active:e,this.active=e,this.guiManager.promptFader(this.gui,e),this.guiManager.promptFader(this.helpGui,e),this.pxlEnv.emit("shaderEditorVis",e),e?this.guiManager.pxlNavCanvas.addEventListener("mousedown",this.blurShaderEditor.bind(this)):this.guiManager.pxlNavCanvas.removeEventListener("mousedown",this.blurShaderEditor.bind(this)),setTimeout((()=>{this.resizeShaderElements();}),130);}blurShaderEditor(){this.isEditing=!1,document.activeElement.blur(),document.getElementById("guiShaderEditorBlock").style.maxWidth=this.editorWidthMinMax.min+"vw";var e=document.getElementById("gui_shaderHelpBlock");e&&(e.style.left="max("+this.editorWidthMinMax.min+"vw, 430px)");var t=document.getElementById("shaderEditor_loadShader");t&&(t.style.maxWidth="85px"),this.updateHeaderBar(),setTimeout((()=>{this.resizeShaderElements();}),130);}focusShaderMessage(e,t){var i;this.isEditing=!0;var s=this.children,a=s.vertObj.displayHeight,r=s.fragObj.displayHeight,n=Math.max(150,.135*this.guiManager.sH),o=s.fieldBodyHeight-n;a="vertObj"==t?o:n,r="fragObj"==t?o:n,s.vertObj.style.maxHeight=a+"px",s.fragObj.style.maxHeight=r+"px";document.getElementById("gui_shaderEditorParent");this.gui.style.maxWidth=this.editorWidthMinMax.max+"vw",null!==(i=this.children)&&void 0!==i&&i.shaderSelect&&(this.children.shaderSelect.style.maxWidth="225px");var l=document.getElementById("gui_shaderHelpBlock");l&&(l.style.left=this.editorWidthMinMax.max+"vw"),this.updateHeaderBar();}}var _=__webpack_require__(261);function Video_asyncGeneratorStep(e,t,i,s,a,r,n){try{var o=e[r](n),l=o.value;}catch(e){return void i(e)}o.done?t(l):Promise.resolve(l).then(s,a);}function Video_asyncToGenerator(e){return function(){var t=this,i=arguments;return new Promise((function(s,a){var r=e.apply(t,i);function _next(e){Video_asyncGeneratorStep(r,s,a,_next,_throw,"next",e);}function _throw(e){Video_asyncGeneratorStep(r,s,a,_next,_throw,"throw",e);}_next(void 0);}))}}var k={Utils:class Utils{constructor(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"images/assets/",t=arguments.length>1?arguments[1]:void 0;this.assetRoot=e,this.mobile=t,this.pxlTimer=null,this.verboseLoading=!1,this.texLoader=new b.ImageLoader,this.textLoaderArray=[],this.channelFormats=[b.AlphaFormat,b.RedFormat,b.RGFormat,b.RGBFormat,b.RGBAFormat,b.LuminanceFormat,b.DepthFormat];}get curMS(){return this.pxlTimer.curMS}setDependencies(pxlNav){this.pxlTimer=pxlNav.pxlTimer;}updateUrl(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";window.history.replaceState?window.history.replaceState(t,i,e):window.history.pushState(t,i,e);}copyRoomUrl(){var e=window.location,t=document.activeElement,i=document.createElement("textarea");i.value=e,document.body.appendChild(i),i.focus(),i.select();var s=!1;try{s=document.execCommand("copy")?"successful":"unsuccessful";}catch(e){}return document.body.removeChild(i),t.focus(),s}checkInt(e){return e%1==0}degToRad(e){return e*(Math.PI/180)}toHundreths(e){if(!e)return 0;if(Number.isInteger(e))return e;var t=(e+"").split(".");return parseFloat(t[0]+"."+t[1].substr(0,2))}toTenths(e){if(!e)return 0;if(Number.isInteger(e))return e;var t=(e+"").split(".");return parseFloat(t[0]+"."+t[1].substr(0,1))}getDateTime(){var e=new Date;return [(e.getFullYear()+"").padStart(2,"0")+"-"+(e.getMonth()+1+"").padStart(2,"0")+"-"+(e.getDate()+"").padStart(2,"0"),(e.getHours()+"").padStart(2,"0")+":"+(e.getMinutes()+"").padStart(2,"0")+":"+(e.getSeconds()+"").padStart(2,"0")]}cleanStrict(e){var t=document.createElement("div");t.innerHTML=e;var i=(t=t.innerText).match(/([a-zA-Z0-9])\w+/g);return i&&(t=i.join(" ")),t}cleanBasic(e){var t=document.createElement("div");t.innerHTML=e;var i=(t=t.innerText).match(/([a-zA-Z0-9\s\w-+()\[\]])+/g);return i&&(t=i.join("")),t}cleanString(e){var t=document.createElement("div");return t.innerHTML=e,t=t.innerText}randomFloat(e,t){return Math.random()*(t-e)+e}componentToHex(e){return e.toString(16).padStart(2,"0")}rgbToHex(e,t,i){return "#"+this.componentToHex(Math.min(255,Math.max(0,Math.round(e))))+this.componentToHex(Math.min(255,Math.max(0,Math.round(t))))+this.componentToHex(Math.min(255,Math.max(0,Math.round(i))))}hexToRgb(e){var t,i,s;return 3==(e="#"==e[0]?e.substr(1,6):e.substr(0,6)).length?(t=e[0]+e[0],i=e[1]+e[1],s=e[2]+e[2]):(t=e[0]+e[1],i=e[2]+e[3],s=e[4]+e[5]),[t=parseInt(t,16),i=parseInt(i,16),s=parseInt(s,16)]}stringToRgb(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s=[255,0,0];if(e){for(var a=e.length,r="",n=0;n<a;++n)r+=e[a-1-n].charCodeAt(0).toString(16);var o=r.length;if(o>6){var l=1;"tussin"==e?l=0:"fexofenadine"==e&&(l=-1);var h=Math.max(0,parseInt((o-6)/2+l));r=r.substr(h,6);}s=this.hexToRgb(r);}if(null!=t){var d=Math.max(...s),c=Math.min(...s),u=d*t;s[0]=parseInt(Math.min(255,(s[0]-c)/(d-c)*255+u)),s[1]=parseInt(Math.min(255,(s[1]-c)/(d-c)*255+u)),s[2]=parseInt(Math.min(255,(s[2]-c)/(d-c)*255+u));}return 1==i&&(s[0]=s[0]/255,s[1]=s[1]/255,s[2]=s[2]/255),s}colorTosRGB(e){return "object"==typeof e?(e.hasOwnProperty&&e.hasOwnProperty("r")&&(e.r=this.tosRGB(e.r),e.g=this.tosRGB(e.g),e.b=this.tosRGB(e.b)),e.hasOwnProperty&&e.hasOwnProperty("x")&&(e.x=this.tosRGB(e.x),e.y=this.tosRGB(e.y),e.z=this.tosRGB(e.z)),e):e}tosRGB(e){return e<=.0031308?e*=12.92:e=1.055*Math.pow(e,this.oneTwoPFour)-.055,e}colorToLinear(e){return "object"==typeof e?(e.hasOwnProperty&&e.hasOwnProperty("r")&&(e.r=this.toLinear(e.r),e.g=this.toLinear(e.g),e.b=this.toLinear(e.b)),e.hasOwnProperty&&e.hasOwnProperty("x")&&(e.x=this.toLinear(e.x),e.y=this.toLinear(e.y),e.z=this.toLinear(e.z)),e):e}toLinear(e){return e<=.04045?e*=this.twelvePNineTwoDiv:e=Math.pow((e+.055)*this.onePOFiveFiveDiv,2.4),e}gammaCorrectColor(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"2.2",i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"1.8";return "object"==typeof e?(e.hasOwnProperty&&e.hasOwnProperty("r")&&(e.r=this.gammaCorrect(e.r,t,i),e.g=this.gammaCorrect(e.g,t,i),e.b=this.gammaCorrect(e.b,t,i)),e.hasOwnProperty&&e.hasOwnProperty("x")&&(e.x=this.gammaCorrect(e.x,t,i),e.y=this.gammaCorrect(e.y,t,i),e.z=this.gammaCorrect(e.z,t,i)),e):e}gammaCorrection(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"2.2",i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"1.8",s=Math.pow(e,t);return Math.pow(s,1/i)}convertColor(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:COLOR_SHIFT.KEEP;if(t==COLOR_SHIFT.KEEP)return e;var i=e.clone();switch(t){case COLOR_SHIFT.sRGB_TO_LINEAR:i=this.colorTosRGB(i);break;case COLOR_SHIFT.LINEAR_TO_sRGB:i=this.colorToLinear(i);break;case COLOR_SHIFT.WINDOWS_TO_UNIX:i=this.gammaCorrectColor(i,"2.2","1.8");break;case COLOR_SHIFT.UNIX_TO_WINDOWS:i=this.gammaCorrectColor(i,"1.8","2.2");break;case COLOR_SHIFT.LINEAR_TO_WINDOWS:i=this.gammaCorrectColor(i,"1.0","2.2");break;case COLOR_SHIFT.WINDOWS_TO_LINEAR:i=this.gammaCorrectColor(i,"2.2","1.0");break;case COLOR_SHIFT.LINEAR_TO_UNIX:i=this.gammaCorrectColor(i,"1.0","1.8");break;case COLOR_SHIFT.UNIX_TO_LINEAR:i=this.gammaCorrectColor(i,"1.8","1.0");}return i}randomizeArray(e){for(var t=[...e],i=[];t.length>0;){var s=1==t.length?0:parseInt(21*Math.random()*t.length)%t.length;i.push(t.splice(s,1)[0]);}return i}getRandom(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1.14;return e[Math.floor(Math.random(t)*e.length)]}applyTransformList(e,t){var i=t.r;e.rotateX(i[0]),e.rotateY(i[1]),e.rotateZ(i[2]),void 0!==t.rOrder&&(e.rotation.order=t.rOrder);var s=t.t;e.position.set(s[0],s[1],s[2]);var a=t.s;e.scale.set(a[0],a[1],a[2]),e.matrixAutoUpdate=!1,e.updateMatrix();}vec2(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return new b.Vector2(e,t)}vec3(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return new b.Vector3(e,t,i)}loadTexture(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(void 0!==this.textLoaderArray[e])s=this.textLoaderArray[e];else {var s=new b.Texture;this.texLoader.load(e,(e=>{(null!=t&&(s.format=this.channelFormats[t]),s.image=e,s.needsUpdate=!0,i.length>0)&&Object.keys(i).forEach((e=>{s[e]=i[e];}));})),this.textLoaderArray[e]=s;}return s}getVideoTexture(e){var t=new b.VideoTexture(e);return t.minFilter=b.LinearFilter,t.magFilter=b.LinearFilter,t.format=b.RGBFormat,t}getCanvasTexture(e){var t=new b.CanvasTexture(e);return {texture:t,material:new b.MeshBasicMaterial({map:t})}}},FileIO,QualityController:class QualityController{constructor(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.pxlTimer=null,this.pxlCookie=null,this.pxlDevice=null,this.pxlEnv=null,this.msLog=0,this.prevMS=.001*(new Date).getTime(),this.autoQuality=!1,this.percent=1,this.verbose=e,this.screenResPerc=1,this.mBlurPercMult=t?.65:1,this.bloomPercMult=t?.65:1,this.bufferPercMult=1,this.renderTargetScale=10,this.percentSteps=[.3,.45,.85],this.fpsCounter=new b.Vector3(30,0,.001*(new Date).getTime()),this.countAtLevel=0,this.shiftRate=.01,this.moduleQualityList=[],this.qualityStep=-1,this.qualityMaxSteps=3,this.qualityStepValues=[.25,.5,.75,1],this.benchmarkStart=-1,this.benchmarkTime=-1,this.benchmarkRating=-1,this.benchmarkTimes=[9,17],this.setFromBenchmark=!0,this.benchmarkQuality=1,this.benchmarkQualityRange=[.25,1],this.settingsQualityChoice=null,this.detailLimitOverride=Object.keys(i).includes("dlimit")?i.dlimit:0,this.detailLimit=null!=this.detailLimitOverride?this.detailLimitOverride:0,this.settings={leftRight:!0,mouse:!0,graphics:2,resolution:1,fog:2,bloom:!0,motion:!1},this.settingsLow={resolution:.5,fog:0,bloom:!1,motion:!1},this.settingsMedium={resolution:.75,fog:1,bloom:!0,motion:!1},this.settingsHigh={resolution:1,fog:2,bloom:!0,motion:!1},this.settingsCustom=null;}setDependencies(pxlNav){this.pxlTimer=pxlNav.pxlTimer,this.pxlCookie=pxlNav.pxlCookie,this.pxlDevice=pxlNav.pxlDevice,this.pxlEnv=pxlNav.pxlEnv;}init(){null!=this.detailLimitOverride?this.detailLimit=this.detailLimitOverride:this.pxlCookie.hasCookie("detailLimit")&&(this.detailLimit=this.pxlCookie.parseCookie("detailLimit")),this.verbose>=P.INFO&&console.log("Graphics Limiting is set to level ",this.detailLimit),this.setFromBenchmark=!this.pxlCookie.parseDict(this.settings),this.pxlCookie.hasCookie("leftRight")&&(this.settings.leftRight=this.pxlCookie.parseCookie("leftRight")),this.pxlCookie.hasCookie("mouse")&&(this.settings.mouse=this.pxlCookie.parseCookie("mouse"));Object.keys(this.settingsHigh);if(this.pxlCookie.hasCookie("qualitySetting")){var e=this.pxlCookie.parseCookie("qualitySetting");this.settings.graphics=e,this.settingsQualityChoice=e;}}step(){this.mapFpsQualitCheck();}attachModule(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;e&&this.moduleQualityList.push(e);}startBenchmark(){this.pxlTimer.step(),this.benchmarkStart=this.pxlTimer.curMS;}endBenchmark(){this.pxlTimer.step();var e=this.pxlTimer.curMS-this.benchmarkStart;this.benchmarkTime=e,this.benchmarkRating=1-Math.min(1,Math.max(0,(e-this.benchmarkTimes[0])/(this.benchmarkTimes[1]-this.benchmarkTimes[0]))),this.benchmarkQuality=this.benchmarkRating*(this.benchmarkQualityRange[1]-this.benchmarkQualityRange[0])+this.benchmarkQualityRange[0];var t=Math.min(1,Math.max(0,this.benchmarkRating));if(t=Math.ceil(Math.max(.05,t)*this.qualityMaxSteps)-1,this.qualityStep=t,this.setFromBenchmark){this.qualityStep;this.setQualityLevel(this.qualityStep);}else {null==this.settingsQualityChoice&&(this.settingsQualityChoice=3),this.settingsCustom={},Object.keys(this.settingsHigh).forEach((e=>{this.settingsCustom[e]=this.settings[e];}));}this.setDependentSettings();}mapFpsQualitCheck(){if(this.pxlTimer.curMS-this.fpsCounter.z>1){this.fpsCounter.x=this.fpsCounter.y,this.fpsCounter.y=0,this.fpsCounter.z=this.pxlTimer.curMS;var e=1;this.fpsCounter.x<15&&(e=-1);var t=Math.min(1,Math.max(0,this.percent+this.shiftRate*e));this.autoQuality&&this.mapAutoQualityUpdate(t,!1);}this.fpsCounter.y+=1,this.pxlTimer.prevMS=this.pxlTimer.curMS;}mapAutoQualityUpdate(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=Math.min(1,Math.max(0,e));t=Math.ceil(Math.max(.05,t)*this.qualityMaxSteps)-1,this.qualityStep=t;}setGraphicsSettings(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3;if(null==e)if(0==this.qualityStep)e=this.settingsLow;else if(1==this.qualityStep)e=this.settingsMedium;else {if(2!=this.qualityStep)return;e=this.settingsHigh;}3==t&&this.checkCustomDict(),Object.keys(e).forEach((i=>{this.setComponentQuality(i,e[i]),this.settings[i]=e[i],3==t&&(this.settingsCustom[i]=e[i]);})),this.setDependentSettings(),this.colliderPrevObjHit=null,null!=t&&(this.settings.graphics=t);}reapplySettings(){Object.keys(this.settingsLow).forEach((e=>{this.setComponentQuality(e,this.settings[e],!1);})),this.setDependentSettings();}setQualityLevel(e){this.pxlDevice.mobile&&(e=1),this.setQualityCookie(e),0==e?this.setLowQuality():1==e?this.setMediumQuality():2==e?this.setHighQuality():3==e&&this.setCustomQuality();}setLowQuality(){this.settingsQualityChoice=0,this.setGraphicsSettings(this.settingsLow,0);}setMediumQuality(){this.settingsQualityChoice=1,this.setGraphicsSettings(this.settingsMedium,1);}setHighQuality(){this.settingsQualityChoice=2,this.setGraphicsSettings(this.settingsHigh,2);}setCustomQuality(){this.checkCustomDict(),this.settingsQualityChoice=3,this.setGraphicsSettings(this.settingsCustom);}checkCustomDict(){if(null==this.settingsCustom){this.settingsCustom={};var e=this.settingsHigh;this.settingsQualityChoice&&(0==this.settingsQualityChoice?e=this.settingsLow:1==this.settingsQualityChoice?e=this.settingsMedium:2==this.settingsQualityChoice&&(e=this.settingsHigh)),Object.assign(this.settingsCustom,e);}}setQualityCookie(e){this.pxlCookie.setCookie("qualitySetting",e);}setComponentQuality(e,t){var i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];switch(e){case"leftRight":case"mouse":this.settings[e]=t;break;case"resolution":this.screenResPerc=t,this.pxlDevice.resizeRenderResolution(),this.settings[e]=t,this.pxlEnv.geoList.snow&&this.pxlEnv.geoList.snow.material&&(this.pxlEnv.geoList.snow.material.uniforms.pointScale.value=this.pxlEnv.geoList.snow.pBaseScale*t);break;case"fog":this.pxlEnv.mapOverlayHeavyPass.enabled=2==t,this.pxlEnv.mapOverlayPass.enabled=1==t,this.pxlEnv.mapOverlaySlimPass.enabled=0==t,this.pxlEnv.mapBoxAAPass.enabled=2==t,this.pxlEnv.mapCrossAAPass.enabled=1==t,this.pxlEnv.portaluserScreenIntensity.x=1,this.pxlEnv.userScreenIntensity.x=.65,this.pxlEnv.userScreenIntensity.y=0,this.pxlEnv.geoList.HDRView&&(this.pxlEnv.geoList.HDRView.material.uniforms.cdMult.value=0==t?.7:.3),this.settings[e]=t;break;case"bloom":this.pxlEnv.portaluserScreenIntensity.x=t?.4:1,this.pxlEnv.mapGlowPass.enabled=t,this.pxlEnv.roomBloomPass.enabled=t,this.pxlEnv.roomGlowPass.enabled=t,this.pxlEnv.userScreenIntensity.x=t?.65:.8,this.pxlEnv.userScreenIntensity.y=t?0:.8,this.pxlEnv.geoList.HDRView&&(this.pxlEnv.geoList.HDRView.material.uniforms.cdMult.value=0==t?.7:.3),this.pxlEnv.mapMotionBlurPass.enabled=t,this.settings[e]=t;break;case"motion":this.pxlEnv.mapMotionBlurPass.enabled=t,this.settings[e]=t;}i&&this.pxlCookie.setCookie(e,t);}setDependentSettings(){var e=1,t=0,i=.6;2==this.settings.fog?(this.pxlEnv.mapMotionBlurPass.enabled=!1,this.pxlEnv.mapOverlayHeavyPass.enabled=!0,this.pxlEnv.mapOverlayPass.enabled=!1,this.pxlEnv.mapOverlaySlimPass.enabled=!1,this.pxlEnv.mapBoxAAPass.enabled=!0,this.pxlEnv.mapCrossAAPass.enabled=!1,e=.5):1==this.settings.fog?(this.pxlEnv.mapMotionBlurPass.enabled=!1,this.pxlEnv.mapOverlayHeavyPass.enabled=!1,this.pxlEnv.mapOverlayPass.enabled=!0,this.pxlEnv.mapOverlaySlimPass.enabled=!1,this.pxlEnv.mapBoxAAPass.enabled=!1,this.pxlEnv.mapCrossAAPass.enabled=!0,e=.5):(this.pxlEnv.mapMotionBlurPass.enabled=!1,this.pxlEnv.mapOverlayPass.enabled=!1,this.pxlEnv.mapOverlaySlimPass.enabled=!0,this.pxlEnv.mapBoxAAPass.enabled=!1,this.pxlEnv.mapCrossAAPass.enabled=!1,e=.4),this.settings.bloom?(this.pxlEnv.mapGlowPass.enabled=!0,this.pxlEnv.roomBloomPass.enabled=!0,this.pxlEnv.roomGlowPass.enabled=!0,this.pxlEnv.userScreenIntensity.x=.65,this.pxlEnv.userScreenIntensity.y=0,t=1,i=.25):(this.pxlEnv.mapGlowPass.enabled=!1,this.pxlEnv.roomBloomPass.enabled=!1,this.pxlEnv.roomGlowPass.enabled=!1,this.pxlEnv.engine.setRenderTarget(this.pxlEnv.mapComposerGlow.renderTarget2),this.pxlEnv.engine.clear(),this.pxlEnv.engine.setRenderTarget(this.pxlEnv.roomGlowPass.renderTarget2),this.pxlEnv.engine.clear(),this.pxlEnv.engine.setRenderTarget(null),this.pxlEnv.userScreenIntensity.x=.8,this.pxlEnv.userScreenIntensity.y=0,e=1,t=0,i=.5);var s=this.pxlEnv.geoList.Circular_Gate;s&&(s.material.uniforms.bloomBoost.value=t),this.pxlEnv.geoList.HDRView&&(this.pxlEnv.geoList.HDRView.material.uniforms.cdMult.value=this.settings.bloom?.3:.7);var a=this.pxlEnv.geoList.CirculateGateVideoSphere;a&&(a.material.color.r=i,a.material.color.g=i,a.material.color.b=i),this.pxlEnv.portaluserScreenIntensity.x=e,this.pxlEnv.pxlCamera.colliderCurObjHit=null;}},CookieManager:class CookieManager{constructor(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"pxlNav-",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"/",i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:30,s="-"==e.substring(-1)?e:e+"-";this.prepend=s,this.exp=i,this.path="path="+t,this.deleteDate="expires=Thu, 01 Jan 1970 00:00:01 GMT;",this.sub="_%_";}pullData(){}getExpiration(){var e=new Date;return e.setTime(e.getTime()+24*this.exp*60*60*1e3),"expires="+e.toGMTString()+";"}valueToString(e){var t=typeof e;return isNaN(Number(e))?"string"==t?"'"+e+"'":"boolean"==t?e?"true":"false":null==e?"null":isNaN(Number(e))?"NaN":e:e}variableToString(e){if(Array.isArray(e)){var t=e.map((e=>Array.isArray(e)?this.variableToString(e):this.valueToString(e)));return "["+t.join(",")+"]"}return this.valueToString(e)}hasCookie(e){return document.cookie.includes(this.prepend+e)}readCookie(e){if(this.hasCookie(e)){var t=new RegExp("(?="+this.prepend+e+").*?((?=;)|(?=$))","g");return document.cookie.match(t)[0].split("=")[1].replace(this.prepend,"").replace(this.sub,";")}return null}parseCookie(e){if(this.hasCookie(e)){var t=new RegExp("(?="+this.prepend+e+").*?((?=;)|(?=$))","g"),i=document.cookie.match(t)[0].split("=")[1].replace(this.prepend,"").replace(this.sub,";");return "true"==i?i=!0:"false"==i?i=!1:parseInt(i)==i?i=parseInt(i):parseFloat(i)==i&&(i=parseFloat(i)),i}return null}isEqual(e){return !!this.hasCookie(e)&&(console.log(e),this.readCookie(e)==this.variableToString(e))}evalCookie(e){if(e){if(this.hasCookie(e)){var t=new RegExp("(?="+this.prepend+e+").*?((?=;)|(?=$))","g");return console.log("Eval Cookie has been limited, responce is: "),console.log(document.cookie.match(t)[0].replace(this.prepend,"").replace(this.sub,";")),!0}return !1}var i=new RegExp("(?="+this.prepend+").*?((?=;)|(?=$))","g");return console.log("Eval Cookie has been limited, may error."),document.cookie.match(i).forEach((e=>{e.replace(this.prepend,"").replace(this.sub,";");})),!0}setCookie(e,t){(t=this.variableToString(t)).replace&&t.replace(";",this.sub),document.cookie=this.prepend+e+"="+t+";"+this.getExpiration()+this.path;}addDictionary(e){for(var t=Object.keys(e),i=0;i<t.length;++i){var s=e[t[i]];(s=this.variableToString(s)).replace&&s.replace(";",this.sub),document.cookie=this.prepend+t[i]+"="+s+";"+this.getExpiration()+this.path;}}parseDict(e){var t=Object.keys(e),i=!1;return t.forEach((t=>{this.hasCookie(t)&&(e[t]=this.parseCookie(t),i=!0);})),i}clearCookie(e){if(e)"string"==typeof e&&(e=[e]),e.forEach((e=>{document.cookie=e+"=;"+this.deleteDate+this.path;}));else {var t=new RegExp("(?="+this.prepend+").*?(?==)","g");document.cookie.match(t).forEach((e=>{document.cookie=e+"=;"+this.deleteDate+this.path;}));}}},Timer:class Timer{constructor(){this.active=!1,this.msRunner=new b.Vector2(0,0),this.msLog=0,this.fpsStats=-1;var e=.001*(new Date).getTime();this._bootMS=e,this._curMS=e,this._prevMS=e,this.videoFeeds=[],this.booted=!1;}init(){this.booted||(this.prevMS=this.curMS,this.msRunner.x=0,this.msRunner.y=0,this.step(),this.booted=!0);}get runtime(){return this._curMS-this._bootMS}get curMS(){return this._curMS}updateTime(){this._curMS=.001*(new Date).getTime();}get prevMS(){return this._prevMS}set prevMS(e){this._prevMS=e;}start(){this.play();}pause(){return this.active=!this.active,this.active}play(){return this.active=!0,this.active}stop(){return this.active=!1,this.active}toggleMSLog(){this.msLog=(this.msLog+1)%2;}step(){this.prevMS=this._curMS,this.updateTime(),-1!=this.fpsStats&&this.fpsStats.update();var e=this.curMS-this.prevMS;this.msRunner.x+=e>0?e:0,this.msRunner.y=.5*(this.msRunner.y+e);}},User:class User{constructor(){this.id=null,this.jitsiUserId=null,this.jmaActive=!1,this.jmaConnectObj=!1,this.jmaServer=!1,this.jmaRoom=!1,this.jmaUserId=null,this.jmaUserName=null,this.jmaTempUserIdActive=!1,this.pxlEnv=null,this.welcome=!1,this.tankStrafe=!1,this.invertMouse=!1,this.renderSettingsCookie="settings_renderSettings",this.controlModeCookie="settings_controlMode",this.tankStrageCookie="settings_tankStrage",this.invertMouseCookie="settings_invertMouse",this.rootUserCookie="data_userEnlil",this.adminUserCookie="data_userNanna",this.localUserMoved=!1,this.localUserTurned=!1,this.itemRunTime=60,this.itemGroupList=[],this.itemList={},this.itemListNames=[],this.itemBaseList=[],this.itemActiveList=[],this.itemInactiveCmd=[],this.itemActiveTimer=[],this.itemRotateRate=.65,this.itemBaseRotateRate=.1,this.itemBobRate=.35,this.itemBobMag=0,this.mPick=[],this.activeEffects={},this.lowGrav=0,this.lKing=0,this.lKingInactive=[.025,.018],this.lKingActive=[.35,.25],this.lKingWarp=0,this.lKingPass=null,this.sField=0,this.sFieldWarp=0,this.sFieldPass=null,this.iZoom=0,this.iZoomWarp=0,this.iZoomPass=null;}checkItemWearOff(e){if(this.itemActiveList.length>0&&this.itemActiveTimer[0]-e<=0)return this.itemInactiveCmd.shift()(),this.itemActiveTimer.shift(),this.itemActiveList.shift(),!0;return !1}checkItemPickUp(e){return "LowGravity"==e?0==this.lowGrav&&(this.lowGrav=1,!0):"LizardKing"==e?0==this.lKing&&(this.lKing=1,this.lKingWarp.set(...this.lKingActive),this.lKingPass.enabled=!0,!0):"StarField"==e?0==this.sField&&(this.sField=1,this.sFieldPass.enabled=!0,!0):"InfinityZoom"==e?0==this.iZoom&&(this.iZoom=1,this.iZoomPass.enabled=!0,!0):void 0}toggleTankRotate(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.tankStrafe=null==e?!this.tankStrafe:e,this.tankStrageText=this.tankStrafe?"Left/Right Rotation":"Left/Right Strafe";}toggleMouseInf(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.invertMouse=null==e?!this.invertMouse:e,this.invertMouseText=this.invertMouse?"Revert Mouse":"Invert Mouse";}toggleFpsStats(){-1==pxlTimer.fpsStats?(pxlTimer.fpsStats=new Stats,document.body.appendChild(pxlTimer.fpsStats.domElement),pxlTimer.fpsStats.update(),this.fpsDisplayText="Hide FPS Stats"):(pxlTimer.fpsStats.domElement.remove(),pxlTimer.fpsStats=-1,this.fpsDisplayText="Display FPS Stats");}},Device:class Device{constructor(e,t,i){this.projectTitle=e,this.pxlCore=t,this.pxlEnv=null,this.pxlTimer=null,this.pxlAudio=null,this.pxlUser=null,this.pxlCamera=null,this.pxlAutoCam=null,this.pxlGuiDraws=null,this.pxlQuality=null,this.allowCursorSwap=!1,this.longTouchLength=.75;var s=window.innerWidth,a=window.innerHeight;this.sW=s,this.sH=a,this.touchScreen=!1,this.x=.5*s,this.y=.5*a,this.screenRes=new b.Vector2(1/s,1/a),this.screenAspect=new b.Vector2(1,1),this.screenRatio=new b.Vector2(s/a,a/s),this.origRes=new b.Vector2(s,a),this.screenResDeltaPerc=new b.Vector2(1,1),this.mapW=1,this.mapH=1,this.gammaCorrection=new b.Vector3(1,1,1),this.lightShift=new b.Vector2(1,1),this.firefox=/Firefox/i.test(navigator.userAgent),this.mobile=i,this.button=0,this.inputActive=!1,this.startPos=[0,0],this.endPos=[0,0],this.dragCount=0,this.dragTotal=0,this.latched=!1,this.windowHidden=!1,this.mouseX=s/2,this.mouseY=a/2,this.keyDownCount=[0,0,0],this.directionKeyDown=!1,this.directionKeysPressed=[0,0,0,0],this.shiftBoost=1,this.controlKey=!1,this.objectPercList=[],this.objectPercFuncList={},this.objectPerc={active:!1,object:null,left:0,top:0,width:0,height:0,startX:0,startY:0,offsetX:0,offsetY:0,percX:0,percY:0,offsetPercX:0,offsetPercY:0},this.canCursorLock="pointerLockElement"in document||"mozPointerLockElement"in document||"webkitPointerLockElement"in document,this.cursorLockActive=!1,this.cursorRightButtonLockActive=!1,this.gyroGravity=[0,0,0],this.touchMouseData={active:!1,lock:!1,mode:0,updated:0,button:0,dragCount:0,dragTotal:0,startPos:null,moveMult:new b.Vector2(1,1),velocityEase:new b.Vector2(0,0),velocityEasePrev:null,velocity:new b.Vector2(0,0),mBlurVelInf:new b.Vector2(2*this.screenRes.x,2*this.screenRes.y),prevDeltaPos:[0,0,0],endPos:null,latchMatrix:null,netDistance:new b.Vector2(0,0),netDistYPerc:0,curDistance:new b.Vector2(0,0),curFadeOut:new b.Vector2(0,0),curStepDistance:new b.Vector2(0,0),initialQuat:new b.Quaternion,releaseTime:0},this.subscriptableEvents=["keydown","keyup","resize"],this.callbackList={},this.init();}setDependencies(pxlNav){this.pxlEnv=pxlNav.pxlEnv,this.pxlTimer=pxlNav.pxlTimer,this.pxlAudio=pxlNav.pxlAudio,this.pxlUser=pxlNav.pxlUser,this.pxlCamera=pxlNav.pxlCamera,this.pxlAutoCam=pxlNav.pxlAutoCam,this.pxlGuiDraws=pxlNav.pxlGuiDraws,this.pxlQuality=pxlNav.pxlQuality;}init(){this.setGammaCorrection();var e=this;document.addEventListener("mousedown",(t=>{e.onmousedown(e,t);}),!1),document.addEventListener("mousemove",(t=>{e.onmousemove(e,t);}),!1),document.addEventListener("mouseup",(t=>{e.onmouseup(e,t);}),!1),document.addEventListener("contextmenu",(t=>{e.oncontextmenu(t);}),!1),window.addEventListener("resize",(t=>{e.resizeRenderResolution();}),!1),document.addEventListener("touchstart",(function(t){e.touchstart(e,t);}),{passive:!0}),document.addEventListener("touchmove",(function(t){e.touchmove(e,t);}),{passive:!0}),document.addEventListener("touchend",(function(t){e.touchend(e,t);}),{passive:!0}),document.onkeydown=t=>{e.onkeydown(e,t);},document.onkeyup=t=>{e.onkeyup(e,t);};var t=this;document.addEventListener("visibilitychange",(function(e){t.windowHidden=document.hidden,t.directionKeysPressed=[0,0,0,0],t.directionKeyDown=!1,t.shiftBoost=1,t.pxlCamera.workerFunc("focus",!document.hidden),t.runHiddenCalcs();})),"object"==typeof window.onblur&&(window.onblur=e=>{t.resetUserInput(e);}),window.addEventListener("beforeunload",(e=>{if(1==t.controlKey)return e.preventDefault(),e.returnValue="Close tab?",t.controlKey=!1,t.mapLockCursor(!1,0),"Close tab?"}));}setGammaCorrection(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(null!=e)return this.gammaCorrection.x=1/e,this.gammaCorrection.y=e,void(this.gammaCorrection.z=e);var t=1.5,i=1.1,s=1.2,a=.5;if(window&&window.navigator&&window.navigator.userAgent){var r=window.navigator.userAgent.match(/(windows|win32|win64|wince)/i);if(r&&r.length>0)t=2.2,i=.95,s=1,a=0;else {var n=window.navigator.userAgent.match(/(macintosh|macintel|macppc|mac68k|iphone|ipad|ipod)/i);n&&n.length>0?(t=1.8,i=.9,s=.97,a=.1):(t=1.8,i=.7,s=.96,a=.1);}}this.gammaCorrection.x=1/t,this.gammaCorrection.y=s,this.gammaCorrection.z=a,this.lightShift.x=i;}runHiddenCalcs(){this.windowHidden&&setTimeout((()=>{this.runHiddenCalcs();}),100);}resetUserInput(e){this.directionKeysPressed=[0,0,0,0],this.directionKeyDown=!1,this.shiftBoost=1,this.mapLockCursor(!1,0),this.pxlCamera.camJumpKey(!1),this.pxlCamera.deviceKey("space",!1),this.touchMouseData.active&&(this.touchScreen?this.endTouch(e):this.mapOnUp(e));}onmousemove(e,t){e.mapOnMove(t);}onmousedown(e,t){e.mapOnDown(t);}onmouseup(e,t){e.mapOnUp(t);}oncontextmenu(e){return e.preventDefault(),!1}touchstart(e,t){e.startTouch(t);}touchmove(e,t){e.doTouch(t);}touchend(e,t){e.endTouch(t);}onkeydown(e,t){e.keyDownCall(t);}onkeyup(e,t){e.keyUpCall(t);}get active(){return this.inputActive}set active(e){this.inputActive=!!e;}preventDefault(e){(e=e||window.event).preventDefault(e)&&e.preventDefault(e)(),e.returnValue=!1;}setCursor(e){if(this.allowCursorSwap){if("activeLatch"==e)this.touchMouseData.button;document.body.style.cursor=e;}}getMouseXY(e){if(this.mobile)try{touch=e.touches[0],this.mouseX=touch.pageX,this.mouseY=touch.pageY;}catch(e){}else {var t=this.pxlQuality.settings.mouse?-1:1;this.cursorLockActive?(this.mouseX+=(e.movementX||e.mozMovementX||e.webkitMovementX||0)*t,this.mouseY+=(e.movementY||e.mozMovementY||e.webkitMovementY||0)*t):(this.mouseX=e.clientX,this.mouseY=e.clientY);}}mapLockCursor(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1?arguments[1]:void 0;this.canCursorLock&&!this.mobile&&(2==t?(!e&&this.cursorRightButtonLockActive?this.cursorRightButtonLockActive=!1:e||this.cursorRightButtonLockActive||(this.cursorRightButtonLockActive=!0),e=e||this.cursorRightButtonLockActive):e||(this.cursorRightButtonLockActive=e),1==e?(this.pxlGuiDraws.pxlNavCanvas.focus(),this.pxlGuiDraws.pxlNavCanvas.requestPointerLock().catch((e=>{}))):document.pointerLockElement&&document.exitPointerLock(),this.cursorLockActive=e);}mapOnDown(e){var t=e.target;t.getAttribute&&t.getAttribute("id")==this.pxlCore&&this.pxlTimer.active&&(this.pxlGuiDraws.chatMessageInput&&this.pxlGuiDraws.chatMessageInput.blur(),this.pxlGuiDraws.pxlNavCanvas.focus(),this.preventDefault(e),this.touchMouseData.button=e.which,this.touchMouseData.active=!0,this.touchMouseData.mode=this.touchMouseData.button,this.touchMouseData.startPos=new b.Vector2(this.mouseX,this.mouseY),this.touchMouseData.endPos=new b.Vector2(this.mouseX,this.mouseY),this.touchMouseData.curDistance=new b.Vector2(0,0),this.touchMouseData.curStepDistance=new b.Vector2(0,0),this.touchMouseData.dragCount=0,this.pxlAutoCam.touchBlender=!1,this.setCursor("grabbing"),this.mapLockCursor(!0,e.button));}mapOnMove(e){var t=e.target;if(t.getAttribute&&t.getAttribute("id")==this.pxlCore&&this.pxlTimer.active||this.cursorLockActive)if(this.preventDefault(e),this.getMouseXY(e),(this.touchMouseData.active||this.cursorLockActive)&&this.touchMouseData.startPos){this.touchMouseData.dragCount++;var i=this.touchMouseData.endPos.clone();this.touchMouseData.endPos=new b.Vector2(this.mouseX,this.mouseY),this.touchMouseData.curDistance=this.touchMouseData.startPos.clone().sub(this.touchMouseData.endPos),this.touchMouseData.curStepDistance=this.touchMouseData.endPos.clone().sub(i),this.touchMouseData.netDistance.add(this.touchMouseData.curStepDistance.clone());this.touchMouseData.velocity.clone();this.touchMouseData.velocity=this.touchMouseData.velocity.clone().multiplyScalar(3).add(this.touchMouseData.curStepDistance).multiplyScalar(.25),this.touchMouseData.netDistYPerc=8e-4*(this.touchMouseData.netDistance.y+this.touchMouseData.curDistance.y+250),this.touchMouseData.curFadeOut.add(i.sub(this.touchMouseData.endPos));}else this.pxlEnv.hoverUserDetect();}mapOnUp(e){var t=e.target;if(this.pxlAudio.djVolumeParentObj&&(this.pxlAudio.djVolumeParentObj.down=!1),t.getAttribute&&t.getAttribute("id")==this.pxlCore){if(this.pxlGuiDraws.checkFocus(t.getAttribute("id"),!0),!this.mobile)return this.preventDefault(e),this.touchMouseData.dragCount++,this.touchMouseData.dragTotal+=this.touchMouseData.dragCount,this.touchMouseData.active=!1,this.touchMouseData.releaseTime=this.pxlTimer.curMS,this.pxlAutoCam.touchBlender=!0,this.pxlAutoCam.setNextTrigger(),this.touchMouseData.dragCount<9&&this.pxlEnv.clickUserDetect(),this.touchMouseData.endPos=new b.Vector2(this.mouseX,this.mouseY),this.touchMouseData.netDistYPerc=(this.touchMouseData.netDistance.y+250)/1250,this.setCursor("grab"),this.mapLockCursor(!1,e.button),e.preventDefault(),!1;this.pxlAutoCam.getNextPath(!1,1);}}startTouch(e){var t=e.target;if(t.getAttribute&&t.getAttribute("id")==this.pxlCore&&this.pxlTimer.active){this.touchScreen=!0;var i=e.touches[0];this.mouseX=i.pageX,this.mouseY=i.pageY,this.touchMouseData.active=!0,this.touchMouseData.mode=this.touchMouseData.button,this.touchMouseData.startPos=new b.Vector2(this.mouseX,this.mouseY),this.touchMouseData.endPos=new b.Vector2(this.mouseX,this.mouseY),this.touchMouseData.curDistance=new b.Vector2(0,0),this.touchMouseData.curStepDistance=new b.Vector2(0,0),this.touchMouseData.dragCount=0,this.pxlAutoCam.touchBlender=!1,this.touchMouseData.releaseTime=this.pxlTimer.curMS;var s=t.getAttribute("id");if(this.objectPercList.includes(s)){"djPlayerVolume"==s&&(s=(t=this.pxlAudio.djVolumeParentObj).getAttribute("id"));var a=t.getBoundingClientRect();this.objectPerc.active=!0,this.objectPerc.object=t,this.objectPerc.left=a.left,this.objectPerc.top=a.top,this.objectPerc.width=a.width,this.objectPerc.height=a.height,this.objectPerc.startX=this.mouseX-a.left,this.objectPerc.startY=this.mouseY-a.top,this.objectPerc.percX=(this.mouseX-this.objectPerc.left)/this.objectPerc.width,this.objectPerc.percY=(this.mouseY-this.objectPerc.top)/this.objectPerc.height,this.objectPerc.offsetX=0,this.objectPerc.offsetY=0,this.objectPerc.offsetPercX=0,this.objectPerc.offsetPercY=0,this.objectPercFuncList[s]&&this.objectPercFuncList[s](e);}}}doTouch(e){if(this.touchMouseData.active){e.target;var t=e.touches[0];if(this.mouseX=t.pageX,this.mouseY=t.pageY,this.touchMouseData.active){if(this.touchMouseData.dragCount++,void 0!==e.touches[1]){e.touches[1];return void(e.touches.length>1&&this.touchMouseData.dragCount>10&&(this.touchMouseData.lock=!0,t=e.touches[1],this.pxlEnv.setFogHue([this.mouseX,this.mouseY],[t.pageX,t.pageY])))}var i=this.touchMouseData.endPos.clone();this.touchMouseData.endPos=new b.Vector2(this.mouseX,this.mouseY),this.touchMouseData.curDistance=this.touchMouseData.startPos.clone().sub(this.touchMouseData.endPos),this.touchMouseData.curStepDistance=this.touchMouseData.endPos.clone().sub(i),this.touchMouseData.netDistance.add(this.touchMouseData.curStepDistance.clone()),this.touchMouseData.velocity.add(this.touchMouseData.curStepDistance).multiplyScalar(.5),this.touchMouseData.velocityEase.add(this.touchMouseData.curStepDistance).multiplyScalar(.5),this.touchMouseData.netDistYPerc=(this.touchMouseData.netDistance.y+this.touchMouseData.curDistance.y+250)/1250,this.touchMouseData.curFadeOut.add(i.sub(this.touchMouseData.endPos));}this.objectPerc.active&&(this.objectPerc.percX=(this.mouseX-this.objectPerc.left)/this.objectPerc.width,this.objectPerc.percY=(this.mouseY-this.objectPerc.top)/this.objectPerc.height,this.objectPerc.offsetX=this.mouseX-this.objectPerc.startX,this.objectPerc.offsetY=this.mouseY-this.objectPerc.startY,this.objectPerc.offsetPercX=this.objectPerc.offsetX/this.objectPerc.width,this.objectPerc.offsetPercY=this.objectPerc.offsetY/this.objectPerc.height);}}endTouch(e){if(this.touchMouseData.active)if(this.touchScreen=!1,this.touchMouseData.dragCount++,this.touchMouseData.dragTotal+=this.touchMouseData.dragCount,this.touchMouseData.active=!1,this.touchMouseData.endPos=new b.Vector2(this.mouseX,this.mouseY),this.touchMouseData.netDistYPerc=(this.touchMouseData.netDistance.y+250)/1250,this.touchMouseData.curDistance.multiplyScalar(0),this.touchMouseData.curStepDistance.multiplyScalar(0),this.touchMouseData.releaseTime=this.pxlTimer.curMS,this.touchMouseData.lock)this.touchMouseData.lock=!1;else {this.pxlAutoCam.touchBlender=!0,this.pxlAutoCam.setNextTrigger();var t=e.target;this.touchMouseData.dragCount<10&&t.getAttribute&&t.getAttribute("id")==this.pxlCore&&this.pxlAutoCam.getNextPath(!1,0),this.objectPerc.active=!1,this.pxlAudio.djVolumeParentObj&&(this.pxlAudio.djVolumeParentObj.down=!1);}}keyDownCall(e){var t=this;return _asyncToGenerator((function*(){if(t.emit("keydown",e),e.ctrlKey&&(t.controlKey=!0),null==document.activeElement.type&&t.pxlTimer.active){if(e.repeat)return;var i=e.keyCode||e.which;37!=i&&65!=i||(t.directionKeyDown=!0,t.keyDownCount[0]=t.pxlQuality.fpsCounter.z,t.directionKeysPressed[0]=1,t.pxlCamera.deviceKey(0,!0)),e.ctrlKey&&87==i&&1==t.directionKeysPressed[1]&&e.this.preventDefault(e)(),38!=i&&87!=i||(t.directionKeyDown=!0,t.keyDownCount[1]=t.pxlQuality.fpsCounter.z,t.directionKeysPressed[1]=1,t.pxlCamera.deviceKey(1,!0)),39!=i&&68!=i||(t.directionKeyDown=!0,t.keyDownCount[0]=t.pxlQuality.fpsCounter.z,t.directionKeysPressed[2]=1,t.pxlCamera.deviceKey(2,!0)),40!=i&&83!=i||(t.directionKeyDown=!0,t.keyDownCount[1]=t.pxlQuality.fpsCounter.z,t.directionKeysPressed[3]=1,t.pxlCamera.deviceKey(3,!0)),16!=i&&224!=i||(t.shiftBoost=7,t.pxlCamera.deviceKey("shift",!0)),32==i&&(t.pxlCamera.camJumpKey(!0),t.pxlCamera.deviceKey("space",!0));}}))()}keyUpCall(e){var t=this;return _asyncToGenerator((function*(){if(t.emit("keyup",e),e.ctrlKey)return t.controlKey=!1,e.preventDefault(),!1;if(null==document.activeElement.type){var i=e.keyCode||e.which,s=e.code||e.which;if(!e.isTrusted)return !1;if(e.ctrlKey||e.altKey||e.code.includes("F"))return e.preventDefault(),!1;if("Backquote"==s)return void t.pxlGuiDraws.guiToggleVisibility();if(89==i&&t.pxlGuiDraws.toggleShaderEditor(),220==i){console.log("Saving screenshot");var a=t.pxlQuality.screenResPerc;t.pxlQuality.screenResPerc=1,t.pxlEnv.mapRender(!1);for(var r=t.pxlGuiDraws.pxlNavCanvas.toDataURL("image/png"),n=atob(r.split(",")[1]),o=n.length,l=new Uint8Array(o),h=0;h<o;++h)l[h]=n.charCodeAt(h);var d=URL.createObjectURL(new Blob([l])),c=new Date,u=c.getDate(),p=c.getMonth()+1,m=c.getFullYear()+"-"+p+"-"+u+"_"+c.getHours()+"-"+c.getMinutes()+"-"+c.getSeconds(),v=document.createElement("a");return v.download=t.projectTitle+"_"+m+".png",v.href=d,document.body.appendChild(v),v.click(),v.parentNode.removeChild(v),t.pxlQuality.screenResPerc=a,void t.pxlEnv.mapRender(!1)}if(t.pxlTimer.active){if(37!=i&&65!=i||(t.directionKeysPressed[0]=0,t.pxlCamera.deviceKey(0,!1)),38!=i&&87!=i||(t.directionKeysPressed[1]=0,t.pxlAutoCam.active&&t.pxlAutoCam.step(!0),t.pxlCamera.deviceKey(1,!1)),39!=i&&68!=i||(t.directionKeysPressed[2]=0,t.pxlCamera.deviceKey(2,!1)),40!=i&&83!=i||(t.directionKeysPressed[3]=0,t.pxlAutoCam.active&&t.pxlAutoCam.setRoom(!0),t.pxlCamera.deviceKey(3,!1)),t.directionKeysPressed.includes(1)||(t.directionKeyDown=!1),16==i||224==i)return t.shiftBoost=1,void t.pxlCamera.deviceKey("shift",!1);if(32==i)return t.pxlCamera.camJumpKey(!1),void t.pxlCamera.deviceKey("space",!1);if(!t.directionKeyDown){if(49==i||97==i)return void t.pxlCamera.fastTravel(0);if(50==i||98==i)return void t.pxlCamera.fastTravel(1);if(51==i||99==i)return void t.pxlCamera.fastTravel(2);if(52==i||100==i)return void t.pxlCamera.fastTravel(3);if(53==i||101==i)return void t.pxlAutoCam.preAutoCamToggle()}var g;if(221==i)return void((null===(g=t.pxlUser)||void 0===g||null===(g=g.itemInactiveCmd)||void 0===g?void 0:g.length)>0&&console.log(t.pxlUser.itemInactiveCmd.pop()))}if(27==i||13==i&&!e.ctrlKey)return t.pxlGuiDraws.toggleHudBlock(!1,!0),void t.pxlGuiDraws.toggleGuiWindowContainer(!1,!1,!0);if(e.altKey||e.ctrlKey||e.shiftKey)return;if(73==i)return void t.pxlGuiDraws.iconEvent("click",t.pxlGuiDraws.hudIcons.infoIcon,"info");if(71==i)return void t.pxlGuiDraws.iconEvent("click",t.pxlGuiDraws.hudIcons.settingsIcon,"settings");if(66==i)return void t.pxlGuiDraws.iconEvent("click",t.pxlGuiDraws.hudIcons.musicIcon,"musicToggle");if(78==i)return void t.pxlGuiDraws.iconEvent("click",t.pxlGuiDraws.hudIcons.speakerIcon,"speakerToggle");if(191==i)return void t.pxlGuiDraws.iconEvent("click",t.pxlGuiDraws.hudIcons.helpIcon,"help");if(80==i)return t.directionKeysPressed=[0,0,0,0],t.directionKeyDown=!1,t.pxlTimer.pause(),t.pxlTimer.active&&t.pxlEnv.mapRender(),void t.pxlCamera.workerFunc("activeToggle",t.pxlTimer.active)}}))()}resizeRenderResolution(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(e=e||window.innerWidth,t=t||window.innerHeight,this.mapW=(this.sW=e)*this.pxlQuality.screenResPerc,this.mapH=(this.sH=t)*this.pxlQuality.screenResPerc,this.screenRes.x=1/this.mapW,this.screenRes.y=1/this.mapH,this.screenRatio.x=this.sW/this.sH,this.screenRatio.y=this.sH/this.sW,this.pxlEnv.geoList.HDRView){var i=this.mapW>this.mapH?1:this.mapW/this.mapH;this.pxlEnv.geoList.HDRView.material.uniforms.ratioU.value=i;}if(this.touchMouseData.mBlurVelInf=new b.Vector2(2*this.screenRes.x,2*this.screenRes.y),this.pxlEnv.mapGlowPass){this.pxlEnv.scene.renderTarget.setSize(this.mapW*this.pxlQuality.bufferPercMult,this.mapH*this.pxlQuality.bufferPercMult),this.pxlEnv.scene.renderWorldPos.setSize(this.mapW*this.pxlQuality.bufferPercMult,this.mapH*this.pxlQuality.bufferPercMult),this.pxlEnv.mapComposer.setSize(this.mapW,this.mapH),this.pxlEnv.mapComposerGlow.setSize(this.mapW,this.mapH),this.pxlEnv.roomComposer.setSize(this.mapW,this.mapH),this.pxlEnv.roomGlowPass.setSize(this.mapW*this.pxlQuality.bloomPercMult,this.mapH*this.pxlQuality.bloomPercMult),this.pxlEnv.delayComposer.setSize(this.mapW,this.mapH),this.pxlEnv.mapGlowPass.setSize(this.mapW*this.pxlQuality.bloomPercMult,this.mapH*this.pxlQuality.bloomPercMult),this.pxlEnv.mapMotionBlurPass.setSize(this.mapW*this.pxlQuality.mBlurPercMult,this.mapH*this.pxlQuality.mBlurPercMult),this.pxlEnv.mapOverlayHeavyPass.setSize(this.mapW,this.mapH),this.pxlEnv.mapOverlayPass.setSize(this.mapW,this.mapH),this.pxlEnv.mapOverlaySlimPass.setSize(this.mapW,this.mapH),this.pxlEnv.mapOverlayHeavyPass.uniforms.ratio.value=Math.min(1,this.mapW/this.mapH),this.pxlEnv.mapOverlayPass.uniforms.ratio.value=Math.min(1,this.mapW/this.mapH),this.pxlEnv.mapOverlaySlimPass.uniforms.ratio.value=Math.min(1,this.mapW/this.mapH),this.pxlGuiDraws.pxlNavCanvas.width=this.sW,this.pxlGuiDraws.pxlNavCanvas.height=this.sH,this.pxlGuiDraws.loading=!0,this.pxlEnv.engine.setPixelRatio(window.devicePixelRatio*this.pxlQuality.screenResPerc),this.pxlEnv.engine.setSize(this.sW,this.sH);var s=this.mapW/this.mapH;this.pxlCamera.camera.aspect=s,this.pxlCamera.camera.updateProjectionMatrix();var a=[this.sW/this.sH,this.sH/this.sW],r=[1,1];r[0]=s>a[0]?1:this.sW/(this.sH*a[0]),r[1]=s>a[1]?this.sH/(this.sW*a[1]):1,r[0]>1?(r[1]*=1/r[0],r[0]=1):r[1]>1&&(r[0]*=1/r[1],r[1]=1),this.screenAspect.x=r[0]*(1/.5**.5),this.screenAspect.y=r[1],this.screenResDeltaPerc.x=this.sW/this.origRes.x,this.screenResDeltaPerc.y=this.sH/this.origRes.y,this.pxlEnv.roomSubList.Lobby&&this.pxlEnv.roomSubList.Lobby.setShaders(),this.pxlEnv.updateCompUniforms(),this.pxlEnv.roomNameList.forEach((e=>{var t;this.pxlEnv.roomSceneList[e].pxlCamAspect=s,null!==(t=this.pxlEnv.roomSceneList[e])&&void 0!==t&&t.resize&&this.pxlEnv.roomSceneList[e].resize(this.mapW,this.mapH);})),this.emit("resize",{width:this.mapW,height:this.mapH,xPixelPerc:this.screenRes.x,yPixelPerc:this.screenRes.y,aspectRatio:s}),this.pxlTimer.active||this.pxlEnv.mapRender(!1);}}subscribe(e,t){this.subscriptableEvents.includes(e)?(this.callbackList[e]||(this.callbackList[e]=[]),this.callbackList[e].push(t)):console.error("Event type not subscribable: ",e);}unsubscribe(e,t){if(this.callbackList[e]){var i=this.callbackList[e].indexOf(t);i>=0&&this.callbackList[e].splice(i,1);}}emit(e,t){this.callbackList.hasOwnProperty(e)&&this.callbackList[e].forEach((e=>{e(t);}));}},Animation:class Animation{constructor(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.pxlEnv=null,this.assetPath=e,this.verbose=!1,this.animInitEntry={rig:null,mesh:null,mixer:null,clips:{},state:null,hasConnection:!1,prevTime:-1,connected:[],connections:{}},this.objNames=[],this.objects={},this.animMixer={},this.msRunner=t,this.clock=new b.Clock;}setDependencies(e){this.pxlEnv=e;}log(e){this.verbose&&console.log(e);}initObject(e,t){for(var i=null,s=null,a=t.children.length,r=0,n=[...t.children],o=0,l=0,h=0,d=0;r<a;){var c=n[r];switch(c.type){case"Bone":++l,i=c;break;case"Mesh":++o,c.visible=!1;break;case"SkinnedMesh":++h,s=c;break;case"Group":++d,a=(n=n.concat(c.children)).length;}++r;}var u=!1;if(i||(this.log("Error, No Bone/Rig Root Found; Please move your rig to the scene's root. Grouped rigs aren't supported yet."),u=!0),s||(this.log("Error, No SkinnedMesh Found; Please ensure your rig has a mesh to animate."),u=!0),u)return console.log("Unable to prepare '"+e+"' for animation"),console.log("Group Count: "+d),console.log("Bone Root Found : "+(l>0)),console.log("Bone Count : "+l),console.log("Mesh Count: "+o),void console.log("SkinnedMesh Count: "+h);if(!this.objNames.includes(e)){this.objNames.push(e);var p=Object.assign({},this.animInitEntry);p.rig=i,p.mesh=s,this.animMixer[e]=new b.AnimationMixer(i),p.mixer=this.animMixer[e],this.objects[e]=p;var m=new b.MeshStandardMaterial;m.map=s.material.map,s.material=m;}}addClips(e,t,i){if(this.objNames.includes(e)){Object.keys(this.objects[e].clips).includes(t)&&this.log("Warning, '"+t+"' already exists in '"+e+"'");var s=this.animMixer[e].clipAction(i.animations[0]);this.objects[e].clips[t]=s;}else this.log("Error, '"+e+"' not found in Animation Manager");}hasClip(e,t){return !!this.objNames.includes(e)&&Object.keys(this.objects[e].clips).includes(t)}getMixer(e){return this.objNames.includes(e)?this.animMixer[e]:null}getRig(e){return this.objNames.includes(e)?this.objects[e].rig:null}getMesh(e){return this.objNames.includes(e)?this.objects[e].mesh:null}playClip(e,t){if(this.objNames.includes(e)&&Object.keys(this.objects[e].clips).includes(t)){var i=this.objects[e].clips[t];this.objects[e].state=t,this.objects[e].prevTime=-1,this.objects[e].hasConnection=this.objects[e].connected.includes(t),this.setWeight(e,t,1,!0),i.reset(),i.play();}}setWeight(e,t,i){var s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(this.objNames.includes(e)){var a=Object.keys(this.objects[e].clips);if(a.includes(t)){var r=this.objects[e].clips[t];r.enabled=!0,r.setEffectiveTimeScale(1),r.setEffectiveWeight(i),s&&a.forEach((i=>{if(i!=t){var s=this.objects[e].clips[i];s.enabled=!1,s.setEffectiveTimeScale(1),s.setEffectiveWeight(0);}}));}}}setStateConnections(e,t){if(this.objNames.includes(e)){var i=Object.keys(t);this.objects[e].connected=i,this.objects[e].connections=t;}}step(e){if(this.objNames.includes(e)){if(!this.objects[e].hasConnection)return void this.animMixer[e].update(this.clock.getDelta());var t=this.objects[e].state;if(t){var i=this.objects[e].clips[t].time;if(this.objects[e].prevTime>i){var s=this.objects[e].connections[t],a=s[Math.floor(Math.random()*s.length)];this.playClip(e,a);}else this.animMixer[e].update(this.clock.getDelta()),this.objects[e].prevTime=i;}else this.animMixer[e].update(this.clock.getDelta());}}destroy(e){if(this.objNames.includes(e)){this.animMixer[e].stopAllAction(),delete this.animMixer[e],delete this.objects[e];var t=this.objNames.indexOf(e);this.objNames.splice(t,1);}}},Environment:class Environment{constructor(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Default",i=arguments.length>2?arguments[2]:void 0;this.engine=null,this.scene=null,this.parentGroupList={},this.parentGroupList[t]=[],this.parentNameList=[],this.options=e,this.prevRenderMS=0,this.nextRenderMS=0,this.fps=i?30:60,this.renderInterval=1/this.fps;var s="Default";s=this.options.hasOwnProperty("pxlRoomName")?this.options.pxlRoomName:t,this.pxlRoomAbsRoot=s;var a=s.split("/");a.splice(0,1),a=a.join("/"),this.pxlRoomLclRoot=s,this.options.hasOwnProperty("pxlRoomRoot")?this.pxlRoomLclRoot=this.options.pxlRoomRoot:this.pxlRoomLclRoot="./"+s.split("/").pop(),this.mainRoom=t,this.bootRoom=t,this.bootLocation=null,this.currentRoom=t,this.roomNameList=[t],this.roomSubList={},this.roomSceneList={},this.roomSceneList[t]=this,this.roomPostGuiCalls=[],this.jmaCheckConnection=!1,this.checkContext=0,this.activeContext=!1,this.warpPortalTextures={},this.warpZoneRenderTarget=null,this.currentAudioZone=0,this.pxlUtils=null,this.pxlTimer=null,this.pxlAnim=null,this.pxlAutoCam=null,this.pxlAudio=null,this.pxlFile=null,this.pxlVideo=null,this.pxlQuality=null,this.pxlUser=null,this.pxlShaders=null,this.pxlDevice=null,this.pxlCamera=null,this.pxlGuiDraws=null,this.renderLayerEnum={SCENE:0,PARTICLES:1,GLOW:2,SKY:3},this.cloud3dTexture=null,this.softNoiseTexture=null,this.detailNoiseTexture=null,this.chroAberUVTexture=null,this.blockAnimTexture=null,this.userScreenIntensity=new b.Vector2(0,.8),this.portaluserScreenIntensity=new b.Vector2(1,0),this.portalMtlRate=.7,this.mobile=i,this.camNear=.1,this.camFar=5e3,this.fogMult=new b.Vector2(0,0),this.fogColor=new b.Color(.07,.07,.1),this.fogColorSky=new b.Color(.1,.1,.12),this.fogExp=3e-4,this.fog=new b.FogExp2(this.fogColor,this.fogExp),this.listener=null,this.posted=!1,this.postIntro=!1,this.camLocation={},this.camInitPos=new b.Vector3(0,15,0),this.camInitLookAt=new b.Vector3(0,15,0),this.camThumbPos=new b.Vector3(0,0,0),this.camThumbLookAt=new b.Vector3(0,20,0),this.camReturnPos=new b.Vector3(0,0,0),this.camReturnLookAt=new b.Vector3(0,0,0),this.camLobbyPos=new b.Vector3(0,15,0),this.camLobbyLookAt=new b.Vector3(0,15,-100),this.pxlCamFOV=i?80:60,this.pxlCamZoom=1,this.pxlCamAspect=1,this.pxlCamNearClipping=this.camNear,this.pxlCamFarClipping=this.camFar,this.groupList=[],this.geoList=[],this.geoLoadList=[],this.geoLoadListComplete=0,this.lightList=[],this.returnPortalGlowList=[],this.roomWarpVisuals={},this.proximityGeo=null,this.userAvatarGroup=new b.Group,this.warpVisualActive=!1,this.warpVisualMaxTime=[1.5,1],this.warpVisualStartTime=0,this.warpVisualFader=new b.Vector2(0,1),this.warpVisualCmd=null,this.stepShaderFuncArr=[],this.mapMotionBlurPass=null,this.mapCopyMotionBlurPass=null,this.mapOverlayHeavyPass=null,this.mapOverlayPass=null,this.mapOverlaySlimPass=null,this.mapBoxAAPass=null,this.mapCrossAAPass=null,this.mapWorldPosMaterial=null,this.mapGlowPass=null,this.mapGlowMotionBlur=null,this.mapComposer=null,this.mapComposerMotionBlur=null,this.mapComposerBloom=null,this.mapComposerGlow=null,this.chroAberrationPass=null,this.chroAberrationRoomPass=null,this.lizardKingPass=null,this.lizardKingRoomPass=null,this.mapComposerWarpPass=null,this.blurScreenMerge=null,this.pxlRenderSettings={exposure:1,mult:1,bloomStrength:.5,bloomThresh:.6,bloomRadius:.05},this.exposureShiftActive=!1,this.delayComposer=null,this.delayPass=null,this.chroAberMult=new b.Vector2(1,0),this.blurDirCur=new b.Vector2(0,0),this.blurDirPrev=new b.Vector2(0,0),this.shaderPasses={},this.roomComposer=null,this.roomRenderPass=null,this.roomBloomPass=null,this.roomGlowPass=null,this.blurComposer=null,this.glowPassMask=new b.Vector2(1,0),this.objectClickable=[],this.objectClickableObjectList={},this.clickablePrevActiveObject=null,this.promoClickable=[],this.promoClickableObjectList={},this.promoPrevActiveObject=null,this.promoClickableLinks={},this.remoteVideoTextureList=[],this.remoteUserNameList=[],this.remoteUserMediaList={},this.remoteUserVideoList=[],this.remoteUserAudioList=[],this.camScreenData={count:0,prevCount:0,checkUserCount:!0,checkVideoStatus:!0,findCamCount:()=>{},videoObjectList:[],screenGeoList:[],screenClickable:[],screenMtlUniforms:[],userDataList:[],camFindInfoList:[]},this.curUserCount=0,this.prevUserCount=0,this.emit=(e,t)=>{};}setDependencies(pxlNav){this.scene=pxlNav.scene,this.pxlUtils=pxlNav.pxlUtils,this.pxlTimer=pxlNav.pxlTimer,this.pxlAnim=pxlNav.pxlAnim,this.pxlAutoCam=pxlNav.pxlAutoCam,this.pxlAudio=pxlNav.pxlAudio,this.pxlFile=pxlNav.pxlFile,this.pxlVideo=pxlNav.pxlVideo,this.pxlQuality=pxlNav.pxlQuality,this.pxlUser=pxlNav.pxlUser,this.pxlShaders=pxlNav.pxlShaders,this.pxlDevice=pxlNav.pxlDevice,this.pxlCamera=pxlNav.pxlCamera,this.pxlGuiDraws=pxlNav.pxlGuiDraws,this.emit=pxlNav.emit.bind(pxlNav);}log(e){this.options.verbose>P.INFO&&console.log(e);}init(){var e=Object.keys(this.options);Object.keys(pxlOptions).forEach((t=>{e.includes(t)||(this.options[t]=pxlOptions[t]);})),Object.keys(this.roomSubList).forEach((e=>{this.roomSubList[e].init();}));}boot(){}setBootRoom(e,t){console.log(e,t),this.bootRoom=e,this.bootLocation=t;}postBoot(){this.pxlGuiDraws.togglePageDisplay(),this.roomSceneList[this.bootRoom].start(),this.posted=!0;}postHelpIntro(){this.pxlDevice.mobile||this.pxlAutoCam.enabled?(this.pxlCamera.colliderValid=!0,this.pxlCamera.eventCheckStatus=!0,this.pxlCamera.colliderShiftActive=!0,this.pxlCamera.nearestFloorObjName="mobile",this.pxlCamera.colliderCurObjHit="AudioTrigger_2",this.pxlCamera.proximityScaleTrigger=!0,this.exposureShiftActive=!0,this.pxlDevice.mobile||(this.pxlAudio.play(),setTimeout((()=>{this.pxlAudio.initPlay();}),100))):this.pxlCamera.jogServerMemory(),this.postIntro=!0;}start(){this.init();}step(){if(this.pxlTimer.step(),this.pxlAudio.step(),this.pxlQuality.step(),this.pxlAutoCam.step()&&this.pxlCamera.step(),this.pxlGuiDraws.step(),this.stepWarpPass(),this.pxlTimer.msRunner.x>this.checkContext&&this.activeContext){this.checkContext=this.pxlTimer.msRunner.x+1;var e=document.createElement("canvas");try{e.getContext("webgl");}catch(e){this.activeContext=!0,this.pxlGuiDraws.pxlNavCanvas.style.display="none";}}this.pxlDevice.mobile&&this.exposureShiftActive;}stop(){var e=this;return function Environment_asyncToGenerator(e){return function(){var t=this,i=arguments;return new Promise((function(s,a){var r=e.apply(t,i);function _next(e){Environment_asyncGeneratorStep(r,s,a,_next,_throw,"next",e);}function _throw(e){Environment_asyncGeneratorStep(r,s,a,_next,_throw,"throw",e);}_next(void 0);}))}}((function*(){e.setExposure(0),Object.keys(e.roomSubList).forEach((t=>{e.roomSubList[t].stop();}));}))()}loadRoom(e){return new Promise(((t,i)=>{this.log("Loading Room - ",e);var s="".concat(this.pxlRoomLclRoot,"/").concat(e,"/").concat(e,".js");import(s).then((i=>{var s=new i[e](e,"".concat(this.pxlRoomLclRoot,"/").concat(e,"/"),this.pxlFile,this.pxlAnim,this.pxlUtils,this.pxlDevice,this,this.pxlTimer.msRunner,null,null,this.cloud3dTexture);s.camera=this.pxlCamera.camera,s.scene=new b.Scene,s.userAvatarGroup||(s.userAvatarGroup=new b.Group),s.scene.add(s.userAvatarGroup);var a={format:b.RGBAFormat,antialias:!1,sortObjects:!0,alpha:!0,type:/(iPad|iPhone|iPod)/g.test(navigator.userAgent)?HalfFloatType:b.FloatType};s.scene.renderTarget=new b.WebGLRenderTarget(this.pxlDevice.sW*this.pxlQuality.screenResPerc,this.pxlDevice.sH*this.pxlQuality.screenResPerc,a),s.scene.renderTarget.texture.format=b.RGBAFormat,s.scene.renderTarget.texture.minFilter=b.LinearFilter,s.scene.renderTarget.texture.magFilter=b.LinearFilter,s.scene.renderTarget.texture.generateMipmaps=!1,s.scene.renderTarget.depthBuffer=!0,s.scene.renderTarget.depthTexture=new b.DepthTexture(this.pxlDevice.sW*this.pxlQuality.screenResPerc,this.pxlDevice.sH*this.pxlQuality.screenResPerc),s.scene.renderTarget.depthTexture.format=b.DepthFormat,s.scene.renderTarget.depthTexture.type=b.UnsignedShortType,s.cloud3dTexture=this.cloud3dTexture,this.roomNameList.includes(e)||this.roomNameList.push(e),this.roomSceneList[e]=s,t(!0);}));}))}startAllRooms(){this.roomNameList.forEach((e=>{this.startRoom(this.roomSceneList[e]);}));}startRoom(e){e.active=!1,e.startTime=this.pxlTimer.msRunner.x;}newSubRoom(e){this.roomSubList[e.roomName]=e;}addToRooms(e){var t={};return this.roomNameList.forEach((i=>{var s=e.clone();this.roomSceneList[i].scene.add(s),t[i]=s;})),t}addToRoomLayers(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,i={};return this.roomNameList.forEach((s=>{var a=e.clone();this.roomSceneList[s].scene.add(a),i[s]=a,a.layers.set(t);})),i}addToRoomParents(e,t){var i={};return this.parentNameList.includes(t)||this.parentNameList.push(t),this.roomNameList.forEach((s=>{var a=e.clone();if(this.parentGroupList[s]||(this.parentGroupList[s]={}),!this.parentGroupList[s][t]){var r=new b.Group;this.parentGroupList[s][t]=r,this.roomSceneList[s].scene.add(r);}this.parentGroupList[s][t].add(a),i[s]=a;})),i}buildRoomEnvironments(){this.log("Building Room Environments"),this.log(this.roomNameList);this.roomNameList.forEach((e=>{this.roomSceneList[e].init(),this.roomSceneList[e].build&&this.roomSceneList[e].build();}));}getArtistInfo(){return null}setFogHue(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[0,0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[1,1],i=(this.fog.color.getHSL(),[t[0]-e[0],t[1]-e[1]]),s=Math.abs(.3183098861837907*Math.atan2(i[0],i[1])),a=(i[0]**2+i[1]**2)**.5/Math.max(this.pxlDevice.sW,this.pxlDevice.sH);this.fog.color.setHSL(s,.5*a+.3,.5*a),this.roomSceneList[this.currentRoom]&&this.roomSceneList[this.currentRoom].setFog&&this.roomSceneList[this.currentRoom].setFog(this.fog.color);}readShader(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if("script_fog"==e){if(this.pxlGuiDraws.guiWindows.shaderGui.currentShader=e,1==this.mapOverlayHeavyPass.enabled)return this.mapOverlayHeavyPass.material;if(1==this.mapOverlayPass.enabled)return this.mapOverlayPass.material;if(1==this.mapOverlaySlimPass.enabled)return this.mapOverlaySlimPass.material}else {if("script_dArrows"==e)return this.pxlGuiDraws.guiWindows.shaderGui.currentShader=e,this.geoList.dArrows[0].material;if("script_userScreens"==e)return this.pxlGuiDraws.guiWindows.shaderGui.currentShader=e,this.camScreenData.screenGeoList[0].material;if("script_warpZonePortals"==e)return this.pxlGuiDraws.guiWindows.shaderGui.currentShader=e,this.returnPortalGlowList[0].material;if("script_lizardking"==e)return this.pxlGuiDraws.guiWindows.shaderGui.currentShader=e,this.lizardKingPass.material;if("script_majorTom"==e)return this.pxlGuiDraws.guiWindows.shaderGui.currentShader=e,this.pxlUser.sFieldPass.material;if("script_fractalSubstrate"==e)return this.pxlGuiDraws.guiWindows.shaderGui.currentShader=e,this.pxlUser.iZoomPass.material;if("script_fractalEcho"==e)return this.pxlGuiDraws.guiWindows.shaderGui.currentShader=e,this.delayPass.material;var t=e.split("_");if(t.shift(),t=t.join("_"),this.geoList[t])return this.pxlGuiDraws.guiWindows.shaderGui.currentShader=e,this.geoList[t].material}}setShader(e,t,i){var s,a=this.pxlGuiDraws.guiWindows.shaderGui.currentShader;if("script_fog"==a)1==this.mapOverlayHeavyPass.enabled?s=this.mapOverlayHeavyPass.material:1==this.mapOverlayPass.enabled?s=this.mapOverlayPass.material:1==this.mapOverlaySlimPass.enabled&&(s=this.mapOverlaySlimPass.material);else {if("script_dArrows"==a)return void this.geoList.dArrows.forEach((e=>{(s=e.material).vertexShader=t,s.fragmentShader=i,s.needsUpdate=!0;}));if("script_userScreens"==a)return void this.camScreenData.screenGeoList.forEach((e=>{(s=e.material).vertexShader=t,s.fragmentShader=i,s.needsUpdate=!0;}));if("script_warpZonePortals"==a)return void this.returnPortalGlowList.forEach((e=>{(s=e.material).vertexShader=t,s.fragmentShader=i,s.needsUpdate=!0;}));if("script_lizardking"==a)s=this.lizardKingPass.material;else if("script_majorTom"==a)s=this.pxlUser.sFieldPass.material;else if("script_fractalSubstrate"==a)s=this.pxlUser.iZoomPass.material;else if("script_fractalEcho"==a)s=this.delayPass.material;else {var r=a.split("_");r.shift(),r=r.join("_"),this.geoList[r]&&(s=this.geoList[r].material);}}s&&(s.vertexShader=t,s.fragmentShader=i,s.needsUpdate=!0);}getAssetTexture(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this.log("Get Internal Texture - ",e);var s=this.pxlUtils.assetRoot+e;if(!t){var a=e.split(".").pop().toLowerCase();"jpg"==a||"jpeg"==a?t=3:"png"==a&&(t=4);}return i||(i={encoding:b.LinearSRGBColorSpace,magFilter:b.LinearFilter,minFilter:b.LinearFilter}),this.pxlUtils.loadTexture(s,t,i)}buildSnow(){for(var e=new BufferGeometry,t=[],i=[],s=[],atlasGen=()=>.25*Math.floor(4e3*Math.random()%4),a=0;a<12e3;++a)t.push(0,0,0),i.push(Math.random(),Math.random(),2*Math.random()-1,.5*Math.random()+.5),s.push(atlasGen(),atlasGen());var r=new Float32BufferAttribute(t,3),n=new Float32BufferAttribute(i,4),o=new Float32BufferAttribute(s,2);e.setAttribute("position",r),e.setAttribute("seeds",n),e.setAttribute("atlas",o);var l={snowTexture:{type:"t",value:this.pxlUtils.loadTexture(this.pxlUtils.assetRoot+"snow.jpg",1,{encoding:b.LinearSRGBColorSpace,magFilter:NearestFilter,minFilter:NearestMipmapNearestFilter})},pointScale:{type:"f",value:12*this.pxlQuality.screenResPerc},intensity:{type:"f",value:1},rate:{type:"f",value:.035}};console.log(this.pxlShaders.particles);var h=this.pxlFile.pxlShaderBuilder(l,this.pxlShaders.particles.snowVert(this.mobile),this.pxlShaders.particles.snowFrag());h.side=DoubleSide,h.transparent=!0,h.blending=AdditiveBlending,h.depthTest=!0,h.depthWrite=!1;var d=new Points(e,h);d.sortParticles=!1,d.frustumCulled=!1,this.scene.add(d),d.layers.set(1),d.pBaseScale=12,this.geoList.snow=d;}buildBackgroundObject(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=new PlaneBufferGeometry,a={};Object.assign(a,e),null!=t&&"string"==typeof t||(t=this.pxlShaders.scene.bgScreenVert()),null!=i&&"string"==typeof i||(i=this.pxlShaders.scene.bgScreenFrag());var r=this.pxlFile.pxlShaderBuilder(a,t,i);r.side=DoubleSide,r.depthTest=!0,r.depthWrite=!1;var n=new Mesh(s,r);return n.frustumCulled=!1,n}clickUserDetect(){if(this.roomSceneList[this.currentRoom].castRay&&this.roomSceneList[this.currentRoom].castRay(!0,this.pxlDevice.touchMouseData.button),!this.pxlDevice.mobile){var e=null,t=new b.Vector2(this.pxlDevice.mouseX/this.pxlDevice.sW*2-1,-this.pxlDevice.mouseY/this.pxlDevice.sH*2+1);this.pxlCamera.objRaycast.setFromCamera(t,this.pxlCamera.camera);var i=[];if(this.objectClickable.length>0&&(i=this.pxlCamera.objRaycast.intersectObjects(this.objectClickable)),i.length>0)for(var s=99999,a=0;a<i.length;++a){var r=(l=i[a]).distance;r<s&&(e=l.object,s=Math.min(s,r));}e&&this.clickableActions(e.name);var n=null;if(this.promoClickable.length>0&&(i=this.pxlCamera.objRaycast.intersectObjects(this.promoClickable)),i.length>0){var o=99999;for(a=0;a<i.length;++a){var l,h=(l=i[a]).distance;h<o&&(n=l.object,o=Math.min(o,h));}}n&&this.promoActions(n);}}clickableActions(){"CallToAction"==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:null)&&this.clickablePrevActiveObject&&(this.pxlGuiDraws.ctaBuildPopup(),this.objectClickableObjectList[this.clickablePrevActiveObject].Inactive.visible=!0,this.objectClickableObjectList[this.clickablePrevActiveObject].Hover.visible=!1,this.clickablePrevActiveObject=null);}promoActions(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=e.userData.video;e.name;this.promoClickableLinks.hasOwnProperty(t)&&window.open(this.promoClickableLinks[t],"_blank").focus();}hoverUserDetect(){this.roomSceneList[this.currentRoom].castRay&&this.roomSceneList[this.currentRoom].castRay(!1,this.pxlDevice.touchMouseData.button);var e=null,t=new b.Vector2(this.pxlDevice.mouseX/this.pxlDevice.sW*2-1,-this.pxlDevice.mouseY/this.pxlDevice.sH*2+1);this.pxlCamera.objRaycast.setFromCamera(t,this.pxlCamera.camera);var i=[];if(this.objectClickable.length>0&&(i=this.pxlCamera.objRaycast.intersectObjects(this.objectClickable)),i.length>0)for(var s=99999,a=0;a<i.length;++a){var r=(l=i[a]).distance;r<s&&(e=l.object,s=Math.min(s,r));}if(e)return this.pxlDevice.setCursor("help"),void(this.objectClickableObjectList[e.name]&&(null==this.clickablePrevActiveObject&&(this.clickablePrevActiveObject=e.name),this.objectClickableObjectList[e.name].Inactive.visible=!1,this.objectClickableObjectList[e.name].Hover.visible=!0));this.clickablePrevActiveObject&&(this.objectClickableObjectList[this.clickablePrevActiveObject].Inactive.visible=!0,this.objectClickableObjectList[this.clickablePrevActiveObject].Hover.visible=!1,this.clickablePrevActiveObject=null),this.pxlDevice.setCursor("grab");var n=null;if(this.promoClickable.length>0&&(i=this.pxlCamera.objRaycast.intersectObjects(this.promoClickable)),i.length>0){var o=99999;for(a=0;a<i.length;++a){var l,h=(l=i[a]).distance;h<o&&(n=l.object,o=Math.min(o,h));}}n?(this.pxlDevice.setCursor("alias"),this.promoClickableObjectList[n.name]&&(null==this.promoPrevActiveObject&&(this.promoPrevActiveObject=n.name),this.promoClickableObjectList[n.name].x=1)):(this.promoPrevActiveObject&&(this.promoClickableObjectList[this.promoPrevActiveObject].x=.1,this.promoPrevActiveObject=null),this.pxlDevice.setCursor("grab"));}updateCompUniforms(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;e&&(this.pxlRenderSettings.exposure=e*this.pxlRenderSettings.mult),this.mapOverlayPass&&(this.mapMotionBlurPass.uniforms.exposure.value=this.pxlRenderSettings.exposure,this.mapOverlayHeavyPass.uniforms.exposure.value=this.pxlRenderSettings.exposure,this.mapOverlayPass.uniforms.exposure.value=this.pxlRenderSettings.exposure,this.mapOverlaySlimPass.uniforms.exposure.value=this.pxlRenderSettings.exposure);}sendRoomMessage(e,t,i){this.roomSceneList[e]&&this.roomSceneList[e].onMessage(t,i);}buildComposers(){this.mapWorldPosMaterial=new b.ShaderMaterial({uniforms:{camNear:{type:"f",value:this.pxlCamera.camera.near},camFar:{type:"f",value:this.pxlCamera.camera.far}},vertexShader:this.pxlShaders.rendering.worldPositionVert(),fragmentShader:this.pxlShaders.rendering.worldPositionFrag()}),this.mapWorldPosMaterial.side=b.FrontSide,this.mapWorldPosMaterial.name="mapWorldPosMaterial",this.blurComposer=new E.EffectComposer(this.engine),this.shaderPasses.blurXShaderPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{time:{value:this.time},tDiffuse:{value:null},pDiffuse:{value:null},resUV:{value:this.pxlDevice.screenRes}},vertexShader:this.pxlShaders.core.defaultVert(),fragmentShader:this.pxlShaders.rendering.directionalBlurPass("pDiffuse",[1,0],4,1.8),defines:{}}),"tDiffuse"),this.shaderPasses.blurXShaderPass.material.uniforms.pDiffuse=this.scene.renderGlowTarget.texture,this.shaderPasses.blurXShaderPass.material.transparent=!0,this.shaderPasses.blurXShaderPass.needsSwap=!0,this.shaderPasses.blurXShaderPass.enabled=!1,this.shaderPasses.blurXShaderPass.name="blurXShaderPass",this.blurComposer.addPass(this.shaderPasses.blurXShaderPass),this.shaderPasses.dirBlurCopyPass=new M.ShaderPass(T.CopyShader),this.shaderPasses.dirBlurCopyPass.enabled=!1,this.shaderPasses.dirBlurCopyPass.name="dirBlurCopyPass",this.blurComposer.addPass(this.shaderPasses.dirBlurCopyPass),this.shaderPasses.blurYShaderPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{time:{value:this.time},tDiffuse:{value:null},pDiffuse:{value:null},resUV:{value:this.pxlDevice.screenRes}},vertexShader:this.pxlShaders.core.defaultVert(),fragmentShader:this.pxlShaders.rendering.directionalBlurPass("pDiffuse",[0,1],4,1.3),defines:{}}),"tDiffuse"),this.shaderPasses.blurYShaderPass.material.uniforms.pDiffuse=this.scene.renderGlowTarget.texture,this.shaderPasses.blurYShaderPass.material.transparent=!0,this.shaderPasses.blurYShaderPass.enabled=!1,this.shaderPasses.blurYShaderPass.name="blurYShaderPass",this.blurComposer.addPass(this.shaderPasses.blurYShaderPass),this.shaderPasses.scatterMixShaderPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{time:{value:this.time},tDiffuse:{value:null},pDiffuse:{value:null},resUV:{value:this.pxlDevice.screenRes}},vertexShader:this.pxlShaders.core.defaultVert(),fragmentShader:this.pxlShaders.rendering.mixBlurShaderPass(),defines:{}}),"tDiffuse"),this.shaderPasses.scatterMixShaderPass.material.uniforms.pDiffuse=this.scene.renderGlowTarget.texture,this.shaderPasses.scatterMixShaderPass.material.transparent=!0,this.shaderPasses.scatterMixShaderPass.enabled=!1,this.shaderPasses.scatterMixShaderPass.name="scatterMixShaderPass",this.blurComposer.addPass(this.shaderPasses.scatterMixShaderPass),this.options.antiAliasing==S.LOW?this.shaderPasses.scatterMixShaderPass.enabled=!0:this.options.antiAliasing==S.MEDIUM?(this.shaderPasses.blurXShaderPass.enabled=!0,this.shaderPasses.dirBlurCopyPass.enabled=!0,this.shaderPasses.blurYShaderPass.enabled=!0):this.options.antiAliasing==S.HIGH&&(this.shaderPasses.blurXShaderPass.enabled=!0,this.shaderPasses.dirBlurCopyPass.enabled=!0,this.shaderPasses.blurYShaderPass.enabled=!0,this.shaderPasses.scatterMixShaderPass.enabled=!0),this.mapComposerMotionBlur=new E.EffectComposer(this.engine),this.mapMotionBlurPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{tDiffuse:{value:null},rDiffuse:{value:null},exposure:{type:"f",value:this.pxlRenderSettings.exposure},time:{value:this.pxlTimer.msRunner},camRotXYZ:{value:this.pxlCamera.camRotXYZ},blurDirCur:{type:"f",value:this.blurDirCur},blurDirPrev:{type:"f",value:this.blurDirPrev},noiseTexture:{value:this.cloud3dTexture}},vertexShader:this.pxlShaders.core.defaultVert(),fragmentShader:this.pxlShaders.rendering.motionBlurPostProcess(this.pxlDevice.screenRes,this.pxlDevice.mobile),defines:{}}),"tDiffuse"),this.mapMotionBlurPass.material.uniforms.rDiffuse=this.scene.renderTarget.texture,this.mapMotionBlurPass.needsSwap=!0,this.mapMotionBlurPass.name="mapMotionBlurPass",this.mapComposerMotionBlur.addPass(this.mapMotionBlurPass),this.mapMotionBlurPass.enabled=!1,this.mapComposerMotionBlur.renderToScreen=!1,this.mapComposerGlow=new E.EffectComposer(this.engine);var e=new L.RenderPass(this.scene,this.pxlCamera.camera);this.mapComposerGlow.addPass(e),this.blurScreenMerge=new M.ShaderPass(new b.ShaderMaterial({uniforms:{tDiffuse:{value:null},rDiffuse:{value:null},mtDiffuse:{value:null},exposure:{type:"f",value:this.pxlRenderSettings.exposure}},vertexShader:this.pxlShaders.core.defaultVert(),fragmentShader:this.pxlShaders.rendering.compLayersPostProcess(),defines:{}}),"tDiffuse"),this.blurScreenMerge.material.uniforms.rDiffuse=this.scene.renderTarget.texture,this.blurScreenMerge.material.uniforms.mtDiffuse=this.scene.renderTarget.texture,this.blurScreenMerge.needsSwap=!0,this.blurScreenMerge.name="blurScreenMerge",this.mapComposerGlow.addPass(this.blurScreenMerge);var t=new M.ShaderPass(T.CopyShader);t.name="glowCopyPassBlur",this.mapComposerGlow.addPass(t),this.mapComposerGlow.renderToScreen=!1,this.mapComposerGlow.autoClear=!0,this.mapOverlayHeavyPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{gamma:{type:"f",value:this.pxlDevice.gammaCorrection},exposure:{type:"f",value:this.pxlRenderSettings.exposure},time:{value:this.pxlTimer.msRunner},camPos:{value:this.pxlCamera.camera.position},ratio:{type:"f",value:1},tDiffuse:{value:null},rDiffuse:{value:null},bloomTexture:{value:null},sceneDepth:{value:null},scenePos:{value:null},noiseTexture:{value:this.cloud3dTexture},fogMult:{value:this.fogMult},proximityMult:{value:1}},vertexShader:this.pxlShaders.core.defaultVert(),fragmentShader:this.pxlShaders.rendering.finalOverlayHeavyShader(),defines:{}}),"tDiffuse"),this.mapOverlayHeavyPass.material.uniforms.rDiffuse=this.scene.renderTarget.texture,this.mapOverlayHeavyPass.material.uniforms.bloomTexture=this.mapComposerGlow.renderTarget2.texture,this.mapOverlayHeavyPass.material.uniforms.sceneDepth=this.scene.renderTarget.depthTexture,this.mapOverlayHeavyPass.material.uniforms.scenePos=this.scene.renderWorldPos.texture,this.mapOverlayHeavyPass.needsSwap=!0,this.mapOverlayHeavyPass.name="mapOverlayHeavyPass",this.mapOverlayPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{gamma:{type:"f",value:this.pxlDevice.gammaCorrection},exposure:{type:"f",value:this.pxlRenderSettings.exposure},time:{value:this.pxlTimer.msRunner},camPos:{value:this.pxlCamera.camera.position},ratio:{type:"f",value:1},tDiffuse:{value:null},rDiffuse:{value:null},bloomTexture:{value:null},sceneDepth:{value:null},scenePos:{value:null},noiseTexture:{value:this.cloud3dTexture},fogMult:{value:this.fogMult},proximityMult:{value:1}},vertexShader:this.pxlShaders.core.defaultVert(),fragmentShader:this.pxlShaders.rendering.finalOverlayShader(),defines:{}}),"tDiffuse"),this.mapOverlayPass.material.uniforms.rDiffuse=this.scene.renderTarget.texture,this.mapOverlayPass.material.uniforms.bloomTexture=this.mapComposerGlow.renderTarget2.texture,this.mapOverlayPass.material.uniforms.sceneDepth=this.scene.renderTarget.depthTexture,this.mapOverlayPass.material.uniforms.scenePos=this.scene.renderWorldPos.texture,this.mapOverlayPass.needsSwap=!0,this.mapOverlayPass.name="mapOverlayPass",this.mapOverlaySlimPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{gamma:{type:"f",value:this.pxlDevice.gammaCorrection},exposure:{type:"f",value:this.pxlRenderSettings.exposure},time:{value:this.pxlTimer.msRunner},camPos:{value:this.pxlCamera.camera.position},ratio:{type:"f",value:1},tDiffuse:{value:null},rDiffuse:{value:null},bloomTexture:{value:null},sceneDepth:{value:null},fogMult:{value:this.fogMult},proximityMult:{value:1}},vertexShader:this.pxlShaders.core.defaultVert(),fragmentShader:this.pxlShaders.rendering.finalOverlaySlimShader(),defines:{}}),"tDiffuse"),this.mapOverlaySlimPass.material.uniforms.rDiffuse=this.scene.renderTarget.texture,this.mapOverlaySlimPass.material.uniforms.bloomTexture=this.mapComposerGlow.renderTarget2.texture,this.mapOverlaySlimPass.material.uniforms.sceneDepth=this.scene.renderTarget.depthTexture,this.mapOverlaySlimPass.needsSwap=!0,this.mapOverlaySlimPass.name="mapOverlaySlimPass",this.mapGlowPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{time:{value:this.pxlTimer.msRunner},ratio:{type:"f",value:1},tDiffuse:{value:null},rDiffuse:{value:null},sceneDepth:{value:null}},vertexShader:this.pxlShaders.core.defaultVert(),fragmentShader:this.pxlShaders.rendering.glowPassPostProcess(),defines:{}}),"tDiffuse"),this.mapGlowPass.material.uniforms.rDiffuse=this.scene.renderGlowTarget.texture,this.mapGlowPass.material.uniforms.sceneDepth=this.scene.renderTarget.depthTexture,this.mapGlowPass.needsSwap=!0,this.mapGlowPass.name="mapGlowPass",this.mapComposer=new E.EffectComposer(this.engine),this.mapComposer.addPass(this.mapOverlayHeavyPass),this.mapComposer.addPass(this.mapOverlayPass),this.mapComposer.addPass(this.mapOverlaySlimPass),this.mapComposer.addPass(this.mapGlowPass),this.mapOverlayHeavyPass.enabled=!1,this.mapOverlayPass.enabled=!1,this.pxlUser.lKingWarp=new b.Vector2(...this.pxlUser.lKingInactive),this.lizardKingPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{tDiffuse:{value:null},time:{value:this.pxlTimer.msRunner},ratio:{value:this.pxlDevice.screenRes},noiseTexture:{value:this.cloud3dTexture}},vertexShader:this.pxlShaders.core.defaultVert(),fragmentShader:this.pxlShaders.rendering.lKingPostProcess(),defines:{}}),"tDiffuse"),this.pxlUser.lKingPass=this.lizardKingPass,this.lizardKingPass.enabled=!1,this.pxlUser.lKingPass.name="lizardKingPass",this.pxlUser.sFieldPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{tDiffuse:{value:null},time:{value:this.pxlTimer.msRunner},ratio:{value:this.pxlDevice.screenRes},noiseTexture:{value:this.cloud3dTexture},starTexture:{value:this.pxlUtils.loadTexture(this.pxlUtils.assetRoot+"uv_starNoise.jpg",null,{encoding:b.LinearSRGBColorSpace})}},vertexShader:this.pxlShaders.rendering.sFieldPostProcessVert(),fragmentShader:this.pxlShaders.rendering.sFieldPostProcessFrag(),defines:{}}),"tDiffuse"),this.pxlUser.sFieldPass.enabled=!1,this.pxlUser.sFieldPass.name="sFieldPass",this.pxlUser.iZoomPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{tDiffuse:{value:null},tDiffusePrev:{type:"t",value:null},time:{value:this.pxlTimer.msRunner},ratio:{value:this.pxlDevice.screenRes},noiseTexture:{value:this.cloud3dTexture}},vertexShader:this.pxlShaders.core.defaultVert(),fragmentShader:this.pxlShaders.rendering.iZoomPostProcess(),defines:{}}),"tDiffuse"),this.pxlUser.iZoomPass.enabled=!1,this.pxlUser.iZoomPass.name="iZoomPass",this.chroAberrationPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{tDiffuse:{value:null},ratio:{value:this.pxlDevice.screenRes},warpMult:{value:this.chroAberMult},chroAberUVTexture:{value:this.chroAberUVTexture},lKing:{value:this.pxlUser.lKingWarp}},vertexShader:this.pxlShaders.core.defaultVert(),fragmentShader:this.pxlShaders.rendering.chroAberPostProcess(),defines:{}}),"tDiffuse"),this.chroAberrationPass.enabled=!1,this.chroAberrationPass.name="chroAberrationPass",this.mapComposer.addPass(this.chroAberrationPass),this.mapComposer.addPass(this.lizardKingPass),this.mapComposer.addPass(this.pxlUser.sFieldPass),this.mapComposer.addPass(this.pxlUser.iZoomPass),this.mapComposerWarpPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{time:{value:this.pxlTimer.msRunner},fader:{value:this.warpVisualFader},tDiffuse:{value:null},noiseTexture:{value:this.cloud3dTexture},animTexture:{value:this.blockAnimTexture}},vertexShader:this.pxlShaders.core.camPosVert(),fragmentShader:this.pxlShaders.rendering.warpPostProcess(),defines:{}}),"tDiffuse"),this.mapComposerWarpPass.needsSwap=!0,this.mapComposerWarpPass.enabled=!1,this.mapComposerWarpPass.name="mapComposerWarpPass",this.mapComposer.addPass(this.mapComposerWarpPass),this.mapBoxAAPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{tDiffuse:{value:null},resUV:{type:"f",value:this.pxlDevice.screenRes},ratio:{type:"f",value:1},gamma:{type:"f",value:this.pxlDevice.gammaCorrection}},vertexShader:this.pxlShaders.core.camPosVert(),fragmentShader:this.pxlShaders.rendering.boxAntiAliasPass(),defines:{}}),"tDiffuse"),this.mapBoxAAPass.enabled=!1,this.mapBoxAAPass.name="mapBoxAAPass",this.mapComposer.addPass(this.mapBoxAAPass),this.mapCrossAAPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{tDiffuse:{value:null},resUV:{type:"f",value:this.pxlDevice.screenRes},ratio:{type:"f",value:1},gamma:{type:"f",value:this.pxlDevice.gammaCorrection}},vertexShader:this.pxlShaders.core.camPosVert(),fragmentShader:this.pxlShaders.rendering.crossAntiAliasPass(),defines:{}}),"tDiffuse"),this.mapCrossAAPass.enabled=!1,this.mapCrossAAPass.name="mapCrossAAPass",this.mapComposer.addPass(this.mapCrossAAPass),this.mapComposer.autoClear=!0;var i=this.roomSceneList[this.bootRoom].scene;this.roomComposer=new E.EffectComposer(this.engine),this.roomRenderPass=new L.RenderPass(i,this.pxlCamera.camera),this.roomRenderPass.name="roomRenderPass",this.roomComposer.addPass(this.roomRenderPass),this.roomNameList.forEach((e=>{if(e!=this.mainRoom){var t=this.roomSceneList[e].applyRoomPass(this.roomComposer);t&&(t.enabled=!1,this.roomComposer.addPass(t));}})),this.roomBloomPass=new A.UnrealBloomPass(new b.Vector2(.5*this.pxlDevice.mapW,.5*this.pxlDevice.mapH),1.5,.8,.85),this.roomBloomPass.threshold=this.pxlRenderSettings.bloomThresh,this.roomBloomPass.strength=this.pxlRenderSettings.bloomStrength,this.roomBloomPass.radius=this.pxlRenderSettings.bloomRadius,this.roomBloomPass.name="roomBloomPass",this.roomComposer.addPass(this.roomBloomPass),this.roomGlowPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{time:{value:this.pxlTimer.msRunner},ratio:{type:"f",value:1},tDiffuse:{value:null},gDiffuse:{value:null},rDiffuse:{value:null},sceneDepth:{value:null}},vertexShader:this.pxlShaders.core.defaultVert(),fragmentShader:this.pxlShaders.rendering.glowPassPostProcess(),defines:{}}),"tDiffuse"),this.roomGlowPass.material.uniforms.gDiffuse=this.blurComposer.writeBuffer.texture,this.roomGlowPass.material.uniforms.rDiffuse=this.blurComposer.renderTarget2.texture,this.roomGlowPass.material.uniforms.sceneDepth=this.scene.renderTarget.depthTexture,this.roomGlowPass.needsSwap=!0,this.roomGlowPass.name="roomGlowPass",this.roomComposer.addPass(this.roomGlowPass),this.roomComposer.addPass(this.chroAberrationPass),this.roomComposer.addPass(this.lizardKingPass),this.roomComposer.addPass(this.pxlUser.sFieldPass),this.roomComposer.addPass(this.pxlUser.iZoomPass),this.roomComposer.addPass(this.mapComposerWarpPass),this.roomComposer.addPass(this.mapCrossAAPass),this.roomComposer.addPass(this.mapBoxAAPass),this.roomComposer.autoClear=!0,this.delayComposer=new E.EffectComposer(this.engine);new L.RenderPass(this.scene,this.pxlCamera.camera);this.delayPass=new M.ShaderPass(new b.ShaderMaterial({uniforms:{tDiffuse:{value:null},roomComposer:{type:"f",value:0},tDiffusePrev:{value:null},tDiffusePrevRoom:{value:null}},vertexShader:this.pxlShaders.core.defaultVert(),fragmentShader:this.pxlShaders.rendering.textureStorePass(),defines:{}}),"tDiffuse"),this.delayPass.material.uniforms.tDiffusePrev=this.mapComposer.renderTarget1.texture,this.delayPass.material.uniforms.tDiffusePrevRoom=this.roomComposer.renderTarget1.texture,this.delayPass.clear=!1,this.delayComposer.addPass(this.delayPass),this.delayComposer.renderToScreen=!1,this.delayComposer.autoClear=!1,this.pxlUser.iZoomPass.uniforms.tDiffusePrev.value=this.delayComposer.renderTarget2.texture;}setExposure(e){e*=1,this.pxlCamera.uniformScalars.exposureUniformBase=e,this.updateCompUniforms(e);}stepWarpPass(){if(this.warpVisualActive){var e=(this.pxlTimer.curMS-this.warpVisualStartTime)/this.warpVisualMaxTime[this.pxlCamera.warpType],t=Math.min(1,3*e),i=Math.min(1,3-3*e);1==t&&1==i&&this.pxlCamera.warpActive&&this.pxlCamera.warpCamRun(),this.warpVisualFader.x=t,this.warpVisualFader.y=i,i<=0&&this.stopWarpVisual();}}checkUserVideoStatus(e){}remoteUserUpdateMedia(e){}userRemoveRemoteData(e){}stepShaderValues(){this.stepShaderFuncArr.forEach((e=>{"object"==typeof e?e.step():"string"==typeof e&&(console.log("Does this trigger?"),console.log(e));}));}stepAnimatedObjects(){this.pxlUser.itemListNames.length>0&&this.pxlUser.itemListNames.forEach((e=>{this.pxlUser.itemList[e].rotation.y=this.pxlTimer.msRunner.x*this.pxlUser.itemRotateRate;}));}initWarpVisual(e){this.warpVisualActive=!0,this.warpVisualFader.x=0,this.warpVisualFader.y=1,this.warpVisualStartTime=this.pxlTimer.curMS,this.mapComposerWarpPass.enabled=!0;}stopWarpVisual(){this.warpVisualActive=!1,this.warpVisualFader.x=1,this.warpVisualFader.y=0,this.mapComposerWarpPass.enabled=!!this.pxlUser.iZoom;}prepPortalRender(){}cleanupPortalRender(){}setPortalTexture(e,t){this.roomWarpVisuals[t].material.map=e;}warpPortalQueue(){return Object.keys(this.roomSceneList).reverse()}getSceneSnapshot(e){var t=this.roomSceneList[e];this.engine.setRenderTarget(t.warpZoneRenderTarget),t.prepPortalRender(),this.engine.render(t.scene||t.scene,this.pxlCamera.camera),t.cleanupPortalRender(),this.engine.setRenderTarget(null);}mapRender(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if(this.pxlTimer.active&&this.step(),this.pxlTimer.curMS>this.nextRenderMS||0==e){this.prevRenderMS=this.nextRenderMS,this.nextRenderMS=this.pxlTimer.curMS+this.renderInterval,this.stepShaderValues(),this.stepAnimatedObjects();var t=this.roomSceneList[this.currentRoom];t&&t.booted&&(t.step(),t.camera.layers.disable(this.renderLayerEnum.SKY),this.engine.setRenderTarget(t.scene.renderTarget),this.engine.clear(),this.engine.render(t.scene,t.camera),this.engine.setRenderTarget(null),t.camera.layers.enable(this.renderLayerEnum.SKY),this.mapComposerGlow&&(this.pxlQuality.settings.bloom||this.pxlQuality.settings.fog)&&this.mapComposerGlow.render(),this.mapRenderBlurStack(t,t.camera,t.scene,this.scene.renderGlowTarget),this.roomComposer.render()),this.pxlUser.iZoom&&this.delayComposer.render();}this.pxlTimer.active&&e&&requestAnimationFrame((()=>{this.mapRender();}));}mapRenderBlurStack(e,t,i,s){if(this.blurComposer){e.geoList.GlowPass&&(e.geoList.GlowPass.forEach((e=>{if(e.userData.hasOwnProperty("GlowPerc")){var t=e.userData.GlowPerc;e.material.hasOwnProperty("uniforms")&&e.material.uniforms.mult&&(e.material.uniforms.mult.value=t);}})),e.geoList.hasOwnProperty("GlowPassMask")&&e.geoList.GlowPassMask.forEach((e=>{e.material.uniforms&&e.material.uniforms.cdMult&&(e.material.uniforms.cdMult.value=0);}))),t.layers.disable(this.renderLayerEnum.SCENE),t.layers.disable(this.renderLayerEnum.PARTICLES),t.layers.disable(this.renderLayerEnum.SKY),this.engine.setRenderTarget(s);var a=i.background.clone();i.background.set(0),this.engine.setClearColor(0,0),this.engine.render(i,t),i.background.r=a.r,i.background.g=a.g,i.background.b=a.b,t.layers.enable(this.renderLayerEnum.SCENE),t.layers.enable(this.renderLayerEnum.PARTICLES),t.layers.enable(this.renderLayerEnum.SKY),this.engine.setRenderTarget(null),e.geoList.GlowPass&&(e.geoList.GlowPass.forEach((e=>{e.userData.hasOwnProperty("GlowPerc")&&e.material.hasOwnProperty("uniforms")&&e.material.uniforms.mult&&(e.material.uniforms.mult.value=1);})),e.geoList.hasOwnProperty("GlowPassMask")&&e.geoList.GlowPassMask.forEach((e=>{e.material.uniforms&&e.material.uniforms.cdMult&&(e.material.uniforms.cdMult.value=1);}))),this.blurComposer.render(),this.roomBloomPass.enabled=!1;}}},GUI:class GUI extends GUIManager{constructor(e){super(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Metal-Asylum",arguments.length>2&&void 0!==arguments[2]?arguments[2]:"images/assets/",arguments.length>3&&void 0!==arguments[3]?arguments[3]:"images/GUI/"),this.verbose=e,this.lableBoxSize=40,this.optionWidthRound=10,this.optionWidthAdd=25,this.deviceOptionHeight=[0,300],this.ShaderEditor=null,this.pxlLoaderTotal=5,this.hudVisibility=!0,this.camChoicesActive=!1,this.micChoicesActive=!1,this.textDescriptions={chatIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">C</span> )</span><br>chat',pos:[1,-1.5]},multiverseIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">U</span> )</span><br>multiverse<br>selection',pos:[0,-1.3]},djPlayerVolumeParent:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">B</span> )</span><br>music volume',pos:[0,-1.5]},speakerIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">N</span> )</span><br>mute people<br>pick audio output',pos:[0,-1.5]},micIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">M</span> )</span><br>mute/pick<br>mic input',pos:[0,-1.5]},camIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">V</span> )</span><br>enable/pick<br>video input',pos:[0,-1.5]},helpIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">?</span> )</span><br>help &<br>instructions',pos:[0,-1.5]},infoIconParent:{text:'Info <span class="helpHotKeyParent">( <span class="helpHotKey">I</span> )</span>',pos:[-1,0],offset:[-10,0]},settingsIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">G</span> )</span><br>graphics &<br>navigation',pos:[0,-1.5]},muteAllIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">N</span> )</span><br>mute all users',pos:[1,0]},fullScreenIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">F</span> )</span><br>toggle full screen',pos:[-1,0]},videoQualityIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">H</span> )</span><br>video quality settings',pos:[-1,0]},statsIcon:{text:"jitsi connection status; toggle connection ",pos:[1,0]},usersIcon:{text:'<span class="helpHotKeyParent">( <span class="helpHotKey">T</span> )</span> user moderator tools',pos:[1,0]},ft2Button:{text:"Environment",pos:[-1,0],offset:[-10,0]},ft3Button:{text:"Invite Friends",pos:[-1,0],offset:[-10,0]},hud_userCount:{text:"# of People",pos:[-1,0],offset:[-10,0]}},this.activeItem=null,this.actionPopUp=null,this.init();}setDependencies(pxlNav){super.setDependencies(pxlNav),this.ShaderEditor=new ShaderEditor(pxlNav,this);}init(){super.init();}booted(){super.booted();}step(){super.step();}toggleShaderEditor(){this.ShaderEditor.toggleShaderEditor();}resize(e){super.resize(),this.ShaderEditor&&this.ShaderEditor.resize(e);}},Camera:class Camera{constructor(){this.standingHeight=1.75,this.movementScalar=1,this.jumpScalar=1,this.userScale=1,this.cameraEasing=[.55,.45],this.cameraJumpImpulse=[.035,.075],this.cameraMaxJumpHold=[.55,1],this.gravityRate=0,this.gravityMax=2.5,this.gravityMPS=[1,.5],this.pxlAudio=null,this.pxlTimer=null,this.pxlAutoCam=null,this.pxlEnv=null,this.pxlUser=null,this.pxlUtils=null,this.pxlDevice=null,this.pxlGuiDraws=null,this.pxlQuality=null,this.socket=null,this.camera=null,this.canMove=!0,this.HDRView=!1,this.objRaycast=new b.Raycaster,this.camUpdated=!0,this.cameraBooted=!1,this.standingHeightGravInfluence=0,this.standingMaxGravityOffset=.5,this.maxStepHeight=.6,this.walkBounce=0,this.walkBounceSeed=230,this.walkBouncePerc=0,this.posRotEasingThreshold=.01,this.cameraMovement=[0,0],this.cameraMovementEase=.85,this.cameraMoveLength=0,this.cameraMoveLengthMult=.1,this.camPosBlend=.65,this.camRotXYZ=new b.Vector3(0,0,0),this.camRotPitch=new b.Vector2(0,0),this.cameraJumpActive=!1,this.cameraAllowJump=!0,this.cameraJumpHeight=0,this.cameraJumpVelocity=0,this.cameraJumpVelocityEaseOut=.8,this.cameraJumpInAir=!1,this.floorColliderInitialHit=!1,this.colliderValidityChecked=!0,this.nearestFloorHit=new b.Vector3(0,0,0),this.nearestFloorObjName=null,this.nearestFloorHitPrev=new b.Vector3(0,0,0),this.nearestFloorObjNamePrev=null,this.objectJumpLock=!1,this.gravityActive=!1,this.gravitySourceActive=!1,this.gravityDirection=new b.Vector3(0,-1,0),this.gravityEaseOutRate=.8,this.jump=0,this.hasJumpLock=!1,this.releaseJumpLockTime=0,this.releaseJumpLockDelay=.05,this.runMain=!0,this.workerActive=!1,this.worker=null,this.workerTransfers=!1,this.workerMessage=()=>{},this.workerFunc=()=>{},this.deviceKey=()=>{},this.portalList={},this.collidersExist=!1,this.colliderActive=!1,this.colliderList={noAxis:[],11:[],"01":[],10:[],"00":[]},this.antiColliderActive=!1,this.antiColliderList={noAxis:[],11:[],"01":[],10:[],"00":[]},this.antiColliderTopActive=!1,this.antiColliderTopList={noAxis:[],11:[],"01":[],10:[],"00":[]},this.roomWarpZone=[],this.colliderCurObjHit=null,this.colliderPrevObjHit=null,this.colliderValid=!1,this.colliderFail=!1,this.warpActive=!1,this.warpType=0,this.warpObj=null,this.warpTarget=null,this.hotKeyTriggered=!1,this.eventCheckStatus=!1,this.proximityScaleTrigger=!1,this.colliderShiftActive=!0,this.colliderAdjustPerc=0,this.colliderAdjustRate=.02,this.gyroGravity=[0,0,0],this.cameraPose={alpha:null,beta:null,gamma:null,alphaOffset:0,betaOffset:0,gammaOffset:0,orientation:window.orientation||0,pos:[0,0,0],posOffset:[0,0,0],rx:()=>this.beta,ry:()=>this.alpha,rz:()=>this.gamma,accelZeroed:[0,0,0],accelCalibration:10,accelCalDiv:.1,accelCalCount:0,accelTotal:[0,0,0],accelPrev:null,accelDelta:[0,0,0],accelClearDelta:()=>{this.accelDelta=[0,0,0];}},this.uniformScalars={curExp:1,darkBase:.1,brightBase:.5,exposureUniformBase:1},this.cameraPosLookAtNames={default:{pos:"Position",lookAt:"LookAt"},mobile:{pos:"PositionMobile",lookAt:"LookAtMobile"},vr:{pos:"PositionVR",lookAt:"LookAtVR"}},this.cameraPos=new b.Vector3(0,0,0),this.cameraPrevPos=new b.Vector3(0,0,0),this.cameraPrevLookAt=new b.Vector3(0,0,0),this.cameraAim=new b.Vector3(0,0,1),this.cameraAimTarget=new b.Vector3(0,0,0),this.cameraCross=new b.Vector3(1,0,0),this.lookAtTargetActive=new b.Vector3(0,0,0),this.lookAtPerc=new b.Vector2(1,0),this.lookAtLockPerc=0,this.lookAtLockFader=0,this.lookAtLockFadeRate=.01,this.prevQuaternion=new b.Quaternion,this.pi=3.14159265358979,this.init();}setDependencies(pxlNav){this.pxlAudio=pxlNav.pxlAudio,this.pxlTimer=pxlNav.pxlTimer,this.pxlAutoCam=pxlNav.pxlAutoCam,this.pxlEnv=pxlNav.pxlEnv,this.pxlUser=pxlNav.pxlUser,this.pxlUtils=pxlNav.pxlUtils,this.pxlDevice=pxlNav.pxlDevice,this.pxlGuiDraws=pxlNav.pxlGuiDraws,this.pxlQuality=pxlNav.pxlQuality,this.socket=pxlNav.socket;}init(){}updateMainValues(e){var{gravityRate:t,standingHeightGravInfluence:i,cameraJumpImpulse:s}=e;null!=t&&(this.gravityRate=t),null!=i&&(this.standingHeightGravInfluence=i),null!=s&&(this.cameraJumpVelocity+=s),this.camUpdated=!0;}step(){this.pxlDevice.directionKeyDown&&this.updateMovement(this.pxlTimer.prevMS),this.runMain&&(this.hasJumpLock&&this.pxlTimer.runtime>this.releaseJumpLockTime&&(this.hasJumpLock=!1,this.gravityActive=!1,this.cameraAllowJump=!0,this.camInitJump()),this.gravityActive&&this.cameraJumpActive?this.camJump(this.pxlTimer.prevMS):this.cameraJumpVelocity>0&&this.killJumpImpulse()),this.camUpdated=this.camUpdated||0!=this.cameraMovement[0]||this.cameraMovement[1]||this.gravityActive||this.pxlDevice.cursorLockActive,this.updateCamera(),this.lowQualityUpdates(),this.midQualityUpdates(),this.eventCheck();}eventCheck(){this.colliderValid&&this.eventCheckStatus&&this.eventTrigger(this.nearestFloorObjName)&&this.warpEventTriggered(1,this.nearestFloorObjName);}updateDeviceValues(e){if(!this.pxlQuality.settings.leftRight){var t=-this.cameraMovement[0];this.pxlDevice.touchMouseData.active||(this.pxlDevice.touchMouseData.velocity.x+=t),this.pxlDevice.touchMouseData.netDistance.x+=4*t;}if(null!=this.pxlDevice.touchMouseData.velocity&&0==this.pxlDevice.mobile){if(e<this.posRotEasingThreshold)this.pxlDevice.touchMouseData.velocity.multiplyScalar(0);else {var i=this.cameraEasing[this.pxlDevice.mobile?1:0];this.pxlDevice.touchMouseData.velocity.multiplyScalar(i);}this.pxlDevice.touchMouseData.netDistance.add(this.pxlDevice.touchMouseData.velocity.clone().multiply(this.pxlDevice.touchMouseData.moveMult));}}buildDeviceMonitors(){}updateCameraMatrices(){this.camera.updateProjectionMatrix(),this.camera.updateMatrixWorld(),this.camera.updateWorldMatrix();}resetCameraCalculations(e){this.cameraMovement[0]=0,this.cameraMovement[1]=0,this.pxlDevice.touchMouseData.curFadeOut.multiplyScalar(0),this.pxlDevice.touchMouseData.velocity.multiplyScalar(0),this.pxlDevice.touchMouseData.netDistance.set(0,0),this.camera.position.copy(e),this.updateCameraMatrices(),this.cameraPos.copy(e),this.cameraPrevPos.copy(e),this.colliderCurObjHit=null,this.colliderPrevObjHit=null,this.camUpdated=!0;}setFOV(e){this.camera.fov=e,this.camera.updateProjectionMatrix(),this.camUpdated=!0;}setStats(e,t,i,s){this.camera.near=i,this.camera.far=s,this.setFOV(e);}setTransform(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.resetCameraCalculations(e),t&&(this.cameraAimTarget.position.copy(t),this.camera.lookAt(t),this.cameraPrevLookAt.copy(t),this.updateCameraMatrices(),this.pxlDevice.touchMouseData.initialQuat=this.camera.quaternion.clone()),this.resetGravity(),this.camUpdated=!0;}setToObj(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(this.resetCameraCalculations(e.position),t){var i=t.position.clone();this.cameraAimTarget.position.copy(i),this.camera.lookAt(i),this.cameraPrevLookAt.copy(i),this.updateCameraMatrices(),this.pxlDevice.touchMouseData.initialQuat=this.camera.quaternion.clone();}else this.pxlDevice.touchMouseData.initialQuat=e.quaternion.clone(),this.camera.setRotationFromQuaternion(this.pxlDevice.touchMouseData.initialQuat),this.updateCameraMatrices();this.resetGravity(),this.camUpdated=!0,this.mainColliderCheck(e.position,null),this.nearestFloorObjName=null;}warpToRoom(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].stop();var s=this.pxlEnv.currentRoom,a=this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].camHoldWarpPos;this.pxlEnv.currentRoom=e,this.pxlAutoCam.curRoom=e;var r=this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom],n=e==this.pxlEnv.mainRoom;if(this.pxlUser.iZoom){var o=n?this.pxlEnv.roomComposer:this.pxlEnv.mapComposer,l=n?this.pxlEnv.mapComposer:this.pxlEnv.roomComposer;this.pxlEnv.delayPass.uniforms.tDiffusePrev.value=o.renderTarget1.texture,this.pxlEnv.delayPass.uniforms.tDiffusePrevRoom.value=l.renderTarget1.texture,setTimeout((()=>{s!=e&&(n?this.pxlEnv.roomComposer.reset():this.pxlEnv.mapComposer.reset()),setTimeout((()=>{this.pxlEnv.mapComposerWarpPass.needsSwap=!1;}),500);}),100);}if(t)if(e!=s&&r.start(),this.pxlEnv.roomRenderPass.scene=r.scene,r.camLocation.hasOwnProperty(i)){var h=this.cameraPosLookAtNames.default.pos,d=this.cameraPosLookAtNames.default.lookAt;this.pxlDevice.mobile&&(r.camLocation[i].hasOwnProperty(this.cameraPosLookAtNames.mobile.pos)&&(h=this.cameraPosLookAtNames.mobile.pos),r.camLocation[i].hasOwnProperty(this.cameraPosLookAtNames.mobile.lookAt)&&(d=this.cameraPosLookAtNames.mobile.lookAt));var c=r.camLocation[i][h],u=r.camLocation[i][d];this.setTransform(c,u);}else !r.camInitPos||!r.camInitLookAt||a&&this.pxlEnv.postIntro&&!this.hotKeyTriggered||(this.setTransform(r.camInitPos,r.camInitLookAt),this.hotKeyTriggered=!1);else a&&this.pxlEnv.postIntro&&!this.hotKeyTriggered||(null!=i?this.setToObj(i):this.setTransform(r.camReturnPos,r.camReturnLookAt),this.hotKeyTriggered=!1);this.pxlGuiDraws.prepArtistInfo(r.getArtistInfo()),this.camUpdated=!0,this.camera.fov=r.pxlCamFOV,this.camera.zoom=r.pxlCamZoom,this.camera.aspect=r.pxlCamAspect,this.camera.near=r.pxlCamNearClipping,this.camera.far=r.pxlCamFarClipping,this.camera.updateProjectionMatrix();var p=this.getUserHeight();this.emitCameraTransforms(this.camera.position.clone(),p,!0),this.pxlAutoCam.checkStatus();}warpToRoomSnapshot(e){this.pxlEnv.currentRoom=e;var t=this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom];this.camera.fov=t.pxlCamFOV,this.camera.zoom=t.pxlCamZoom,this.camera.aspect=t.pxlCamAspect,this.camera.near=t.pxlCamNearClipping,this.camera.far=t.pxlCamFarClipping,this.camera.updateProjectionMatrix(),this.setTransform(t.camThumbPos,t.camThumbLookAt);var i=this.getUserHeight();this.emitCameraTransforms(this.camera.position.clone(),i,!0);}fastTravel(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.pxlAutoCam.enabled||((this.pxlAutoCam.active||this.pxlAutoCam.autoCamActive)&&this.pxlAutoCam.preAutoCamToggle(),this.hotKeyTriggered=!0,0==e&&this.warpEventTriggered(1,this.pxlEnv.currentRoom,"init"));}camJumpKey(){arguments.length>0&&void 0!==arguments[0]&&arguments[0]?this.camInitJump():(this.cameraJumpActive&&(this.cameraJumpActive=!1),this.cameraAllowJump=!0,this.hasJumpLock=!1);}camInitJump(){this.canMove&&!this.gravityActive&&this.cameraAllowJump&&(this.pxlDevice.keyDownCount[2]=this.pxlTimer.prevMS,this.cameraAllowJump=!1,this.cameraJumpActive=!0,this.cameraJumpInAir=!0,this.gravityActive=!0,this.gravityRate=0,this.cameraJumpVelocity=this.cameraJumpImpulse[this.pxlUser.lowGrav]*this.userScale,this.objectJumpLock&&(this.objectJumpLock=!1,this.nearestFloorHit=this.nearestFloorHitPrev));}camJump(e){var t=e-this.pxlDevice.keyDownCount[2],i=Math.min(1,t/this.cameraMaxJumpHold[this.pxlUser.lowGrav]);if(this.cameraJumpActive){var s=i;1==s?this.cameraJumpActive=!1:(s=(1-s)*(1-s),s*=.5*s+.5),this.cameraJumpVelocity+=Math.max(0,s)*this.cameraJumpImpulse[this.pxlUser.lowGrav]*this.jumpScalar;}this.cameraJumpVelocity*=1-i,1==i&&(this.cameraJumpActive=!1);}killJumpImpulse(){var e=this.cameraJumpVelocity*this.cameraJumpVelocityEaseOut;this.cameraJumpVelocity=e>.1?e:0,this.workerFunc("killJumpImpulse");}updateGravity(){if(this.runMain){this.gravityRate=Math.max(0,this.gravityRate-.2*this.cameraJumpVelocity);var e=this.gravityMPS[this.pxlUser.lowGrav];if(this.gravityActive&&(this.gravityRate=Math.min(this.gravityMax,this.gravityRate+this.gravityMax*this.pxlTimer.msRunner.y)*e),0!=this.gravityRate){this.gravityActive?.08*this.gravityRate:(this.gravityRate=this.gravityRate>.01?this.gravityRate*this.gravityEaseOutRate*e:0,this.gravityRate),this.standingHeightGravInfluence=Math.min(1,1.2*this.gravityRate/this.gravityMax)*this.standingMaxGravityOffset;}}}resetGravity(){this.gravityRate=0,this.workerFunc("resetGravity"),this.jumpLanding(!1);}jumpLanding(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.cameraJumpActive&&(this.hasJumpLock=!0,this.releaseJumpLockTime=this.pxlTimer.runtime+this.releaseJumpLockDelay),this.gravityActive=!1,this.cameraJumpVelocity=0,this.cameraJumpInAir=!1,this.cameraJumpActive=!1,e&&this.workerFunc("jumpLanding");}mainColliderCheck(e,t){if(!this.canMove)return e;var i=null;if(this.movementBlocked=!1,(this.cameraMoveLength>0||null==this.colliderPrevObjHit||null==this.nearestFloorObjName)&&this.cameraBooted&&this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].collidersExist){this.colliderValidityChecked=!0;var s=new b.Vector3(0,-1,0),a=e.clone();a.y=1500,this.objRaycast.set(a,s);var r=[],n=~~(a.x>0)+""+~~(a.z>0);if(this.antiColliderActive&&(r=this.objRaycast.intersectObjects([...this.antiColliderList.noAxis,...this.antiColliderList[n]])),r.length>0)if(this.antiColliderTopActive){for(var o,l,h=this.objRaycast.intersectObjects([...this.antiColliderTopList.noAxis,...this.antiColliderTopList[n]]),d=-99999,c=(e.y,this.nearestFloorHit),u=!1,p=0;p<h.length;++p){var m=h[p];o=m.object.name;var v=m.point,g=m.distance,f=v.y<this.maxStepHeight;u=u||f,(g<d&&valid||null==i)&&(i=o,d=g,c=v);}(!u||e.y<c.y&&this.nearestFloorHitPrev.y-c.y>this.maxStepHeight+this.getStandingHeight()&&!this.gravityActive&&e.y+this.maxStepHeight+this.getStandingHeight()<c.y&&this.gravityActive)&&(0==this.cameraMovement[0]&&0==this.cameraMovement[1]||(u=!0,this.gravityActive=!1,this.objectJumpLock=!0),(l=this.cameraPos.clone()).y=Math.min(e.y,l.y),c=e=l,this.gravityActive?c.y=this.nearestFloorHitPrev.y:c.y=this.cameraPos.y,this.cameraJumpActive=!1,this.cameraAllowJump=!0,this.cameraJumpInAir=!1,this.cameraMovement[0]=0,this.cameraMovement[1]=0,this.pxlDevice.touchMouseData.curFadeOut.multiplyScalar(0),this.pxlDevice.touchMouseData.velocity.multiplyScalar(0)),u&&(null==i?(this.nearestFloorHit=this.nearestFloorHitPrev,this.nearestFloorObjName=this.nearestFloorObjNamePrev,Math.abs(e.y-this.nearestFloorHit.y)>this.maxStepHeight+this.getStandingHeight()&&(this.colliderValid=!1,this.gravityActive=!0)):(this.nearestFloorHitPrev=this.nearestFloorHit,this.nearestFloorObjNamePrev=this.nearestFloorObjName,this.nearestFloorHit=c,this.nearestFloorObjName=i));}else this.colliderFail=!0,this.movementBlocked=!0;else {var x=this.maxStepHeight+this.cameraJumpVelocity;this.maxStepHeight,this.gravityRate;if(a.y=e.y+x,this.objRaycast.set(a,s),this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].colliderMasterList||(this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].colliderMasterList={}),!this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].colliderMasterList[n]){var y=[],C=this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom];y.push(...C.colliderList.noAxis),y.push(...C.colliderList[n]),y.push(...C.antiColliderTopList.noAxis),y.push(...C.antiColliderTopList[n]),this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].colliderMasterList[n]=y;}if(!(this.colliderActive&&this.antiColliderTopActive||this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].colliderActive))return e;if((r=this.objRaycast.intersectObjects(this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].colliderMasterList[n])).length>0){this.floorColliderInitialHit=!0;for(var P,S=-99999,w=this.nearestFloorHit,D=0;D<r.length;++D){var E,L=r[D],M=L.distance,T=L.point;if(P=L.object.name,E=T.distanceTo(e)<this.maxStepHeight,(this.portalList[P]||this.roomWarpZone.includes(P))&&E){i=P,w=T;break}this.itemCheck(P,E)||(M<S||null==i)&&(i=P,S=M,w=T);}null==this.nearestFloorObjName&&null!=i&&(this.nearestFloorHitPrev=w,this.nearestFloorObjNamePrev=i,this.nearestFloorHit=w,this.nearestFloorObjName=i),this.nearestFloorHitPrev.y-w.y>this.maxStepHeight+this.getStandingHeight()&&!this.gravityActive?(e=i?this.cameraPos.clone():this.cameraPrevPos.clone(),i=this.nearestFloorObjName,this.cameraMovement[0]=0,this.cameraMovement[1]=0,this.pxlDevice.touchMouseData.curFadeOut.multiplyScalar(0),this.pxlDevice.touchMouseData.velocity.multiplyScalar(0)):(this.nearestFloorHitPrev=this.nearestFloorHit,this.nearestFloorObjNamePrev=this.nearestFloorObjName,this.nearestFloorHit=w,this.nearestFloorObjName=i,null==i&&(this.colliderValid=!1,this.gravityActive=!0));}else this.colliderFail=!0,this.movementBlocked=!0,this.colliderValidityChecked=!1,e=this.cameraPos.clone();}}else this.colliderValidityChecked=!1;return this.colliderValidityChecked=!1,e}roomColliderCheck(e,t){if(!this.canMove)return e;this.colliderValidityChecked=!0,this.colliderValid=!1,this.colliderFail=!1;var i=e.clone();i.y=0,this.nearestFloorHit=i,this.nearestFloorObjName="None";var s=new b.Vector3(0,-1,0),a=e.clone();a.y=1500,this.objRaycast.set(a,s);var r=this.objRaycast.intersectObjects(this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].roomWarp);if(r.length>0)return this.pxlEnv.currentAudioZone=0,this.warpEventTriggered(1,this.pxlEnv.mainRoom),e;if(1==this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].colliderActive){if(!this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].colliderMasterList){var n=[];Object.keys(this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].colliderList).forEach((e=>{n.push(...this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].colliderList[e]);})),this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].colliderMasterList=n;}if(this.objRaycast.set(a,s),0==(r=this.objRaycast.intersectObjects(this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom].colliderMasterList)).length){var o=this.cameraPrevPos.clone();return o.y=e.y,o}var l=!1,h=!1,d=!1,c=e.clone();if(c.y-=this.maxStepHeight,r.forEach((i=>{i.distance;var a=i.point.y;a>e.y-this.maxStepHeight&&a<e.y+this.maxStepHeight+t&&c.y<a?(l=!0,d=!1,c=i.point):a>e.y+this.maxStepHeight?h=!0:a<e.y-this.maxStepHeight&&0==l&&(d=!0);})),h){var u=this.cameraPrevPos.clone();return u.y=e.y,u}if(d&&(this.gravityActive=!0),l)return e.y<c.y&&this.jumpLanding(),c.clone()}return e}checkColliderValid(e){this.colliderValidityChecked=!0;var t=this.maxStepHeight+this.gravityRate,i=e.distanceTo(this.nearestFloorHit),s=i<t;return this.colliderValid=s,i}eventTrigger(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(!this.canMove)return !1;if(!e)return !1;if(this.portalList[e])return this.warpEventTriggered(0,this.portalList[e]),this.eventCheckStatus=!1,!0;if(this.roomWarpZone.includes(e))return this.warpEventTriggered(1,e),this.eventCheckStatus=!1,!0;if(this.colliderShiftActive=this.colliderCurObjHit!=e||this.colliderShiftActive,this.colliderPrevObjHit=this.colliderCurObjHit,this.colliderCurObjHit=e,this.colliderShiftActive=this.colliderShiftActive||!(1==this.colliderAdjustPerc||0==this.colliderAdjustPerc),this.colliderShiftActive&&this.colliderCurObjHit){var t=1;this.colliderCurObjHit.includes("AudioTrigger")&&(t=-1),this.colliderAdjustPerc=Math.min(1,Math.max(0,this.colliderAdjustPerc+this.colliderAdjustRate*t));var i=1-this.colliderAdjustPerc,s=1;if("AudioTrigger_1"==this.colliderCurObjHit)this.pxlEnv.currentAudioZone=1,s-=i*this.uniformScalars.darkBase,this.uniformScalars.exposureUniformBase=s;else if("AudioTrigger_2"==this.colliderCurObjHit){this.pxlEnv.currentAudioZone=2;s=this.uniformScalars.curExp+i*this.uniformScalars.brightBase*1,this.uniformScalars.exposureUniformBase=s,this.proximityScaleTrigger=!0,this.pxlAudio.setFadeActive(-1);}else this.pxlEnv.currentAudioZone=0,s=s*(1-i)+this.uniformScalars.exposureUniformBase*i;if(this.colliderShiftActive=!(1==this.colliderAdjustPerc||0==this.colliderAdjustPerc),"AudioTrigger_2"==this.colliderPrevObjHit&&this.colliderCurObjHit!=this.colliderPrevObjHit&&(this.proximityScaleTrigger=!0,this.pxlAudio.setFadeActive(1)),this.pxlDevice.mobile&&(s=this.colliderAdjustPerc),this.pxlEnv.updateCompUniforms(s),this.proximityScaleTrigger&&!this.pxlDevice.mobile&&!this.pxlAutoCam.enabled){var a=this.colliderAdjustPerc;a=1-(1-a)*(1-a),this.pxlEnv.fogMult.x=a,this.colliderShiftActive||(this.proximityScaleTrigger=!1);}this.eventCheckStatus=this.colliderShiftActive;}}itemCheck(e,t){if(!t)return !1;var i=e.split("_").shift();if(this.pxlUser.itemListNames.includes(e)&&this.pxlUser.checkItemPickUp(i))return this.itemActive(i,e);return !1}itemTrigger(){if(this.pxlUser.itemActiveTimer.length>0)this.pxlUser.itemActiveTimer[0]=this.pxlTimer.curMS;else {0==this.pxlUser.mPick.length&&(this.pxlUser.mPick=this.pxlUtils.randomizeArray(["LizardKing","StarField","InfinityZoom"]));var e=this.pxlUser.mPick.pop();this.pxlUser.checkItemPickUp(e),this.itemActive(e);}}itemActive(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(null==e)return !1;var i=this.pxlTimer.prevMS+this.pxlUser.itemRunTime,s="",a="";if("LowGravity"==e)a="Low Gravity",s="this.lowGrav=0;this.itemGroupList['"+t+"'].visible=true;",i=this.pxlTimer.prevMS+this.pxlUser.itemRunTime;else if("LizardKing"==e)a="I am the Lizard King",s="this.lKing=0;this.lKingWarp.set(...this.lKingInactive);this.lKingPass.enabled=false;"+(!this.pxlDevice.mobile&&"this.itemGroupList['"+t+"'].visible=true;"),i=this.pxlTimer.prevMS+this.pxlUser.itemRunTime;else if("StarField"==e)a="Major Tom",s="this.sField=0;this.sFieldPass.enabled=false;"+(!this.pxlDevice.mobile&&"this.itemGroupList['"+t+"'].visible=true;"),i=this.pxlTimer.prevMS+this.pxlUser.itemRunTime;else {if("InfinityZoom"!=e)return !1;a="Fractal Substrate",s="this.iZoom=0;this.iZoomPass.enabled=false;"+(!this.pxlDevice.mobile&&"this.itemGroupList['"+t+"'].visible=true;this.pxlEnv.mapComposerWarpPass.needsSwap=true;this.pxlEnv.mapComposerWarpPass.enabled=false;"),i=this.pxlTimer.prevMS+this.pxlUser.itemRunTime,this.pxlEnv.mapComposerWarpPass.needsSwap=!0,setTimeout((()=>{this.pxlEnv.mapComposer.render(),this.pxlEnv.roomComposer.render(),setTimeout((()=>{this.pxlEnv.mapComposerWarpPass.needsSwap=!1,this.pxlEnv.mapComposerWarpPass.enabled=!0;}),500);}),500);}return this.pxlGuiDraws.buildItemHud(e,a),this.pxlDevice.mobile||(this.pxlUser.itemGroupList[t].visible=!1),this.pxlUser.itemInactiveCmd.push(s),this.pxlUser.itemActiveTimer.push(i),this.pxlUser.itemActiveList.push(a),!0}toggleMovement(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;null==e&&(e=!this.canMove),this.canMove=e;}updateMovement(e){if(this.canMove){var t=[0,0],i=[...this.pxlDevice.directionKeysPressed],s=0,a=0,r=[e-this.pxlDevice.keyDownCount[0],e-this.pxlDevice.keyDownCount[1]],n=this.mobile?1:0;if(i[0]+i[2]==1){s=i[2]-i[0];var o=this.pxlQuality.settings.leftRight?this.cameraEasing[n]:.5*(1-Math.min(1,Math.abs(.3*this.cameraMovement[1])));t[0]=((this.pxlQuality.settings.leftRight?1:6)+r[0]*r[0]*.1)*o,t[0]=Math.min(this.pxlDevice.shiftBoost,t[0])*this.movementScalar;}else this.pxlDevice.keyDownCount[0]=e;if(i[1]+i[3]==1){a=i[3]-i[1];var l=(1-Math.min(1,Math.abs(.07*this.cameraMovement[0])))*this.cameraEasing[n];t[1]=r[1]*(3*r[1]+2+this.pxlDevice.shiftBoost)*.15*l,t[1]=Math.min(this.pxlDevice.shiftBoost,t[1])*this.movementScalar;}else this.pxlDevice.keyDownCount[1]=e;this.cameraMovement[0]+=s*t[0],this.cameraMovement[1]+=a*t[1];}}initFrameCamPosition(){var e=this.cameraPos.clone();if(this.cameraBooted){var t;t=new b.Vector3(this.pxlQuality.settings.leftRight?.5*this.cameraMovement[0]:0,0,this.cameraMovement[1]),this.cameraMoveLength=t.length(),t.applyQuaternion(this.camera.quaternion);var i=this.cameraMoveLength*this.cameraMoveLengthMult;if(0!=i){i=i>0?Math.max(.1,i):Math.min(-.1,i);}t.normalize().multiply(new b.Vector3(1,0,1)).multiplyScalar(i),e.add(t),this.cameraMovement[0]=Math.abs(this.cameraMovement[0])<this.posRotEasingThreshold?0:this.cameraMovement[0]*this.cameraMovementEase,this.cameraMovement[1]=Math.abs(this.cameraMovement[1])<this.posRotEasingThreshold?0:this.cameraMovement[1]*this.cameraMovementEase,e.y=this.cameraPos.y+this.cameraJumpVelocity,this.workerActive&&(this.cameraJumpVelocity=0);}else this.cameraAimTarget.position.set(0,0,0),this.cameraPrevPos=new b.Vector3(e.clone()),this.cameraPrevLookAt=new b.Vector3(0,0,1);return this.cameraCross=new b.Vector3(1,0,0).applyQuaternion(this.camera.quaternion),e}applyGravity(e){if(this.gravityActive){this.maxStepHeight,this.gravityRate;if(e.y<this.nearestFloorHit.y){var t=this.nearestFloorHitPrev;e.y=Math.max(t.y,e.y),e.y<0&&(e.x=t.x,e.z=t.z);}else e.y=Math.max(this.nearestFloorHit.y,e.y-this.gravityRate),e.y==this.nearestFloorHit.y&&e.y<this.cameraPrevPos.y&&this.jumpLanding();}else {if(e.distanceTo(this.nearestFloorHit)<this.maxStepHeight)e.y=this.nearestFloorHit.y;else {var i=(e=this.cameraPos.clone()).y>this.nearestFloorHit.y;this.gravityActive=i,this.colliderFail=!i,this.workerFunc("jumpLanding");}}return e}getStandingHeight(){return this.standingHeight*this.userScale}getUserHeight(){var e=Math.min(1,Math.abs(this.cameraMovement[1]));this.walkBouncePerc=this.walkBouncePerc>=1?1:this.walkBouncePerc+.05,this.walkBounce+=.1*e,this.walkBouncePerc=.9*this.walkBouncePerc+e,this.walkBouncePerc<.03&&(this.walkBouncePerc=0,this.walkBounce=0,this.walkBounceSeed=2351.3256*Math.random());var t=Math.sin(.4*this.walkBounce+this.walkBounceSeed+.2*this.cameraMovement[1])*this.walkBouncePerc*.3;return this.getStandingHeight()-this.standingHeightGravInfluence+t}camApplyMobileRotation(){if(null!=this.cameraPose.alpha){var e=.017453292519943278,t=2.23606797749979,i=new b.Quaternion,s=this.cameraPose.alpha*e+this.cameraPose.alphaOffset+2.1,a=this.cameraPose.beta*e,r=this.cameraPose.gamma*e,n=new b.Vector3(0,0,1),o=new b.Quaternion,l=new b.Quaternion(-t,0,0,t),h=new b.Euler;h.set(a,s,-r,"YXZ"),i.setFromEuler(h),i.multiply(l),i.multiply(o.setFromAxisAngle(n,-this.cameraPose.orientation)),i.normalize();var d=new b.Quaternion;b.Quaternion.slerp(this.camera.quaternion,i,d,.35);var c=(new b.Euler).setFromQuaternion(d);c.x=Math.max(-.95*Math.PI/2,Math.min(.95*Math.PI/2,c.x)),d.setFromEuler(c),this.camera.setRotationFromQuaternion(d);}}updateRoamCameraRotation(){if(null==this.cameraPose.alpha){var e=this.pxlDevice.gyroGravity[2];new b.Vector3(0,0,1),new b.Quaternion;this.pxlDevice.touchMouseData.velocity.y=Math.min(500*this.pi,Math.max(500*-this.pi,this.pxlDevice.touchMouseData.velocity.y));var t,i=new b.Euler;this.pxlDevice.mobile?(i.set(this.pxlDevice.touchMouseData.netDistance.y/this.pxlDevice.sH*2,this.pxlDevice.touchMouseData.netDistance.x/this.pxlDevice.sW*2,0,"YXZ"),(t=new b.Quaternion).setFromEuler(i),t=this.pxlDevice.touchMouseData.initialQuat.clone().multiply(t)):(i.set(.005*this.pxlDevice.touchMouseData.velocity.y,.008*this.pxlDevice.touchMouseData.velocity.x+e,0,"YXZ"),(t=new b.Quaternion).setFromEuler(i),t=this.camera.quaternion.clone().multiply(t)),t.normalize();var s=new b.Vector3(0,0,-10).applyQuaternion(t).add(this.camera.position);this.camera.setRotationFromQuaternion(t),this.camera.lookAt(s),this.camera.up.set(0,1,0);}}updateStaticCameraRotation(){var e=1;this.touchBlender?(e=Math.min(1,Math.max(0,this.pxlTimer.curMS-this.pxlDevice.touchMouseData.releaseTime)),e*=e,this.pxlDevice.touchMouseData.netDistance.multiplyScalar(1-e),this.touchBlender=e<1):this.pxlDevice.touchMouseData.netDistance.multiplyScalar(.5);var t=new b.Euler;t.set(this.pxlDevice.touchMouseData.netDistance.y/this.pxlDevice.sH*2,this.pxlDevice.touchMouseData.netDistance.x/this.pxlDevice.sW*2,0,"YXZ");var i=(new b.Quaternion).clone(this.camera.quaternion);i.setFromEuler(t),(i=this.camera.quaternion.clone().multiply(i)).normalize(),this.touchBlender&&i.slerp(this.camera.quaternion.clone(),e).normalize();var s=new b.Vector3(0,0,-10).applyQuaternion(i).add(this.camera.position);this.camera.setRotationFromQuaternion(i),this.camera.lookAt(s),this.camera.up.set(0,1,0);}lookAtTargetLock(){if(this.lookAtTargetActive&&this.lookAtTargetActive&&(0!=this.lookAtLockFader&&(this.lookAtLockPerc+=(this.lookAtLockFader+Math.min(1,.001*this.pxlDevice.touchMouseData.velocity.length()))*this.lookAtLockFadeRate,(this.lookAtLockPerc<0||this.lookAtLockPerc>1)&&(this.lookAtLockPerc=this.lookAtLockPerc<0?0:1,this.lookAtLockFader=0),this.lookAtPerc.x=this.lookAtLockPerc),this.lookAtLockPerc>0)){var e=this.camera.quaternion.clone();this.camera.lookAt(this.cameraAimTarget.position);var t=this.camera.quaternion.clone();1==this.lookAtLockPerc?this.camera.setRotationFromQuaternion(t):this.camera.setRotationFromQuaternion(t.slerp(e,.5*Math.cos(this.lookAtLockPerc*pi)+.5));}}warpEventTriggered(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"init";this.warpActive||(this.pxlEnv.mapComposerWarpPass.needsSwap=!0,this.warpType=e,this.warpObj=t,this.warpTarget=i,this.warpActive=!0,this.pxlEnv.initWarpVisual(e));}warpCamRun(){if(0==this.warpType)this.setToObj(this.warpObj);else if(1==this.warpType){var e="init"==this.warpTarget;this.warpToRoom(this.warpObj,e,this.warpTarget);}this.pxlEnv.setExposure(this.uniformScalars.exposureUniformBase),this.warpObj=null,this.warpTarget=null,this.warpActive=!1;}lowQualityUpdates(){if(this.HDRView){var e=new b.Vector3(0,0,-1).applyQuaternion(this.camera.quaternion),t=e.clone().multiply(new b.Vector3(1,0,1)).normalize();this.camRotPitch.set(.1591549430918955*-Math.atan2(t.x,t.z),.5*e.y);}}midQualityUpdates(){if(this.pxlQuality.settings.motion){var e,t=new b.Vector3(0,0,0);if(t.applyQuaternion(this.camera.quaternion),this.camRotXYZ.multiplyScalar(.8).add(t.multiplyScalar(.2)),this.pxlDevice.mobile){var i=.5*sW,s=.5*sH,a=new b.Vector3(0,0,10),r=new b.Vector3(0,0,10);a.applyQuaternion(this.camera.quaternion.clone()).project(this.camera),r.applyQuaternion(this.prevQuaternion).project(this.camera),a.x=(a.x+1)*i,a.y=-(a.y-1)*s,r.x=(r.x+1)*i,r.y=-(r.y-1)*s;(e=r.clone().sub(a.clone()).multiplyScalar(.6).multiply(new b.Vector3(this.pxlDevice.screenRes.x,this.pxlDevice.screenRes.y,0))).length>.1&&e.normalize().multiplyScalar(.1);}else e=this.pxlDevice.touchMouseData.velocity.clone().multiplyScalar(Math.max(this.pxlDevice.screenRes.x,this.pxlDevice.screenRes.y));var n=new b.Vector2(e.x,-e.y),o=new b.Vector2(0,0).lerpVectors(this.pxlEnv.blurDirPrev,n,.85);this.pxlEnv.blurDirPrev.set(this.pxlEnv.blurDirCur),this.pxlEnv.blurDirCur.set(o);}}emitCameraTransforms(e,t){}jogServerMemory(){var e=this.cameraPos.clone(),t=this.getUserHeight();this.emitCameraTransforms(e,t,!0);}updateCamera(){this.updateStaticCameraRotation();var e=this.pxlDevice.touchMouseData.velocity.length();if(this.pxlDevice.touchMouseData.curFadeOut.multiplyScalar(.7),this.camUpdated||0!=e||this.pxlDevice.touchMouseData.active){this.camUpdated=!1;this.updateDeviceValues(e),this.pxlUser.localUserTurned=0==this.pxlDevice.touchMouseData.velocity.length(),this.prevQuaternion.copy(this.camera.quaternion);var t=this.initFrameCamPosition(),i=this.getUserHeight();if(this.canMove){if(this.pxlEnv.currentRoom==this.pxlEnv.mainRoom){t=this.mainColliderCheck(t,null);}else t=this.roomColliderCheck(t,i);this.updateGravity(),this.colliderValid||this.colliderValidityChecked?this.jump=0:this.jump=this.checkColliderValid(t),this.eventCheckStatus=!0,t=this.applyGravity(t),this.pxlUser.localUserMoved=this.gravityActive||(this.cameraMovement[0]**2+this.cameraMovement[1]**2)**.5>0,this.cameraPrevPos=this.cameraPos.clone(),this.cameraPos=t.clone(),t.y+=i,this.camera.position.copy(t);}this.canMove?this.updateRoamCameraRotation():this.updateStaticCameraRotation(),this.camera.updateMatrixWorld(),this.emitCameraTransforms(t,i),this.cameraBooted=!0;}else this.pxlUser.localUserMoved=!1,this.pxlUser.localUserTurned=!1;}},AutoCamera:class AutoCamera{constructor(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.enabled=e,this.active=!1,this.mobile=null,this.pxlTimer=null,this.pxlUtils=null,this.pxlDevice=null,this.pxlAudio=null,this.pxlCamera=null,this.pxlEnv=null,this.camera=null,this.netDistance=new b.Vector2,this.prevCamChange=0,this.nextCamChange=0,this.delayRange=[25,45],this.autoCamActive=!1,this.autoCamMode=0,this.autoCamPaths={},this.resetAutoCam=!0,this.autoCamPrevPos=null,this.autoCamPrevLookAt=null,this.touchBlender=!1,this.autoCamId=0,this.camMode=0,this.curModeCount=0,this.curRoom="",this.curRoomIndex=0,this.curPath=0,this.roomList=[],this.pathCounts={},this.forceNewRoom=!1,this.curRoomCount=0,this.avatarMin=0,this.avatarValid=!1,this.curAvatar=null,this.clusterReturn=!1,this.curCluster=[],this.clusterValid=2,this.clusterRotation=0,this.clusterRotRate=.005;}setDependencies(pxlNav){this.pxlTimer=pxlNav.pxlTimer,this.pxlUtils=pxlNav.pxlUtils,this.pxlDevice=pxlNav.pxlDevice,this.pxlAudio=pxlNav.pxlAudio,this.pxlCamera=pxlNav.pxlCamera,this.pxlEnv=pxlNav.pxlEnv,this.camera=pxlNav.pxlCamera.camera;}init(){this.active=this.enabled||this.mobile,this.autoCamActive=this.autoCamActive||this.mobile;var{roomList:e,pathCounts:t}=this.getAutoCamData();this.roomList=e,this.curRoom=this.roomList[0],this.pathCounts=t,this.setRoom(!1,!0),this.getNextPath(),this.checkStatus();}step(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(null==this.autoCamActive||null==this.active)return this.autoCamActive=!1,this.active=!1,!0;if(0==this.active){if(!this.autoCamActive)return !0;this.updateAutoCamera();}if((this.pxlTimer.curMS>=this.nextCamChange||e)&&this.active&&!this.pxlDevice.touchMouseData.active){if(!e||!this.enabled){var t=this.checkCamMode();this.setNextTrigger(t);}this.curAvatar=0,this.camera.up.set(0,1,0),this.pxlDevice.touchMouseData.netDistance.multiplyScalar(0),1==this.camMode||2==this.camMode?this.setCamMode(0):(this.curCluster=[],this.stepDroneCam()),this.setAutoCamMode(this.camMode);}return this.updateAutoCamera(),this.applyTouchRotate(),!1}checkCamMode(){var e=this.camMode;return this.camMode=0,this.enabled&&this.active?(this.camMode!=e&&0==this.camMode&&(this.forceNewRoom=!0),1):1}setCamMode(e){1==e.type||2==e.type||(this.camMode=0,this.forceNewRoom=!0),this.step(!0);}stepDroneCam(){var e=!0,t=Math.random(this.nextCamChange),i=this.pathCounts[this.pxlEnv.currentRoom];this.curRoomCount>=2*i&&(this.forceNewRoom=!0),(t<.3||this.forceNewRoom)&&(this.setRoom(),e=!1),this.curRoomCount+=1,this.getNextPath(e);}setRoom(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(this.active||this.autoCamActive){var i=this.curRoomIndex,s=this.roomList.length;this.pxlEnv.postIntro?t||(e||(i=Math.floor(Math.random()*s))==this.curRoomIndex)&&(i=(i+1)%s):i=0,this.curRoomIndex=i,this.curRoom!=this.roomList[i]&&(this.curRoom=this.roomList[i],this.forceNewRoom=!1,this.curRoomCount=0,this.pxlCamera.warpEventTriggered(1,this.curRoom,"init"));}}setNextTrigger(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=Math.random(this.nextCamChange);t=(this.delayRange[1]-this.delayRange[0])*t+this.delayRange[0],this.nextCamChange=this.pxlTimer.curMS+t*e;}getNextPath(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if(this.autoCamPaths.hasOwnProperty(this.pxlEnv.currentRoom)){var i=this.autoCamPaths[this.pxlEnv.currentRoom].length;if(this.curPath=(this.curPath+t)%i,e&&0==t){var s=Math.random(this.nextCamChange);s=Math.floor(s*this.autoCamPaths[this.pxlEnv.currentRoom].length),this.curPath==s&&(s=(s+1)%i),this.curPath=s;}else this.curPath=this.curPath<0?i-1:this.curPath,this.setNextTrigger(1);this.setAutoCamPath(this.curPath);}}checkStatus(){(this.autoCamActive||this.pxlDevice.mobile||this.active)&&this.toggleAutoCam(!0);}preAutoCamToggle(){this.autoCamActive||"AudioTrigger_2"==this.pxlCamera.colliderCurObjHit&&(this.pxlCamera.proximityScaleTrigger=!0,this.exposureShiftActive=!0),this.toggleAutoCam();}setAutoCamMode(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.autoCamMode=e,1==e&&(this.resetAutoCam=!0);}setPosQuat(e,t){this.camera.quaternion.copy(t),this.camera.position.copy(e),this.pxlCamera.updateCameraMatrices(),this.pxlCamera.camUpdated=!0;}toggleAutoCam(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if(this.pxlEnv.fogMult.x=1,this.autoCamPaths[this.pxlEnv.currentRoom]){this.curRoom=this.pxlEnv.currentRoom;var i=this.autoCamPaths[this.pxlEnv.currentRoom].length;isNaN(this.autoCamId)&&(this.autoCamId=i-1);var s=this.autoCamActive;if(this.autoCamActive=null==e&&i>0?!this.autoCamActive:e,this.autoCamActive=this.mobile||this.autoCamActive,!s&&this.autoCamActive&&(this.netDistance=(new b.Vector2).copy(this.pxlDevice.touchMouseData.netDistance)),this.pxlDevice.touchMouseData.netDistance.multiplyScalar(0),this.autoCamActive){this.pxlCamera.resetGravity(),this.autoCamId=(this.autoCamId+t)%i,this.autoCamId=this.autoCamId<0?i-1:this.autoCamId;var a=this.autoCamPaths[this.pxlEnv.currentRoom][this.autoCamId];this.totalLoopDuration=a.position.userData.duration;try{this.autoCamPositions=a.position.geometry.attributes.position,this.autoCamLookAt=a.lookAt.geometry.attributes.position,a.up?this.autoCamUp=a.up.geometry.attributes.position:(this.autoCamUp=null,this.camera.up.set(0,1,0)),this.numControlPoints=this.autoCamPositions.array.length/3,this.autoCamStartTime=this.pxlTimer.curMS-this.totalLoopDuration*Math.random();}catch(e){}}else this.setPosQuat(this.pxlCamera.cameraPrevPos.clone(),this.pxlCamera.prevQuaternion.clone()),this.pxlDevice.touchMouseData.netDistance.copy(this.netDistance);}}prevNextAutoCam(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.autoCamActive&&(this.enabled&&this.active&&!t?this.nextCamChange=this.pxlTimer.curMS:this.toggleAutoCam(!0,e));}setAutoCamPath(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.autoCamActive&&(this.autoCamId=e,this.toggleAutoCam(!0,0));}getAutoCamData(){var e=Object.keys(this.autoCamPaths),t={};return e.forEach((e=>{t[e]=this.autoCamPaths[e].length;})),{roomList:e,pathCounts:t}}getAutoCamValueFromCurve(e,t,i){var s=e[3*t],a=e[3*t+1],r=e[3*t+2],n=(t+1)%this.numControlPoints,o=e[3*n],l=e[3*n+1],h=e[3*n+2],d=new b.Vector3(s,a,r),c=new b.Vector3(o,l,h);return d.lerp(c,i),d}updateAutoCamera(){if(this.autoCamPositions&&this.autoCamPositions.array){var e=(this.pxlTimer.curMS-this.autoCamStartTime)%this.totalLoopDuration/this.totalLoopDuration;e*=this.numControlPoints-1;var t=Math.floor(e),i=e-t,s=this.getAutoCamValueFromCurve(this.autoCamPositions.array,t,i,!1);this.camera.position.copy(s);var a=this.getAutoCamValueFromCurve(this.autoCamLookAt.array,t,i);if(this.camera.lookAt(a),this.autoCamUp){var r=this.getAutoCamValueFromCurve(this.autoCamUp.array,t,i);r=r.sub(s).normalize(),this.camera.up.copy(r);}}}applyTouchRotate(){var e=1;this.touchBlender?(e=Math.min(1,Math.max(0,this.pxlTimer.curMS-this.pxlDevice.touchMouseData.releaseTime)),e*=e,this.pxlDevice.touchMouseData.netDistance.multiplyScalar(1-e),this.touchBlender=e<1):this.pxlDevice.touchMouseData.netDistance.multiplyScalar(.5);var t=new b.Euler;t.set(this.pxlDevice.touchMouseData.netDistance.y/this.pxlDevice.sH*2,this.pxlDevice.touchMouseData.netDistance.x/this.pxlDevice.sW*2,0,"YXZ");var i=(new b.Quaternion).clone(this.camera.quaternion);i.setFromEuler(t),(i=this.camera.quaternion.clone().multiply(i)).normalize(),this.touchBlender&&i.slerp(this.camera.quaternion.clone(),e).normalize();var s=new b.Vector3(0,0,-10).applyQuaternion(i).add(this.camera.position);this.camera.setRotationFromQuaternion(i),this.camera.lookAt(s),this.camera.up.set(0,1,0);}},Extensions:_.Extensions,MusicUtils:class MusicUtils{constructor(){this.audioObject=null;}},Audio:class Audio{constructor(){this.pxlTimer=null,this.pxlVideo=null,this.pxlDevice=null,this.pxlEnv=null,this.pxlGuiDraws=null,this.pxlSocket=null,this.active=!1,this.audioTimer=new b.Vector3(0,0,0),this.audioEq=new b.Vector4(0,0,0,0),this.audioWorker=null,this.audioProcessor=null,this.djUrlSource="//",this.djMuted=!1,this.djAudioVolume=0,this.djAudioVolumeMax=.65,this.djAudioVolumeMin=.25,this.djAudioVolumeScalar=.25,this.djAudioObj=null,this.djTimecodeObj=null,this.djVolumeParentObj=null,this.djVolumeObj=null,this.roomAudioStopped=!0,this.videoStreamObjects=[],this.colliderVolActive=!1,this.isVideoObject=!1,this.activeObject=null,this.fadeActive=!1,this.fadeAdjustRate=.02,this.fadeDir=0,this.fadePerc=0,this.audioContext=null;}setDependencies(pxlNav){this.pxlTimer=pxlNav.pxlTimer,this.pxlVideo=pxlNav.pxlVideo,this.pxlDevice=pxlNav.pxlDevice,this.pxlEnv=pxlNav.pxlEnv,this.pxlGuiDraws=pxlNav.pxlGuiDraws,this.pxlSocket=pxlNav.pxlSocket;}init(){this.active=!0;}postBoot(){if(this.djAudioObj){if(this.pxlEnv.pxlAutoCam.enabled)this.djAudioVolumeMax=1,this.djAudioVolumeMin=0;else if(this.pxlEnv.mobile){var e=this,t=this.djAudioVolumeMax,i=document.getElementById("guiMobileWelcomeButton");function audioClickMonitor(a){setTimeout((()=>{e.djAudioVolume=0,e.djAudioVolumeMax=t,e.djAudioVolumeMin=0,e.djAudioObj.byScript=!0,e.djAudioObj.volume=0,s.play().then((()=>{e.djPlayerMuteToggle(!1),e.setFadeActive(.5);})),i.removeEventListener("click",audioClickMonitor),i.removeEventListener("touchstart",audioClickMonitor);}),500);}i.addEventListener("click",audioClickMonitor),i.addEventListener("touchstart",audioClickMonitor);}this.djAudioVolume=this.pxlEnv.enabled?0:this.djAudioVolumeMin,this.djAudioObj.volume=this.pxlEnv.enabled?0:this.djAudioVolumeMin,this.djPlayerMuteToggle(!1),this.djPlayerAdjustVolume({}),this.djPlayerSetSliderGui();var s=this.djAudioObj;s.setAttribute("autoplay",!0);var a=this;this.djAudioObj.addEventListener("volumechange",(e=>{a.djPlayerSetSliderGui();}),!0);}}start(){}step(){this.djAudioObj&&this.djAudioObj.paused&&(this.djAudioObj.play().catch((e=>{})),this.djAudioObj.muted=this.djMuted||!this.roomAudioStopped),this.fadeAudioEvent();}isPaused(){var e=!0;return this.djAudioObj&&(e=this.djAudioObj.paused),e}pausePlayback(){this.active=this.pxlTimer.active,this.active?this.play():this.stop();}initPlay(){this.pxlVideo.canUnmute("dj")&&!this.isPaused()&&(this.djPlayerMuteToggle(!1),this.setFadeActive(1),this.pxlDevice.mobile&&this.pxlGuiDraws.toggleIcon(this.pxlGuiDraws.hudIcons.musicIcon,!this.djMuted,!0));}play(){if(this.active=!0,this.isVideoObject)this.pxlVideo.setVolume("dj",this.djAudioVolume),this.pxlVideo.setMuted("dj",this.djMuted);else {this.djAudioObj.byScript=!0;var e=this.djAudioObj;e.children[0].setAttribute("src",this.djUrlSource),setTimeout((()=>{e.load(),setTimeout((()=>{e.volume=this.djAudioVolume,e.muted=this.djMuted||!this.roomAudioStopped,e.paused&&e.play();}),20);}),20);}}stop(){if(this.active=!1,this.isVideoObject)this.pxlVideo.setMuted("dj",!0);else {var e=this.djAudioObj;e.children[0].setAttribute("src",""),e.pause(),setTimeout((()=>{e.load();}),20);}}djBuildPlayer(){this.djAudioObj=document.getElementById("djStream"),this.djVolumeParentObj=document.getElementById("djPlayerVolumeParent"),this.djVolumeObj=document.getElementById("djPlayerVolume"),this.djAudioObj.byScript=!1,this.djAudioObj.volume=0,this.djVolumeObj.style.width="0%";var e=this;this.pxlDevice.objectPercList.push("djPlayerVolume"),this.pxlDevice.objectPercList.push("djPlayerVolumeParent"),this.pxlDevice.objectPercFuncList.djPlayerVolumeParent=t=>{e.djPlayerAdjustVolume(t);},this.djVolumeParentObj.down=!1,this.djVolumeParentObj.addEventListener("mousedown",(t=>{e.djVolumeParentObj.down=!0,e.djPlayerAdjustVolume(t);})),this.djVolumeParentObj.addEventListener("mousemove",(t=>{e.djPlayerAdjustVolume(t);})),this.djVolumeParentObj.addEventListener("mouseup",(t=>{e.djVolumeParentObj.down=!1;})),this.pxlDevice.mobile&&(this.djVolumeParentObj.style.width="30vw",this.djVolumeParentObj.addEventListener("touchstart",(t=>{e.djVolumeParentObj.down=!0;}),{passive:!0}),this.djVolumeParentObj.addEventListener("touchmove",(t=>{e.djPlayerAdjustVolume(t);}),{passive:!0}),this.djVolumeParentObj.addEventListener("touchend",(t=>{e.djVolumeParentObj.down=!1;}),{passive:!0})),this.djAudioObj.muted=!0,this.prepAudioProcessor();}prepAudioProcessor(){}stepAudioProcessor(){}recieveAudioProcessor(e){}buildRemoteAudioMixer(e,t){return !1}loadStreamPromise(){var e=this.djAudioObj;return new Promise(((t,i)=>{this.djAudioObj.byScript=!0,e.children[0].setAttribute("src",this.djUrlSource),e.load(),e.muted=this.djMuted||!this.roomAudioStopped;})).then((()=>{})).catch((e=>{console.log("error source");}))}djPlayerSetSliderGui(){this.djAudioObj.byScript||!this.pxlEnv.postIntro||this.pxlEnv.pxlAutoCam.enabled?this.djAudioObj.byScript=!1:(this.fadeActive=!1,this.djAudioVolumeMax=this.djAudioVolume,this.djAudioVolumeMin=this.djAudioVolume*this.djAudioVolumeScalar),this.djVolumeObj.style.width=100*this.djAudioVolume*~~!this.djMuted+"%";}djPlayerAdjustVolume(e){if(this.djVolumeParentObj.down||this.djVolumeParentObj.down&&e.touches){var t=this.djVolumeParentObj.offsetWidth,i=0;i=e.touches?this.pxlDevice.objectPerc.percX:e.offsetX/t;var s=Math.max(0,Math.min(1,i));this.djAudioVolume=s,this.djAudioVolumeMax=s,this.djAudioVolumeMin=.1*s,s*=s,this.djAudioObj&&(this.djAudioObj.volume=s),e.touches&&this.djPlayerSetSliderGui();}this.pxlVideo&&this.pxlEnv.posted&&this.pxlVideo.setVolume("dj",this.djAudioVolume);}djPlayerMuteToggle(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.djMuted=null==e?!this.djMuted:e,null!=e&&this.pxlGuiDraws.toggleIcon(this.pxlGuiDraws.hudIcons.musicIcon,!e,!0),this.djAudioObj&&(this.djAudioObj.muted=this.djMuted,this.djAudioObj.byScript=!0,this.djAudioObj.volume=this.djAudioObj.volume),this.pxlVideo&&this.pxlEnv.posted&&this.pxlVideo.setMuted("dj",this.djMuted);}setFadeActive(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;this.fadeDir!=e&&(this.fadeDir=e,this.fadeActive=!0);}fadeAudioEvent(){if(this.djVolumeParentObj&&!this.djVolumeParentObj.down&&this.fadeActive&&this.pxlEnv.postIntro){if(this.fadePerc+=this.fadeAdjustRate*this.fadeDir,this.fadePerc<0||this.fadePerc>1)return this.fadePerc=1==this.fadeDir?1:0,void(this.fadeActive=!1);var e=(this.djAudioVolumeMax-this.djAudioVolumeMin)*this.fadePerc+this.djAudioVolumeMin;this.djAudioVolume=e,e*=e,this.djAudioObj&&(this.djAudioObj.byScript=!0,this.djAudioObj.volume=e),this.pxlVideo.setVolume("dj",this.djAudioVolume);}}},Video:class Video{constructor(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;this.pxlUtils=t,this.pxlAudio=i,this.pxlFile=s,this.pxlGuiDraws=a,this.pxlEnv=null,this.posted=!1,this.djStreamUrl="",this.performerStreamUrl="",this.screenVideoBlock=null,this.screenVideos={},this.videoStreams={},this.videoStreamFailCount=0,this.videoStreamFailMax=5,this.videoAudioEvent={dj:!1,performer:!1},this.checkForDjStream=!1,this.checkForPerformerStream=!1,this.videoStills={dj:{texture:null,url:e+"SoftNoise_512.jpg"},performer:{texture:null,url:e+"SoftNoise_512.jpg"}};}init(){this.buildVideoBlock(),this.buildPromoVideos();}buildVideoBlock(){if(null==this.screenVideoBlock){var e=document.createElement("div");e.classList.add("videoScreenBlockStyle"),document.body.appendChild(e),this.screenVideoBlock=e;}}buildPromoVideos(){[].forEach((e=>{var t=e.name,i=e.type,s=e.intensity,a=e.boost,r=e.file,n=e.landscape,o=this.pxlFile.vidRoot+r,l=document.createElement("video");l.id="screenVideo_"+t+"_"+(n?"port":"land"),l.src=o,l.classList.add("bgMediaAssets"),l.controls=!1,l.muted=!0,l.preload="true",l.setAttribute("autoplay",""),l.setAttribute("muted",""),l.setAttribute("playsinline",""),l.setAttribute("loop",""),this.screenVideoBlock.appendChild(l),this.screenVideos[t]||(this.screenVideos[t]={}),this.screenVideos[t].name=t,this.screenVideos[t].type=i,s&&(this.screenVideos[t].intensity=s),a&&(this.screenVideos[t].boost=a);var h=this.screenVideos[t].file||[];this.screenVideos[t].file?h[~~n]=o:h=[o,o],this.screenVideos[t].file=h;var d=this.pxlUtils.getVideoTexture(l),c=this.screenVideos[t].texture||[];this.screenVideos[t].texture?c[~~n]=d:c=[d,d],this.screenVideos[t].texture=c;var u=[];this.screenVideos[t].videoObjs?u[~~n]=l:u=[l,l],this.screenVideos[t].videoObjs=u;}));}boot(){var e=this;return Video_asyncToGenerator((function*(){e.videoAudioEvent.dj?e.buildVideoPlayer("dj"):e.videoStills.dj.texture=e.pxlUtils.loadTexture(e.videoStills.dj.url);}))()}buildVideoPlayer(e){var t=this,i=document.createElement("video");i.id="antibodyDjStream",i.classList.add("bgMediaAssets"),i.controls=!1,i.volume=0,i.muted=!0,i.setAttribute("autoplay","true"),i.setAttribute("playsinline","true"),i.addEventListener("volumechange",(e=>{i.volume=Math.min(i.volume,t.pxlAudio.djAudioVolume);}),!0),this.screenVideoBlock.appendChild(i),this.videoStreams[e]={},this.videoStreams[e].mode=0,this.videoStreams[e].active=!1,this.videoStreams[e].loading=!1,this.videoStreams[e].checkResolve=!1,this.videoStreams[e].prevCheck=this.pxlUtils.curMS+5,this.videoStreams[e].delayCheck=5,this.videoStreams[e].obj=i,this.videoStreams[e].url=this.djStreamUrl,this.videoStreams[e].urlStatus=!1,this.videoStreams[e].player=null,this.videoStreams[e].checkScreens=!1,this.videoStreams[e].activeLevel=-1,this.videoStreams[e].prevFrame=0,this.videoStreams[e].prevFrameCount=0,this.videoStreams[e].canvasObj=null,this.videoStreams[e].videoTexture=this.getTexture(e),this.pxlFile.urlExists(this.djStreamUrl).then((t=>{this.videoStreams[e].urlStatus=t;})),this.buildVideoStream(e,!1);}postBoot(e){this.videoStreams[e]&&this.videoStreams[e].urlStatus&&this.load(e,this.videoStreams[e].url),this.posted=!0,this.checkForDjStream=this.videoAudioEvent.dj;}step(){var e=!1,t="dj";if(this.videoAudioEvent[t]){var i=this.videoStreams[t];i&&(i.active||this.checkVideoStreamStatus(t),this.pxlUtils.mobile?i.active&&i.videoTexture&&i.checkScreens&&(i.checkScreens=!1,this.setScreensToStreams(1,i.videoTexture)):(e=i.checkScreens,i.checkScreens=!1));}else this.videoStills[t].texture&&this.pxlUtils.mobile&&this.setScreensToStreams(1,this.videoStills[t].texture);return e}setScreensToStreams(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"dj",i=t;"string"==typeof i&&((i=this.getTexture(t))||(e=0,this.videoStreams[t].active=!1,this.videoStreams[t].checkScreens=!0)),this.pxlEnv.camScreenData.screenGeoList.forEach(((t,s)=>{t.material.uniforms.camExists.value=e,t.material.uniforms.videoFeed.value=i;}));}isActive(e){var t=!1;return this.videoStreams.hasOwnProperty(e)?this.videoStreams[e].active&&this.videoStreams[e].videoTexture&&(t=!0):t=null!=this.videoStills[e].texture,t}getTexture(e){var t=null;return this.videoAudioEvent[e]?(this.videoStreams[e].videoTexture||(this.videoStreams[e].videoTexture=this.buildVideoTexture(e)),t=this.videoStreams[e].videoTexture):this.videoStills[e].texture&&(t=this.videoStills[e].texture),t}buildVideoTexture(e){return this.disposeVideoTexture(e),this.videoStreams[e].obj&&this.videoStreams[e].player?this.pxlUtils.getVideoTexture(this.videoStreams[e].obj):null}disposeVideoTexture(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.videoStreams[e].videoTexture&&(this.videoStreams[e].videoTexture.dispose(),this.videoStreams[e].videoTexture=null,this.videoStreams[e].checkScreens=null==t||t);}resetvideoTexture(e){this.setScreensToStreams(0,e),this.disposeVideoTexture(e,!1);var t=this.getTexture(e);this.videoStreams[e].videoTexture=t,this.videoStreams[e].checkScreens=!0;}resetEnvSettings(e){this.resetvideoTexture(e),this.videoStreams[e].checkScreens=!1;}hlsPreflight(){var e=window.MediaSource||window.WebKitMediaSource;e=e&&"function"==typeof e.isTypeSupported&&e.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"');var t=window.SourceBuffer||window.WebKitSourceBuffer;return t=!t||t.prototype&&"function"==typeof t.prototype.appendBuffer&&"function"==typeof t.prototype.remove,e&&t}buildVideoStream(e){var t=this;this.videoStreams[e].obj;if("undefined"!=typeof IVSPlayer)this.buildIvsPlayer(e);else {this.pxlFile.loadScript("https://player.live-video.net/1.1.2/amazon-ivs-player.min.js").then((()=>{t.buildIvsPlayer(e);}));}}buildVhsPlayer(e){if(videojs){this.videoStreams[e].mode=1;var t=this.videoStreams[e].obj,i=videojs(t,{controls:!1,autoplay:!0,preload:"auto"});videojs.log.level("off"),videojs.log.level("error"),this.videoStreams[e].player=i;var s=this;i.ready((function(){var e=i.play();e&&e.catch((function(e){document.addEventListener("click",(function vhsClickMonitor(e){var t=i.networkState();1!=t&&2!=t||(i.play(),document.removeEventListener("click",vhsClickMonitor));}));}));})),i.on("play",(t=>{s.ready(e);})),i.on("loadedmetadata",(t=>{s.start(e);})),i.on("waiting",(t=>{var a=i.currentTime(),r=i.duration();r>0&&setTimeout((()=>{var t=i.currentTime(),n=i.duration();a==t&&r==n&&this.pxlFile.urlExists(i.src()).then((t=>{t||s.ended(e);})).catch((()=>{s.ended(e);}));}),500);})),i.on("ended",(t=>{s.ended(e);})),i.on("error",(t=>{s.ended(e);}));}else this.buildFallbackPlayer(e);}buildHlsPlayer(e){if(Hls.isSupported()){this.videoStreams[e].mode=4;var t=this.videoStreams[e].obj,i=new Hls({enableWorker:!0,liveBackBufferLength:900,startLevel:2,stretchShortVideoTrack:!0,nudgeOffset:.5,fragLoadingTimeOut:2e3});i.attachMedia(t),this.videoStreams[e].player=i;var s=this;i.on(Hls.Events.MEDIA_ATTACHED,(function(t){s.ready(e);})),i.on(Hls.Events.BUFFER_CREATED,(function(e){})),i.on(Hls.Events.MANIFEST_PARSED,(function(t){s.start(e);})),i.streamController.onMediaEnded=function(t){s.ended(e);},i.on(Hls.Events.ERROR,(function(t,a){a.fatal?s.ended(e):"bufferFullError"!=a.details&&"bufferAppendingError"!=a.details||i.recoverMediaError();})),i.on(Hls.Events.STREAM_STATE_TRANSITION,(function(t,a){"PARSED"==a.previousState&&"IDLE"==a.nextState&&(s.videoStreams[e].activeLevel=i.currentLevel,-1==i.currentLevel&&setTimeout((()=>{-1==i.currentLevel&&i.recoverMediaError();}),1e3));}));}else this.buildFallbackPlayer(e);}sendModMessage(e,t,i){var s={msg:e,init:t,data:i};this.pxlEnv.pxlSocket.sendErrorMsg(s);}buildFallbackPlayer(e){var t=this.videoStreams[e].obj;this.videoStreams[e].mode=2,t.setAttribute("src",this.videoStreams[e].urlStatus?this.videoStreams[e].url:"");var i=this;t.addEventListener("error",(function(e,t){})),t.addEventListener("loadedmetadata",(function(t){i.ready(e);})),t.addEventListener("canplay",(function(s){t.play(),i.start(e);})),t.addEventListener("suspend",(function(t){i.ended(e);})),t.addEventListener("ended",(function(t){i.ended(e);}));}buildIvsPlayer(e){if(IVSPlayer.isPlayerSupported){this.videoStreams[e].mode=3;var t=this.videoStreams[e].obj,i=IVSPlayer.create();i.attachHTMLVideoElement(t),i.setAutoplay(!0),i.setLogLevel("Error"),this.videoStreams[e].loading=!0,this.videoStreams[e].player=i,this.videoStreams[e].checkScreens=!1;var s=this,a=IVSPlayer.PlayerState;i.addEventListener(a.READY,(t=>{s.ready(e);})),i.addEventListener(a.PLAYING,(t=>{s.start(e);})),i.addEventListener(a.ENDED,(t=>{s.ended(e);}));var r=IVSPlayer.PlayerEventType;i.addEventListener(r.ERROR,((t,i,a,r)=>{s.ended(e,t);}));}else this.buildFallbackPlayer(e);}unload(e){}load(e,t){var i=this.videoStreams[e];if(i)switch(i.mode){case 1:this.videoStreams[e].url=t,i.player.src({type:"application/x-mpegURL",src:t}),i.player.load();break;case 2:i.obj.setAttribute("src",t),i.obj.load();break;case 3:i.player.load(t);break;case 4:i.player&&this.destroyPlayer(e,!0),i.player.attachMedia(this.videoStreams[e].obj);var s=decodeURIComponent(t);i.player.loadSource(s);}}newStream(e){}canUnmute(e){var t=!0;return this.videoStreams[e]&&(t=this.videoStreams[e].active),t}setMuted(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=this.videoStreams[e];i&&(i.obj.muted=t);}setVolume(e,t){var i=this.videoStreams[e];i&&(i.obj.volume=t);}getStreamState(e){var t=!1,i=this.videoStreams[e];switch(i.mode){case 1:case 2:t=!i.obj.paused;break;case 3:var s=i.player;t=s.core.isLoaded&&!s.core.paused;break;case 4:t=null!=i.player.streamController.lastCurrentTime;}return t}checkVideoError(e){var t=this.videoStreams[e];t.active&&4==t.mode&&(0==t.obj.videoWidth?!t.obj.paused&&t.player.streamController.lastCurrentTime>10&&(this.destroyPlayer(e),this.videoStreams[e].active=!1,this.checkForDjStream=!0,this.buildHlsPlayer(e),this.videoStreams[e].player.recoverMediaError()):t.obj.webkitDecodedFrameCount==t.prevFrame?(this.videoStreams[e].prevFrameCount+=1,this.videoStreams[e].prevFrameCount>50&&(console.log("trigger level drop"),this.videoStreams[e].prevFrameCount=0,this.videoStreams[e].player.recoverMediaError(),this.videoStreams[e].player.nextLoadLevel=Math.max(0,this.videoStreams[e].player.currentLevel-1),this.videoStreams[e].player.recoverMediaError())):(this.videoStreams[e].prevFrame=t.obj.webkitDecodedFrameCount,-1!=this.videoStreams[e].player.nextLevel&&(this.videoStreams[e].player.nextLevel=-1),this.videoStreams[e].prevFrameCount=0));}ready(e){this.videoStreams[e].loading=!1,this.videoStreams[e].obj.volume=0,this.videoStreams[e].activeLevel=1;}start(e){var t=this.videoStreams[e];if(!t.active){t.obj,t.player;var i=this.getStreamState(e);this.videoStreams[e].active=i,this.videoStreams[e].videoTexture||(this.videoStreams[e].videoTexture=this.getTexture(e)),this.pxlAudio.isVideoObject=!0,this.videoStreamFailCount=0,this.checkForDjStream=!1,this.videoStreams[e].checkScreens=!0,this.pxlAudio.djAudioObj.byScript=!0;var s=this.pxlAudio.djAudioObj;s.children[0].setAttribute("src",""),s.pause(),s.muted=!0,setTimeout((()=>{s.load(),setTimeout((()=>{this.pxlAudio.roomAudioStopped&&(t.obj.volume=this.pxlAudio.djAudioVolume),t.obj.muted=this.pxlAudio.djMuted||!this.pxlAudio.roomAudioStopped,t.obj.click();}),20);}),20);}}restart(e){var t=!1,i=this.videoStreams[e].player,s=this.videoStreams[e].obj;switch(this.videoStreams[e].mode){case 1:case 2:t=!s.paused;break;case 3:t=i.core.isLoaded&&!i.core.paused;break;case 4:t=i.currentLevel>-1;}this.videoStreams[e].active=t,this.videoStreams[e].checkScreens=t;}ended(e){var t=this.videoStreams[e];if(t.active){this.destroyPlayer(e);var i=4==t.mode?!t.player.liveTracker.atLiveEdge():!t.obj.paused;this.videoStreams[e].active=i,this.checkForDjStream=this.videoAudioEvent.dj,this.pxlAudio.isVideoObject=!1,this.videoStreams[e].checkScreens=!0,this.pxlAudio.roomAudioStopped&&(t.obj.volume=0),t.obj.pause(),t.obj.muted=!0,this.pxlAudio.djAudioObj.byScript=!0;var s=this.pxlAudio.djAudioObj,a=s.children[0];""==a.getAttribute("src")&&(a.setAttribute("src",this.pxlAudio.djUrlSource),s.load(),s.muted=this.pxlAudio.djMuted||!this.pxlAudio.roomAudioStopped,s.play()),this.videoStreams[e].prevCheck=this.pxlUtils.curMS+15,this.videoStreams[e].activeLevel=-1;}}error(e,t){var i;i="object"==typeof t?t.type:t;["ErrorNetworkIO","networkError","mediaError","internalException"].includes(i)&&(tmpThis.videoStreams[e].active=!1);}destroyPlayer(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];4==this.videoStreams[e].mode&&(this.videoStreams[e].active||t)&&this.videoStreams[e].player&&this.videoStreams[e].player.detachMedia();}streamState(e){var t=this;return Video_asyncToGenerator((function*(){var i=!0,s=!0;t.videoStreams.dj&&(i=!t.videoStreams.dj.active),t.videoStreams.performer&&(s=!t.videoStreams.performer.active),1==e.hasOwnProperty("dj")&&i&&(t.checkForDjStream=e.dj&&t.videoAudioEvent.dj),1==e.hasOwnProperty("performer")&&s&&(t.checkForPerformerStream=e.performer&&t.videoAudioEvent.performer);}))()}checkVideoStreamStatus(e){var t=this;return Video_asyncToGenerator((function*(){var i=t.videoStreams[e];i&&t.checkForDjStream&&t.posted&&!i.active&&i.prevCheck+i.delayCheck<t.pxlUtils.curMS&&(t.checkForDjStream=!1,t.pxlFile.urlExists(t.videoStreams[e].url).then((i=>{t.videoStreams[e].urlStatus=i,t.checkForDjStream=!i,t.videoStreams[e].prevCheck=t.pxlUtils.curMS,t.videoStreams[e].checkResolve=t.pxlUtils.curMS,i?t.load(e,t.videoStreams[e].url):t.videoStreamFailCount+=1;})).catch((i=>{console.log(i),t.videoStreamFailCount+=1,t.checkForDjStream=!0,t.videoStreams[e].prevCheck=t.pxlUtils.curMS;})));}))()}}};function ShaderHeader_shaderHeader(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        "}function defaultVert(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n  varying vec2 vUv;\n  void main(){\n    vUv=uv;\n    vec4 modelViewPosition=modelViewMatrix * vec4(position, 1.0);\n    gl_Position = projectionMatrix*modelViewPosition;\n  }"}function defaultShiftVert(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n  varying vec2 vUv;\n  varying vec2 vUvShift;\n  void main(){\n    vUv=uv;\n        vUvShift=uv-.5;\n    vec4 modelViewPosition=modelViewMatrix * vec4(position, 1.0);\n    gl_Position = projectionMatrix*modelViewPosition;\n  }"}function camPosVert(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n  varying vec3 camPos;\n  varying vec2 vUv;\n  void main(){\n    vUv=uv;\n    vec4 modelViewPosition=modelViewMatrix * vec4(position, 1.0);\n    gl_Position = projectionMatrix*modelViewPosition;\n    camPos=(modelViewMatrix*vec4(0.0,0.0,1.0,1.0)).xyz;\n  }"}function discardFrag(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n  void main(){\n    discard;\n    gl_FragColor=vec4(.0,.0,.0,0.0);\n  }"}function animTextureVert(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n  varying vec2 vUv;\n  void main(){\n    vUv=uv;\n    vec4 modelViewPosition=modelViewMatrix * vec4(position, 1.0);\n    gl_Position = projectionMatrix*modelViewPosition;\n  }"}function animTextureFrag(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n  uniform vec2 time;\n  uniform float rate;\n  uniform float freq;\n  uniform float intensity;\n  uniform vec3 glowColor;\n  uniform sampler2D glowTexture;\n  varying vec2 vUv;\n  float pi=3.14159265358979;\n  \n  void main(){\n    vec4 glowCd=texture2D(glowTexture, vUv);\n    vec4 Cd=vec4(glowColor,1.0);\n    Cd.rgb*=(cos(glowCd.g*pi*freq+time.x*rate)*.5+.5)*(1.0-glowCd.b)*intensity+glowCd.b;\n    Cd.rgb*=glowCd.r*glowCd.a;\n    gl_FragColor=Cd;\n  }"}function clickableBevelVert(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform vec2 time;\n    uniform float rate;\n    varying vec3 pos;\n    varying float nDot;\n    varying vec2 vUv;\n    \n    void main(){\n      vUv=uv+vec2(rate*time.x, 0.0);\n      vec3 camDir=normalize( (projectionMatrix*viewMatrix*vec4(0.0,0.0,-1.0,1.0)).xyz );\n      nDot=dot( normal, camDir );\n      \n      pos=position;\n      vec4 modelViewPosition=modelViewMatrix * vec4(pos, 1.0);\n      gl_Position = projectionMatrix*modelViewPosition;\n      \n    }"}function clickableBevelFrag(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D alphaMap;\n    uniform sampler2D cloudNoise;\n    uniform vec2 time;\n    uniform vec2 intensity;\n    uniform float rate;\n    varying vec3 pos;\n    varying float nDot;\n    varying vec2 vUv;\n    \n    void main() {\n      vec4 Cd=vec4( 1.0 );\n      Cd.rgb= mix( vec3(.05,.1,.5), vec3(.3,.5,1.0), intensity.x);\n      \n      vec2 nUV=pos.xy*.01+vec2(time.x*rate*.1, time.x*rate*.1);\n      vec4 noiseCd=texture2D(cloudNoise,nUV);\n      noiseCd.xyz=noiseCd.xyz*2.0-1.0;\n      nUV=vUv+noiseCd.xy*.05;\n      \n      float alpha=texture2D(alphaMap,nUV).r;\n      float blender=(nDot*.5+.5);\n      Cd.rgb=Cd.rgb*(1.0+alpha);//mix( vec3(0.5,0.5,1.0), vec3(0.0,0.2,0.8), blender); // Center Color, Edge Color\n      alpha=1.0-(1.0-alpha)*(1.0-alpha);\n      alpha*=alpha;\n      Cd.a=alpha+alpha;\n      gl_FragColor = Cd;\n    }"}function portalBaseVert(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        uniform vec2 time;\n        uniform float rate;\n        varying vec2 shiftUv;\n        varying vec2 wUv;\n        \n        void main(){\n            shiftUv=(uv-.5);\n            \n            float t=time.x*rate;\n            vec2 rot=vec2( sin(t), cos(t) );\n            vec2 rotUV=vec2(0.0);\n            rotUV.x=rot.y*(uv.x-.5) + rot.x*(uv.y-.5);\n            rotUV.y=rot.y*(uv.y-.5) - rot.x*(uv.x-.5);\n            wUv=rotUV+.5;\n            \n            vec4 modelViewPosition=modelViewMatrix * vec4(position, 1.0);\n            gl_Position = projectionMatrix*modelViewPosition;\n            \n        }"}function portalBaseFrag(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        uniform vec3 color;\n        uniform sampler2D alphaMap;\n        uniform sampler2D cloudNoise;\n        uniform vec2 intensity;\n        varying vec2 shiftUv;\n        varying vec2 wUv;\n        \n        #define TAU 6.28318530717958\n        void main() {\n            float suvLength=length(shiftUv)+.1;\n            vec2 suvSign=sign(shiftUv);\n            \n            vec2 rUv=sin( (suvLength+wUv*10.*shiftUv)*.5 );\n            rUv *= suvLength ;\n            \n            vec4 noiseCd=texture2D(cloudNoise,rUv);\n            vec2 aUv=wUv*(noiseCd.xy*.5+wUv);\n            \n            float alpha=texture2D(alphaMap,aUv).r;\n            \n            vec4 Cd=vec4( color*intensity.x*(1.0+alpha)*mix( noiseCd.rgb, vec3(1.0), alpha), 1.);\n            alpha*=max(0.0, alpha-noiseCd.r*noiseCd.g*noiseCd.b );\n            Cd.a=min(1.0, alpha);\n            \n            gl_FragColor = Cd;\n        }"}function itemBaseVert(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform vec2 time;\n    uniform float intensity;\n    uniform float rate;\n    varying vec3 pos;\n    varying float nDot;\n    varying vec2 vUv;\n    \n    void main(){\n      vUv=uv+vec2(rate*time.x, 0.0);\n      vec3 camDir=normalize( (projectionMatrix*viewMatrix*vec4(0.0,0.0,-1.0,1.0)).xyz );\n      nDot=dot( normal, camDir );\n      \n      pos=position;\n      vec4 modelViewPosition=modelViewMatrix * vec4(pos, 1.0);\n      gl_Position = projectionMatrix*modelViewPosition;\n      \n    }"}function itemBaseFrag(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform vec3 color;\n    uniform sampler2D alphaMap;\n    uniform sampler2D cloudNoise;\n    uniform vec2 time;\n    uniform float intensity;\n    uniform float rate;\n    varying vec3 pos;\n    varying float nDot;\n    varying vec2 vUv;\n    \n    void main() {\n      vec4 Cd=vec4( color, 1.0);\n      \n      \n      vec2 nUV=pos.xy*.01+vec2(time.x*rate*.1, time.x*rate*.1);\n      vec4 noiseCd=texture2D(cloudNoise,nUV);\n      noiseCd.xyz=noiseCd.xyz*2.0-1.0;\n      nUV=vUv+noiseCd.xy*.05;\n      \n      float alpha=texture2D(alphaMap,nUV).r;\n      float blender=(nDot*.5+.5);\n      Cd.rgb=color*intensity*(1.0+alpha);//mix( vec3(0.5,0.5,1.0), vec3(0.0,0.2,0.8), blender); // Center Color, Edge Color\n      alpha=1.0-(1.0-alpha)*(1.0-alpha);\n      alpha*=alpha;\n      Cd.a=alpha+alpha;\n      gl_FragColor = Cd;\n    }"}function itemVert(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform vec2 time;\n    uniform float intensity;\n    uniform float rate;\n    varying vec3 pos;\n    varying float nDot;\n    varying vec2 vUv;\n    varying vec2 nUv;\n    \n    void main(){\n      vUv=uv;\n      nUv=uv*.5+vec2(rate*time.x*-.1, 0.0);\n      nUv.x=sin(nUv.x)*.5+.5;\n      vec3 camDir=normalize( (projectionMatrix*viewMatrix*vec4(0.0,0.0,-1.0,1.0)).xyz );\n      nDot=dot( normal, camDir );\n      \n      vec2 nUV=position.xy*.01+vec2(time.x*rate*.1, time.x*rate*.1);\n      vec3 pos=position;\n      vec4 modelViewPosition=modelViewMatrix * vec4(pos, 1.0);\n      gl_Position = projectionMatrix*modelViewPosition;\n      \n    }"}function itemFrag(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform vec3 color;\n    uniform sampler2D alphaMap;\n    uniform vec2 time;\n    uniform float intensity;\n    uniform float rate;\n    uniform sampler2D cloudNoise;\n    varying vec3 pos;\n    varying float nDot;\n    varying vec2 vUv;\n    varying vec2 nUv;\n    \n    void main() {\n      vec4 Cd=vec4( color, 1.0);\n      float alpha=texture2D(alphaMap,vUv).r;\n      float noise=length(texture2D(cloudNoise,nUv).rgb)*.5;\n      float blender=(nDot*.5+.5);\n      Cd.rgb=color*blender;\n      Cd.rgb*=intensity*alpha;\n      Cd.a=blender*alpha+noise*alpha;\n      gl_FragColor = Cd;\n    }"}function itemZoomFrag(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D color;\n    uniform vec2 time;\n    uniform float intensity;\n    uniform sampler2D cloudNoise;\n    varying vec2 vUv;\n    \n    void main() {\n      vec4 Cd=texture2D(color,vUv);\n      Cd.a=Cd.b;\n      Cd.rgb=vec3( Cd.rg*Cd.a, 0.0 );\n      Cd.rgb*=Cd.a* mix(.7, 1.0, gl_FrontFacing);\n      gl_FragColor = Cd;\n    }"}function pxlPrincipledVert(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t="\n    attribute vec3 color;\n    attribute vec3 shading;\n\n    varying float vFlicker;\n    varying vec2 vUv;\n    varying vec3 vCd;\n    varying vec3 vPos;\n    varying vec3 vLocalPos;\n    varying vec3 vN;\n    varying vec3 vLocalN;\n    varying vec3 vShading;\n    ";return e&&(t+="\n        ".concat(b.ShaderChunk.common,"\n        ").concat(b.ShaderChunk.shadowmap_pars_vertex,"\n      ")),t+="\n    \n    void main(){\n        vUv=uv;\n        \n        vShading=shading;\n        \n        vCd=color;\n        \n        vec3 transformed = vec3( position );\n        vec3 objectNormal = vec3( normal );\n        vec3 transformedNormal = objectNormal;\n        \n        \n        vLocalPos = position;\n        vN = (modelViewMatrix * vec4(normal, 0.0)).xyz;\n        vLocalN = ( modelMatrix * vec4(normal, 0.0)).xyz;\n        vec4 mvPos=modelViewMatrix * vec4(position, 1.0);\n        gl_Position = projectionMatrix*mvPos;\n        vPos = mvPos.xyz;\n        \n        ",e&&(t+="\n            ".concat(b.ShaderChunk.worldpos_vertex,"\n            ").concat(b.ShaderChunk.shadowmap_vertex,"\n          ")),t+="\n    }"}function pxlPrincipledFrag(e,t,i,s,a,r){var n=!1,o=1;e.hasOwnProperty("Specular")&&e.Specular>0&&(n=!0,o=e.Specular);var l=!1;e.PointColor&&(l=!0);var h=!0,d="1.0";e.hasOwnProperty("SurfaceNoise")&&(e.SurfaceNoise%1==0&&(d=e.SurfaceNoise+".0"),"0.0"==d&&(h=!1));var c="\n        ";if(t||(c+="uniform sampler2D dTexture;"),c+="\n    \n    uniform sampler2D noiseTexture;\n    uniform sampler2D detailTexture;\n        \n    uniform vec2 time;\n    uniform float cdMult;\n    uniform vec3 fogColor;\n    \n    varying vec2 vUv;\n    varying vec3 vCd;\n    varying vec3 vPos;\n    varying vec3 vLocalPos;\n    varying vec3 vN;\n    varying vec3 vLocalN;\n    varying vec3 vShading;\n    \n    varying float vFlicker;\n    \n    #define PI 3.14159265358979\n    \n    struct PointLight {\n      vec3 color;\n      float decay;\n      float distance;\n      vec3 position;\n    };\n    struct DirLight {\n      vec3 color;\n      vec3 direction;\n    };\n    ",s&&(c+="\n    #if NUM_POINT_LIGHTS > 0\n      uniform PointLight pointLights[NUM_POINT_LIGHTS];\n    #endif\n    #if NUM_DIR_LIGHTS > 0\n      uniform DirLight directionalLights[NUM_DIR_LIGHTS];\n    #endif\n      "),a&&(c+="\n      \n      ".concat(b.ShaderChunk.packing,"\n      \n      #if NUM_POINT_LIGHT_SHADOWS > 0\n          uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n          varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n          struct PointLightShadow {\n              float shadowBias;\n              float shadowNormalBias;\n              float shadowRadius;\n              vec2 shadowMapSize;\n              float shadowCameraNear;\n              float shadowCameraFar;\n          };\n          uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n      #endif\n      float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n          return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n      }\n      vec2 cubeToUV( vec3 v, float texelSizeY ) {\n          vec3 absV = abs( v );\n          float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n          absV *= scaleToCube;\n          v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n          vec2 planar = v.xy;\n          float almostATexel = 1.5 * texelSizeY;\n          float almostOne = 1.0 - almostATexel;\n          if ( absV.z >= almostOne ) {\n              if ( v.z > 0.0 )\n                  planar.x = 4.0 - v.x;\n          } else if ( absV.x >= almostOne ) {\n              float signX = sign( v.x );\n              planar.x = v.z * signX + 2.0 * signX;\n          } else if ( absV.y >= almostOne ) {\n              float signY = sign( v.y );\n              planar.x = v.x + 2.0 * signY + 2.0;\n              planar.y = v.z * signY - 2.0;\n          }\n          return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n      }\n      float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n          vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n          vec3 lightToPosition = shadowCoord.xyz;\n          float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\n           dp += shadowBias;\n          vec3 bd3D = normalize( lightToPosition );\n          #if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n              vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n              return (\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n                  texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n              ) * ( .11111111111 ) * (1.0-dp);\n          #else\n              return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) * (1.0-dp);\n          #endif\n      }\n    \n      vec3 directionToLight( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar  ){\n          vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n          vec3 lightToPosition = shadowCoord.xyz;\n          float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\n          dp += shadowBias;\n          vec3 bd3D = normalize( lightToPosition );\n          vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n          return texture2D( pointShadowMap[0], cubeToUV( bd3D, texelSize.y )).rgb;\n      }\n      ")),c+="\n    void main(){\n      ",l)c+="vec3 vertCd = vCd;";else if(t){var toFloatStr=e=>e%1==0?e+".0":e+"",u=toFloatStr(t.r),p=toFloatStr(t.g),m=toFloatStr(t.b);c+="vec3 vertCd = vec3( ".concat(u,", ").concat(p,", ").concat(m," ) ;");}else c+="vec3 vertCd = texture2D(dTexture,vUv).rgb ;";c+="\n        \n        vec4 Cd=vec4( vertCd, 1.0 );\n        float specular = 0.0;\n        ",i&&(c+="\n          float depth = gl_FragCoord.z / gl_FragCoord.w *.0004;\n          Cd.rgb=  mix( Cd.rgb, fogColor, depth );\n          ");var v="",g="",f="";if(h&&("1.0"!=d&&(v="*"+d),c+="\n            float detailMult = (texture2D(detailTexture,vUv*4.0).r)*.5+.5;\n            ",g="+detailMult * (shadowInf*.5+.5) ".concat(v),f="(detailMult+.5) ".concat(v)),s&&(c+="\n          #if NUM_POINT_LIGHTS > 0 || NUM_DIR_LIGHTS > 0\n            vec4 lights = vec4(0.0, 0.0, 0.0, 1.0);\n          #endif\n          \n          #if NUM_POINT_LIGHTS > 0\n            for(int i = 0; i < NUM_POINT_LIGHTS; i++) {\n                vec3 lightVector = normalize(vPos - pointLights[i].position);\n                vec3 lightInf= clamp(dot(-lightVector, vN), 0.0, 1.0) * pointLights[i].color;\n                //lightInf = mix( lightInf, 1.0-(1.0-lightInf)*(1.0-lightInf), .2);\n                float distFalloff =  1.0-min(1.0, length(vPos - pointLights[i].position) * pointLights[i].decay*.008 );\n                lightInf *=  distFalloff;\n                lights.rgb += lightInf;\n                ",n&&(c+="\n                  distFalloff = (dot(vN, normalize(-vPos)) )*distFalloff;\n                  specular += distFalloff;\n                  "),c+="\n            }\n          #endif\n            \n          #if NUM_DIR_LIGHTS > 0\n            for(int i = 0; i < NUM_DIR_LIGHTS; i++) {\n                vec3 lightInf= max(0.0, dot(directionalLights[i].direction, vN)*.65+.35) * directionalLights[i].color;\n                lights.rgb += lightInf;\n            }\n          #endif\n            \n            \n          #if NUM_POINT_LIGHTS > 0 || NUM_DIR_LIGHTS > 0\n            Cd.rgb *= lights.rgb;\n          #endif\n          ",n&&(c+="\n            Cd.rgb += vertCd * specular * ".concat(o,";\n            "))),a){c+="\n          #if NUM_POINT_LIGHT_SHADOWS > 0\n            \n            float shadowInf = 0.0;\n            float detailInf = 0.0;\n            float lShadow = 0.0;\n            int i = 0;\n            ";for(var x=0;x<r;++x)c+="\n                i=".concat(x,";\n                lShadow = getPointShadow( pointShadowMap[").concat(x,"], pointLightShadows[i].shadowMapSize, pointLightShadows[i].shadowBias*.75, pointLightShadows[i].shadowRadius*1.65, vPointShadowCoord[i], pointLightShadows[i].shadowCameraNear, pointLightShadows[i].shadowCameraFar );\n                shadowInf = max( lShadow, shadowInf);\n                ");c+="\n            shadowInf = shadowInf;\n            Cd.rgb*=shadowInf ".concat(g," ;\n            "),h&&(c+="\n              #else\n                Cd.rgb*=".concat(f,";\n              ")),c+="\n          #endif\n          ";}else h&&(c+="\n            Cd.rgb*=".concat(f,";\n            "));return c+="\n        Cd*=cdMult;\n        \n        // Convert to sRGB\n        Cd.rgb = mix( 12.92 * Cd.rgb, 1.055 * pow(Cd.rgb, vec3(1.0 / 2.4)) - 0.055, step(0.0031308, Cd.rgb) );\n\n        gl_FragColor=Cd;\n    }"}function emberWispsVert(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[-.13,.15],t="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return t+="\n        \n    uniform sampler2D noiseTexture;\n    uniform vec2 time;\n    uniform float rate;\n    uniform vec2 pointScale;\n    uniform vec3 sliders;\n    \n    attribute vec4 seeds;\n    attribute vec2 atlas;\n    \n    varying vec3 vCd;\n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vAlpha;\n    varying float vBrightness;\n    \n    #define PROX 60.0\n    #define LAND 10.0\n    \n    const vec2 windForce = vec2(".concat(e[0],", ").concat(e[1],");\n    \n    const vec3 earlyCd = vec3( 1.0, 0.7, .1 );\n    const vec3 oldCd = vec3( 0.634, 0.50, 0.20 );\n    const float emberSpread = 15.0;\n    const float emberFadeDistance = 0.04;\n    const float baseSpeed = 0.47;\n    \n    \n    float colDetect( vec2 pos, vec2 pt, vec2 n1, vec2 n2 ){\n        vec2 ref=pos-pt;\n        float ret = step( dot( ref, n1 ), 0.0 );\n        ret *= step( dot( ref, n2 ), 0.0 );\n        \n        return ret;\n    }\n    \n    \n    void main(){\n        vAtlas=atlas;\n        \n        float rot=seeds.z+time.x*(seeds.z*2.);\n        vRot=vec2( sin(rot), cos(rot) );\n        \n        vec3 pOff=vec3(seeds.z, seeds.y, seeds.w) * vec3(PROX);\n        \n        vec2 sinUV=abs(sin(pOff.xz*.5+seeds.zw+time.x*.1)*.5+.5);\n        vec3 noiseCd=texture2D(noiseTexture, sinUV ).rgb*4.5 + 0.50;\n        \n        float rateShift = (baseSpeed*(seeds.x*.4+.6));\n        float t=time.x*rate*rateShift;\n        float shiftY= mod( t+t*seeds.x+seeds.z*8.0+noiseCd.r*10.20*(seeds.y*2.0-1.0)+noiseCd.b+(-seeds.x+seeds.y)*4.0, 10.0);\n        float life = 1.0-max(0.0,abs(shiftY-seeds.x*.1)*(1.0-(seeds.x*1.0)) );\n        life = 1.0-((shiftY*.001-seeds.x*.2) );\n        \n        pOff.y=shiftY*seeds.y;\n        \n        pOff.y=(pOff.y)+shiftY; \n        vec3 pos= pOff ;\n        \n\n        pos.xz=(noiseCd.rg*noiseCd.r)*(seeds.x)*emberSpread*(life*seeds.zy*(seeds.w*4.0-2.));\n        \n        float yPush = ( life * (life*.5+.5))  * min(1.0,pos.y*.12) * 5.8;\n        pos.xz += windForce * yPush * pos.y + vec2(1.25, .0);\n        pos.y += yPush;\n        \n        \n        \n        float pScalar = max( 0., (1.-length(pos-cameraPosition )*0.017)  );\n        float aMult = min(1.0, pScalar*3.0);\n        vAlpha = (seeds.x*.15+.7) * aMult;\n\n        \n        vAlpha=max(0.0, life*life-seeds.z-seeds.z);\n        float distMult = ( length( pos )*emberFadeDistance );\n        distMult = 1.0 - ( distMult * distMult );\n        vAlpha *= distMult;\n        \n        vec3 doubleCd=texture2D(noiseTexture, sinUV+pos.xz*.3+vec2(0.0,pos.y)).rgb*2.0 ;\n        pos.xz+=doubleCd.rb ;\n        \n        \n        float pScale = pointScale.x * seeds.w * pScalar + 2.0;\n        \n        gl_PointSize = pScale;\n        \n        pos += modelMatrix[3].xyz - vec3(1.0, 0.50, 0.2);\n        vec4 mvPos=viewMatrix * vec4(pos, 1.0);\n        gl_Position = projectionMatrix*mvPos;\n        \n        float cdAge = clamp( 1.0 - life, 0.0, 1.0);\n    \n    //earlyCd, oldCd\n        vCd = mix( earlyCd, oldCd, cdAge )  ;\n        vBrightness = 1.45;\n        \n    } ")}function emberWispsFrag(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n                \n    uniform sampler2D atlasTexture;\n    uniform vec2 time;\n    uniform float rate;\n    \n    varying vec3 vCd;\n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vAlpha;\n    varying float vBrightness;\n    \n    void main(){\n        vec2 uv=gl_PointCoord;\n\n        vec2 pos = (uv-.5)*.85;\n\n        vec2 rotUV;\n        rotUV.x = vRot.y * pos.x - vRot.x * pos.y;\n        rotUV.y = vRot.x * pos.x + vRot.y * pos.y;\n        rotUV=(rotUV+.5)*.25+vAtlas;\n        \n        vec4 dustCd=texture2D(atlasTexture,rotUV);\n        float alpha=dustCd.a*vAlpha;\n        \n        //dustCd.rgb = 1.0 - (1.0 - dustCd.rgb ) * vBrightness;\n        dustCd.rgb *= vBrightness;\n        \n        vec4 Cd=vec4( dustCd.rgb * vCd * vBrightness, alpha );\n        gl_FragColor=Cd;\n    }"}function dustVert(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:120,i="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return i+="\n                \n    uniform sampler2D noiseTexture;\n    uniform vec2 time;\n    uniform float rate;\n    uniform vec2 pointScale;\n    uniform vec3 positionOffset;\n    uniform vec2 windDir;\n  ",e>0&&(i+="uniform vec3[".concat(e,"] lightPos;")),i+="\n    \n    attribute vec4 seeds;\n    attribute vec2 atlas;\n    \n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vScalar;\n    varying float vAlpha;\n    \n    #define PROX ".concat(t.toFixed(3),"\n    #define PROX_INV 1.0/").concat((1.8*t).toFixed(3),"\n    \n    #define LIGHT_COUNT ").concat(e,"\n    \n    \n    float colDetect( vec2 pos, vec2 pt, vec2 n1, vec2 n2 ){\n        vec2 ref=pos-pt;\n        float ret = step( dot( ref, n1 ), 0.0 );\n        ret *= step( dot( ref, n2 ), 0.0 );\n        \n        return ret;\n    }\n    \n    \n    void main(){\n        vAtlas=atlas;\n        \n        float rot=seeds.z+time.x*(seeds.z*2.);\n        vRot=vec2( sin(rot), cos(rot) );\n        \n        float t=time.x*rate;\n        \n        vec3 pOff=seeds.xyz * vec3(PROX);\n        \n        // Loop point positions based on camera location\n        float yFract=fract(t+seeds.x);\n        pOff.y+=cameraPosition.y ; \n        pOff.x+=time.x*windDir.x; \n        pOff.z+=time.x*windDir.y; \n        vec3 pos= pOff ;\n        \n        vec3 noiseCd=texture2D(noiseTexture, sin(pos.xz*.05+seeds.xz+time.x*.1)*.5+.5 ).rgb-.5;\n        \n        pos.y = (pos.y-.1)*.45;\n        pos.y+=sin(seeds.x+seeds.z+noiseCd.r*noiseCd.g+noiseCd.b+time.x*.2)*2.;//+noiseCd.r*noiseCd.g*noiseCd.b*20.;\n\n        pos.xz+=(noiseCd.rg*noiseCd.b)*((seeds.w+.75)*4.);\n        vec2 camXZ=cameraPosition.xz;\n        pos.xz= mod( pos.xz-camXZ, PROX) + camXZ - PROX*.5;\n        \n        float pScalar = max( 0., (1.-length(pos-cameraPosition )*PROX_INV)  );\n        float aMult = min(1.0, pScalar*3.0);\n        vAlpha = (seeds.x*.5+.7) * aMult;\n\n  "),e>1?i+="\n          float lightInf = 1.0;\n\n          for(int i = 0; i < LIGHT_COUNT; i++) {\n              vec3 lightVector = normalize(pos - lightPos[i]);\n              lightInf = min(lightInf, length(pos - lightPos[i]) *.05 );\n          }\n          vAlpha*=(1.0-lightInf)*.8+.2;\n    ":1==e&&(i+="\n        vec3 lightVector = normalize(pos - lightPos[0]);\n        float lightInf = length(pos - lightPos[0]) *.02;\n        vAlpha*=(1.0-lightInf)*.8+.2;\n    "),i+="\n        vScalar = pScalar ;\n        //float pScale = pointScale.x * ((seeds.w+.75)*.5) * pScalar + 1.0;\n        float pScale = pointScale.x * (seeds.w*.5+.5)*pScalar + 1.0;\n        pScale *= step( .5, atlas.x )*.5+1.;\n        //pScale = 10.0;\n       \n        gl_PointSize = pScale;\n        \n        pos+=positionOffset;\n        vec4 mvPos=viewMatrix * vec4(pos, 1.0);\n        gl_Position = projectionMatrix*mvPos;\n    }"}function dustFrag(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D atlasTexture;\n    uniform vec2 time;\n    uniform float rate;\n    \n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vScalar;\n    varying float vAlpha;\n    \n    void main(){\n        vec2 uv=gl_PointCoord;\n\n        vec2 pos = (uv-.5)*.85;\n\n        vec2 rotUV;\n        rotUV.x = vRot.y * pos.x - vRot.x * pos.y;\n        rotUV.y = vRot.x * pos.x + vRot.y * pos.y;\n        rotUV=(rotUV+.5)*.25+vAtlas;\n        \n        vec4 dustCd=texture2D(atlasTexture,rotUV);\n        float alpha=dustCd.a*vAlpha; // *vScalar;\n        vec4 Cd=vec4( dustCd.rgb, alpha );\n\n        gl_FragColor=Cd;\n    }"}function smokeVert(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[8.7,8.4],t="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return t+=" \n    uniform sampler2D noiseTexture;\n    uniform vec2 time;\n    uniform float rate;\n    uniform vec2 pointScale;\n    \n    attribute vec4 seeds;\n    attribute vec2 atlas;\n    \n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vAlpha;\n    varying float vBrightness;\n    \n    \n    #define PROX 6.0\n    \n    \n    float colDetect( vec2 pos, vec2 pt, vec2 n1, vec2 n2 ){\n        vec2 ref=pos-pt;\n        float ret = step( dot( ref, n1 ), 0.0 );\n        ret *= step( dot( ref, n2 ), 0.0 );\n        \n        return ret;\n    }\n     \n    \n    // Attempted de-Magic-num-ification\n    float baseSpread = 110.0;\n    float innerBulster = -0.110;\n    float smokeDensity = 0.25;\n        \n    void main(){\n        vAtlas=atlas;\n        \n        float rot=seeds.z+time.x*(seeds.z*2.);\n        vRot=vec2( sin(rot), cos(rot) );\n        \n        vec3 pOff=vec3(seeds.z, seeds.y, seeds.w) ;\n        \n        vec2 sinUV=abs(sin(pOff.xz*.5+seeds.zw+time.x*.1)*.5+.5);\n        vec3 noiseCd=texture2D(noiseTexture, sinUV ).rgb*4.5 + 0.50;\n        \n        float t=time.x*rate;\n        float shiftY= mod( t+t*seeds.x+seeds.z*24.0+noiseCd.r+noiseCd.b+(seeds.x+seeds.y)*2.0, 14.0);\n        float life = max(0.0,(shiftY-seeds.x)*0.07142857142857142)*.9+.2;\n        float alphaMult = (1.0-(1.0-life)*(1.0-life))*smokeDensity;\n        \n        pOff.y=shiftY*seeds.y*life - (1.0-life);\n        \n        pOff.y=(pOff.y*.5)+shiftY; \n        vec3 pos= pOff ;\n        \n\n        \n        // Magic numbers!  Boo!!\n        float tightenTip = max(0.0,life-.63)*1.3;\n        tightenTip = 1.0 - (1.0-tightenTip) * (1.0-tightenTip);\n        //tightenTip *= tightenTip;\n        float tightenBase = max(0.0, (1.0-life)*innerBulster);\n        float tightenMid = max(0.0, 0.60 - tightenTip - tightenBase - seeds.x*.2);\n        \n        baseSpread = baseSpread*tightenBase + baseSpread*tightenMid + baseSpread*tightenTip ;\n        \n        pos.xz=(noiseCd.rg*noiseCd.b)*seeds.w*baseSpread*(life*(seeds.zy*.6));\n        \n        // Wind -- Forces\n        //   Magic numbers, yarb!\n        float windInf = life * life * (life*.5+.5);\n        vec2 windDir = vec2( windInf*".concat(e[0],", windInf * ").concat(e[1]," );\n        pos.xz += windDir + vec2(-.5, .0);\n        \n        \n        // Alpha with cam distance inf\n        float pScalar = 1.0-min( 1.0, (length(pos-cameraPosition )*0.004) );\n        pScalar=1.0-(pScalar*pScalar);\n        float aMult = min(1.0, pScalar*2.0);\n        vAlpha = (seeds.x*.5+.7) * aMult;\n\n        \n        // Alpha from gettin' old\n        vAlpha=(1.0-life)*min(1.0,alphaMult);\n        vec3 doubleCd=texture2D(noiseTexture, sinUV+pos.xz*.5+vec2(seeds.y,pos.y)).rgb ;\n        pos.xz=(pos.xz*seeds.xy+doubleCd.rb*10.0)*min(1.0,life+seeds.y);\n        \n        \n        // Draw size, particle scale\n        pScalar = 1.0-(1.0-pScalar)*.75*(1.0-pScalar);\n        float pScale = pointScale.x * seeds.w * 0.006 * pScalar + (200.0+125.0*life*pScalar)*(1.0-pScalar);\n        pScale += 150.0*(clamp(-(pScalar-.45)*10.0,0.0,1.0));\n\n        gl_PointSize = pScale;\n        \n        // Brightness multiplier\n        vBrightness = 1.0-tightenMid*.81 - tightenTip + tightenBase;\n        float originDelta = length(pos)*(-innerBulster);\n        vBrightness *= max(0.0, 1.0-originDelta * life * 0.807);\n        \n        \n        // Add Particle System position\n        pos += modelMatrix[3].xyz;\n        \n        vec4 mvPos=viewMatrix * vec4(pos, 1.0);\n        gl_Position = projectionMatrix*mvPos;\n        \n        \n    }")}function smokeFrag(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        \n    uniform sampler2D atlasTexture;\n    uniform vec2 time;\n    uniform float rate;\n    \n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vAlpha;\n    varying float vBrightness;\n    \n    void main(){\n        vec2 uv=gl_PointCoord;\n\n        vec2 pos = (uv-.5)*.85;\n\n        vec2 rotUV;\n        rotUV.x = vRot.y * pos.x - vRot.x * pos.y;\n        rotUV.y = vRot.x * pos.x + vRot.y * pos.y;\n        rotUV=(rotUV+.5)*.25+vAtlas;\n        \n        vec4 dustCd=texture2D(atlasTexture,rotUV);\n        float alpha=dustCd.a*vAlpha;\n        vec4 Cd=vec4( dustCd.rgb, alpha );\n\n        Cd.rgb *= vec3(vBrightness);\n        \n        gl_FragColor=Cd;\n    }"}function snowVert(){var e="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return e+="\n    uniform vec2 time;\n    uniform float rate;\n    uniform float pointScale;\n    \n    attribute vec4 seeds;\n    attribute vec2 atlas;\n    \n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vScalar;\n    \n    #define PROX 1000.0\n    #define LAND 50.0\n    \n    float colDetect( vec2 pos, vec2 pt, vec2 n1, vec2 n2 ){\n        vec2 ref=pos-pt;\n        float ret = step( dot( ref, n1 ), 0.0 );\n        ret *= step( dot( ref, n2 ), 0.0 );\n        \n        return ret;\n    }\n    \n    \n    void main(){\n        vAtlas=atlas;\n        \n        float rot=seeds.z+time.x*(seeds.z*2.);\n        vRot=vec2( sin(rot), cos(rot) );\n        \n        float t=time.x*rate;\n        \n        vec3 pOff=vec3( seeds.x, 0, seeds.y)* vec3(PROX);\n        \n        // Loop point positions based on camera location\n        float yFract=fract(t+seeds.z);\n        pOff.y=PROX-yFract*(PROX+LAND); \n        vec3 pos= pOff ;\n        vec2 camXZ=cameraPosition.xz;\n        pos.xz= mod( pos.xz-camXZ, PROX) + camXZ - PROX*.5;\n        \n        \n        // Get some roof tops working\n        //   Using opposing points and 2 normals in xz space to determin y floor position\n        // Find rooves from xz pos + dot products\n        float floor=0.0;\n    ",!(arguments.length>0&&void 0!==arguments[0]&&arguments[0])&&(e+="\n        // -- --\n        vec2 lp1=vec2( -186.0, -1002.0 ); // Point 1\n        vec2 l1n1=vec2(-.1,1.); // Normal 1\n        vec2 l1n2=vec2(1.,-.1); // Normal 2\n        vec2 lp2=vec2( -1101.0, -1720.0 ); // Point 2\n        vec2 l2n1=vec2(.1,-1.1);\n        vec2 l2n2=vec2(-1.,.1);\n        floor = max( floor, 170.0*colDetect( pos.xz, lp1,l1n1,l1n2 ) * colDetect( pos.xz, lp2,l2n1,l2n2 ) ); // Lobby roof\n\n        lp1=vec2( -217.0, 786.0 ); // Point 1\n        l1n1=vec2(.2,-1.); // Normal 1\n        l1n2=vec2(1.,.1); // Normal 2\n        lp2=vec2( -940.0, 1293.0 ); // Point 2\n        l2n1=vec2(-.2,1.);\n        l2n2=vec2(-1.,-.1);\n        floor = max( floor, 500.0*colDetect( pos.xz, lp1,l1n1,l1n2 ) * colDetect( pos.xz, lp2,l2n1,l2n2 ) ); // sunflower roof\n\n        lp1=vec2( 204.028, 56.7629 ); // Point 1\n        l1n1=vec2( 0.152344, -0.988327 ); // Normal 1\n        l1n2=vec2( -0.999862, 0.0165819 ); // Normal 2\n        lp2=vec2( 755.264, 754.843 ); // Point 2\n        l2n1=vec2( -0.160366, 0.987058 );\n        l2n2=vec2( 0.999849, 0.0173488 );\n        floor = max( floor, 150.0*colDetect( pos.xz, lp1,l1n1,l1n2 ) * colDetect( pos.xz, lp2,l2n1,l2n2 ) ); // sunflower roof\n        "),e+="  \n        // Prevent snow drifting after hitting the ground\n        float yLimit=max( floor, pos.y ) * .08 * seeds.z;\n        pos.xz+=vec2( sin(pos.x+yLimit*seeds.x), sin(pos.z+pos.x+yLimit*seeds.y) )*10.; // Snow sway in the sky\n        \n        // Shift Y position per camera height\n        pos.y+=cameraPosition.y-yFract*(cameraPosition.y); \n        pos.y=max( floor+1.5, pos.y );\n        \n        float melt=min(1.0, (pOff.y+LAND-floor)*.02);\n        float pScalar = max( 0., (1.-length(pos-cameraPosition )*0.001) * melt );\n        \n        vScalar = pScalar;\n        float pScale = pointScale * seeds.w * pScalar ;\n        gl_PointSize = pScale;\n        \n        vec4 mvPos=viewMatrix * vec4(pos, 1.0);\n        gl_Position = projectionMatrix*mvPos;\n    }"}function snowFrag(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D snowTexture;\n    uniform vec2 time;\n    uniform float rate;\n    \n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vScalar;\n    \n    void main(){\n        vec2 uv=gl_PointCoord;\n\n        vec2 pos = uv-.5;\n\n        vec2 rotUV;\n        rotUV.x = vRot.y * pos.x - vRot.x * pos.y;\n        rotUV.y = vRot.x * pos.x + vRot.y * pos.y;\n        rotUV=(rotUV+.5)*.25+vAtlas;\n        \n        float alpha=texture2D(snowTexture,rotUV).r * vScalar;\n        vec4 Cd=vec4( vec3(1.), alpha );\n\n        gl_FragColor=Cd;\n    }"}function worldPositionVert(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n  varying vec3 pos;\n  \n  void main(){\n    vec3 transformed = vec3( position );\n      vec4 mvPosition = modelViewMatrix  * vec4( transformed, 1.0 );\n    pos=((projectionMatrix * modelMatrix * vec4( transformed-vec3(0.0,0.0,-500.0), 1.0 )).xyz*.0001)*.5+.5;\n    \n    gl_Position = projectionMatrix * mvPosition;\n  }"}function worldPositionFrag(){var e="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return e="#include <packing>\n  "+e,e+="\n    uniform sampler2D diffuse;\n    uniform sampler2D depth;\n    uniform float camNear;\n    uniform float camFar;\n    varying vec3 pos;\n    \n    void main() {\n      \n      vec4 Cd=vec4( pos, 1.0 );\n      gl_FragColor = Cd;\n    }"}function glowPassPostProcess(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform sampler2D gDiffuse;\n    uniform sampler2D rDiffuse;\n    uniform sampler2D sceneDepth;\n    uniform vec2 time;\n    uniform vec2 ratio;\n    varying vec2 vUv;\n\n        #define PI 3.14159265358979\n        \n    void main() {\n      vec4 Cd=texture2D( tDiffuse, vUv );\n      vec4 gCd=texture2D( gDiffuse, vUv );\n      vec4 rCd=texture2D( rDiffuse, vUv );\n      \n      Cd.rgb=gCd.rgb + gCd.rgb*length(gCd.rgb) + rCd.rgb  + Cd.rgb ;\n\n      Cd.a=1.0;\n      gl_FragColor = Cd;\n    }"}function textureStorePass(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform sampler2D tDiffusePrev;\n    uniform sampler2D tDiffusePrevRoom;\n    uniform float roomComposer;\n    varying vec2 vUv;\n        \n    void main() {\n      vec4 Cd = texture2D( tDiffusePrev, vUv );\n      vec3 prevRoomCd = texture2D( tDiffusePrevRoom, vUv ).rgb;\n      Cd.rgb=mix( Cd.rgb, prevRoomCd, roomComposer);\n      //Cd.rgb=Cd.rgb + prevRoomCd;\n      Cd.a=1.0;\n      gl_FragColor = Cd;\n    }"}function compLayersPostProcess(){return "\n    uniform sampler2D tDiffuse;\n    uniform sampler2D mtDiffuse;\n    uniform sampler2D sceneDepth;\n    uniform sampler2D noiseTexture;\n    uniform float exposure;\n    uniform vec2 camRotPitch;\n    uniform vec2 time;\n    varying vec2 vUv;\n\n    void main() {\n      vec4 Cd=texture2D(tDiffuse,vUv)*exposure;\n      vec4 mBlurCd=texture2D(mtDiffuse,vUv)*exposure;\n      vec4 depth=texture2D(sceneDepth,vUv);\n      \n  ////////////////////////\n  /*\n      vec2 uv=vUv;\n      float pi=3.14159265358979;\n      float t=-time.x*.007;\n      float pitch=camRotPitch.y;//depth.w*2.0-1.0;\n      float yaw=camRotPitch.x;\n      \n      float distMult=depth.x*2.0;\n      vec2 noiseUV=vec2(fract(uv.x*distMult+t+yaw), fract(uv.y*distMult+pitch));\n      vec3 noiseCd=texture2D(noiseTexture,noiseUV).rgb;\n      noiseUV=vec2(fract(uv.x*distMult+t*.5+yaw), fract(uv.y*.5*distMult+t*.25+pitch));\n      noiseCd.g=texture2D(noiseTexture,noiseUV).g;\n      noiseUV=vec2(fract(uv.x*.8*distMult+t*1.3+yaw), fract(uv.y*.3*distMult+t*.5+ pitch + depth.x*2.0));\n      noiseCd.b=texture2D(noiseTexture,noiseUV).b;\n      float mult=noiseCd.x*noiseCd.y*noiseCd.z*1.3;\n      mult*=max(0.0, 1.0-depth.x) + (1.0-depth.z*.6);\n      \n      float bg=length(depth.rgb)<.02 ? 0.0 : 1.0;\n      float bval=length(bloomCd.rgb);\n      mult= mult*(bg+bval) ;//*(1.0-depth.z);\n      Cd.rgb= mix( Cd.rgb, vec3(mult*.2), mult );\n      */\n      \n      Cd.rgb+=mBlurCd.rgb;\n      Cd.a=1.0;\n      gl_FragColor = Cd;\n    }"}function crossAntiAliasPass(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform vec2 resUV;\n    uniform float ratio;\n    uniform vec3 gamma;\n    varying vec2 vUv;\n\n    // 1/4 ==  0.25\n    //  + 2 center samples, 1/6 ==  0.166...\n    #define AADIV 0.1666666666666666\n    const int runCount = 4;\n    const vec2 runDir[4] = vec2[4](\n                              vec2( -1.0, -1.0 ),\n                              vec2( -1.0, 1.0 ),\n                              vec2( 1.0, -1.0 ),\n                              vec2( 1.0, 1.0 )\n                            );\n\n    void main() {\n      vec4 Cd=texture2D(tDiffuse,vUv)*2.0;\n            \n      float dist = 1.0;\n      vec2 baseUV=vUv;\n      vec2 curUV;\n      vec3 curCd;\n      for(int s=0; s<runCount; ++s){\n        curUV = baseUV+runDir[s]*(resUV);//*dist);\n        curCd = texture2D(tDiffuse,curUV).rgb;\n        Cd.rgb+=curCd;\n      }\n      Cd.rgb=Cd.rgb*AADIV;\n      Cd.a=1.0;\n      \n      //Cd.rgb = pow(Cd.rgb, vec3(gamma.x));\n      Cd.rgb = vec3(1.0)-(vec3(1.0)-Cd.rgb)*gamma.y + Cd.rgb*(1.0-min(1.0,length(Cd.rgb)))*gamma.z;\n      gl_FragColor = Cd;\n    }"}function boxAntiAliasPass(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform vec2 resUV;\n    uniform float ratio;\n    uniform vec3 gamma;\n    varying vec2 vUv;\n\n    // 1/8 ==  0.125\n    //  + 2 center samples, 1/10 ==  0.1\n    #define AADIV 0.1\n    const int runCount = 8;\n    const vec2 runDir[8] = vec2[8](\n                              vec2( -1.0, -1.0 ),\n                              vec2( -1.0, 1.0 ),\n                              vec2( 1.0, -1.0 ),\n                              vec2( 1.0, 1.0 ),\n\n                              vec2( -1.0, 0.0 ),\n                              vec2( 0.0, -1.0 ),\n                              vec2( 0.0, 1.0 ),\n                              vec2( 1.0, 0.0 )\n                            );\n\n    void main() {\n      vec4 Cd=texture2D(tDiffuse,vUv)*2.0;\n            \n      float dist = 1.0;\n      vec2 baseUV=vUv;\n      vec2 curUV;\n      vec3 curCd;\n      for(int s=0; s<runCount; ++s){\n        curUV = baseUV+runDir[s]*(resUV);//*dist);\n        curCd = texture2D(tDiffuse,curUV).rgb;\n                Cd.rgb+=curCd;\n      }\n      Cd.rgb=Cd.rgb*AADIV;\n      Cd.a=1.0;\n      \n      //Cd.rgb = pow(Cd.rgb, vec3(gamma.x));\n      Cd.rgb = vec3(1.0)-(vec3(1.0)-Cd.rgb)*gamma.y + Cd.rgb*(1.0-min(1.0,length(Cd.rgb)))*gamma.z;\n      gl_FragColor = Cd;\n    }"}function directionalBlurPass(e,t,i,s){var a="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return a+="\n        uniform sampler2D tDiffuse;\n        uniform sampler2D pDiffuse;\n        uniform vec2 resUV;\n        varying vec2 vUv;\n  \n        #define PI 3.14159265358979\n        \n        void main() {\n          \n          float dist = 2.0;\n          float fade = 1.0;\n          vec2 baseUV=vUv;\n            \n          const int blurCount=".concat(i,";\n          const int runCount=2;\n          vec2 runDir[runCount];\n          runDir[0]=vec2(").concat(t[0],".0, ").concat(t[1],".0);\n          runDir[1]=vec2(-").concat(t[0],".0, -").concat(t[1],".0);\n          vec2 curUV;\n          vec4 curCd;\n          vec4 blurCd=vec4(.0);\n          for(int b=0; b<blurCount; ++b){\n            dist = 1.0 + float(b)*").concat(s,";\n            fade = (1.0-float(b+1)/float(blurCount+2));\n            //fade = 1.- (1.-fade)*(1.-fade);\n            for(int s=0; s<runCount; ++s){\n              curUV = baseUV+runDir[s]*(resUV*dist);\n              curUV = min( vec2(1.), max( vec2(0.), curUV ));\n              curCd = texture2D(").concat(e,",curUV);\n              curCd.a *= fade*(length(curCd.rgb)*.6);\n              blurCd.r = max( blurCd.r, curCd.r );\n              blurCd.g = max( blurCd.g, curCd.g );\n              blurCd.b = max( blurCd.b, curCd.b );\n              //blurCd.rgb += curCd.rgb;\n              blurCd.a = max( blurCd.a, curCd.a );\n            }\n          }\n          vec4 Cd=blurCd;\n          //Cd.a=.01;\n          gl_FragColor = Cd;\n        }")}function mixBlurShaderPass(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        uniform sampler2D tDiffuse;\n        uniform sampler2D pDiffuse;\n        uniform vec2 resUV;\n        varying vec2 vUv;\n        \n        #define PI 3.14159265358979\n        \n        void main() {\n\n          float dist = 3.0;\n          float fade = 1.0;\n          vec2 baseUV=vUv;\n          const int blurCount=3;\n          const int runCount=8;\n          vec2 runDir[runCount];\n          runDir[0]=vec2(1.0, 0.0);\n          runDir[1]=vec2(1.0, 1.0);\n          runDir[2]=vec2(0.0, 1.0);\n          runDir[3]=vec2(-1.0, 1.0);\n          runDir[4]=vec2(-1.0, 0.0);\n          runDir[5]=vec2(-1.0, -1.0);\n          runDir[6]=vec2(0.0, -1.0);\n          runDir[7]=vec2(1.0, -1.0);\n          vec2 curUV;\n          vec4 curCd;\n          vec4 scatterCd=vec4(.0);\n          for(int b=0; b<blurCount; ++b){\n            dist = 1.5*(1.0+float(b));\n            fade = .1*(1.0-float(b)/float(blurCount));\n            for(int s=0; s<runCount; ++s){\n              curUV = baseUV+runDir[s]*(resUV*dist);\n              curCd = texture2D(pDiffuse,curUV);\n              curCd.a *= fade;\n              scatterCd.rgb += curCd.rgb;\n              scatterCd.a = max( scatterCd.a, curCd.a );\n            }\n          }\n          vec4 Cd=scatterCd;\n          \n          vec4 blurCd=texture2D(tDiffuse,vUv);\n          blurCd.rgb = normalize( blurCd.rgb );\n          \n          Cd = mix( blurCd, Cd, Cd.a);\n          Cd = texture2D(tDiffuse,vUv);\n          //Cd.a=.01;\n          gl_FragColor = Cd;\n        }"}function motionBlurPostProcess(e,t){var i="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return i+="\n    uniform sampler2D tDiffuse;\n    uniform sampler2D rDiffuse;\n    uniform sampler2D noiseTexture;\n    \n    uniform float exposure;\n    uniform vec2 time;\n    uniform vec3 camRotXYZ;\n    uniform vec2 blurDirCur;\n    uniform vec2 blurDirPrev;\n    varying vec2 vUv;\n\n    vec4 getTexture( sampler2D texelToLinearTexture ) {\n      return mapTexelToLinear( texture2D( texelToLinearTexture , vUv ) );\n    }\n    \n    vec3 directionalBlur(vec3 origCd, sampler2D tex, vec2 uv, vec2 dir, vec2 deltaDir, float dist, float thresh){\n      float perc;\n      float curPerc=1.0;\n      vec2 curUV;\n      float origLength=length(origCd.rgb);\n      vec3 curCd;\n      vec3 retCd=origCd;\n      float delta;\n      float threshTrigger=1.0;\n      float dropoff;\n      float percCurve;\n      float d=dot(dir,deltaDir)*.5+.5;\n      for(int r=0; r<10; ++r){\n        perc=(float(r)/10.0);\n        percCurve=perc*.5;\n        dropoff=(dist*float(r))*perc*d;\n        curUV=uv+normalize(deltaDir*percCurve+dir*(1.0-percCurve))*dropoff;\n        //curUV=uv+dir*dropoff;\n        curCd=texture2D(tex,curUV).rgb;\n        delta=length(curCd.rgb);\n        delta=origLength<delta?1.0-perc*perc:0.0;\n        //delta=1.0-perc*perc;\n        retCd+=curCd.rgb*delta;\n        curPerc+=delta;\n        \n        percCurve*=percCurve;\n        curUV=uv-normalize(-deltaDir*percCurve+dir*(1.0-percCurve))*dropoff*.4;\n        //curUV=uv-dir*dropoff*.4;\n        curCd=texture2D(tex,curUV).rgb;\n        delta=length(curCd.rgb);\n        delta=origLength<delta?1.0-perc*perc:0.0;\n        //delta=1.0-perc*perc;\n        retCd+=curCd.rgb*delta;\n        curPerc+=delta;\n        \n      }\n      return retCd /curPerc;\n    }\n\n    void main() {\n      \n      \n      vec4 bloomCd=getTexture( rDiffuse );\n      float noise=sin(time.x*1.8+vUv.x*length(bloomCd.rgb)*12.523+cos(time.x*.4+vUv.y*length(bloomCd.rgb)*2.352)*1.9)*.4+.8;\n      noise=1.0-min(1.0, max(0.0, noise*sin(time.x*.4+24.512)*3.0+1.0));\n      vec2 noiseUV=vUv*0.1;//+vec2(camRotXYZ.x+time.x*.05,-camRotXYZ.y);\n      vec4 noiseCd=texture2D(noiseTexture,noiseUV);\n      float blurDist=length(blurDirCur);\n      blurDist=min(1.0,blurDist*15.0);\n      //blurDist=(1.0-(1.0-blurDist)*(1.0-blurDist));\n      vec2 blurDir=normalize(blurDirCur);//+(vUv-.5)*2.0);",t||(i+="\n        blurDir=normalize( blurDir + (noiseCd.gb-.5)*(dot(blurDir,noiseCd.gb)*.5+.5) );\n      "),i+="\n      vec2 deltaDir=normalize(blurDirPrev);\n      deltaDir.x+=sin((blurDir.x-deltaDir.x));\n      deltaDir.y+=sin((blurDir.y-deltaDir.y));\n      \n      vec4 bloomAdd=vec4( directionalBlur(bloomCd.rgb, rDiffuse, vUv, blurDir, deltaDir, "+e.y+"*"+(t?"3.0":"5.0")+"*(1.5)*blurDist, .5)*(1.0+exposure*.4), 1.0);\n      vec4 Cd= bloomAdd* ( 0.50+bloomCd)*exposure;//getTexture( rDiffuse ) + bloomAdd;//+ vec4( 1.0 ) * bloomCd + bloomAdd;\n      //Cd.a=bloomAdd.a-bloomCd.a;\n      \n      Cd.a=1.0;\n      gl_FragColor = Cd;\n      \n    }"}function chroAberPostProcess(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform sampler2D chroAberUVTexture;\n    uniform vec2 ratio;\n    uniform vec2 warpMult;\n        uniform vec2 lKing;\n    varying vec2 vUv;\n\n    void main() {\n      // I don't know, sRGB to Linear. Keeping it Linear doesn't work, PNG encoding to blame\n      vec4 caCd= texture2D( chroAberUVTexture, vUv )-vec4(vec3(0.7294118), 0.5019608);\n      //caCd*=mix( .025, .018, length(caCd.rg)*4.0 );\n      caCd*=mix( lKing.x, lKing.y, length(caCd.rg)*4.0 )+warpMult.x;\n      \n      vec2 bUv=vUv+caCd.rg;\n      vec2 rUv=vUv+caCd.ba;\n      vec2 gUv=vUv+(caCd.rg+caCd.ba);\n      vec4 rCd=texture2D( tDiffuse, rUv );\n      vec4 Cd=texture2D( tDiffuse, gUv );\n      vec4 bCd=texture2D( tDiffuse, bUv );\n      \n      Cd.rgb=vec3( rCd.r, Cd.g, bCd.b );\n      Cd.a=1.0;\n      gl_FragColor = Cd;\n    }"}function lKingPostProcess(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform sampler2D noiseTexture;\n    uniform vec2 time;\n    uniform vec2 ratio;\n    varying vec2 vUv;\n\n        #define PI 3.14159265358979\n        \n    void main() {\n      vec4 Cd=texture2D( tDiffuse, vUv )*.2;\n      vec4 noiseCd= (texture2D( noiseTexture, vec2( fract(vUv.x*.2-time.x*.02+sin(time.x*.1+vUv.y*PI+Cd.r+Cd.g)),fract( vUv.y*.2+time.x*.01+cos(-time.x*.2+1.15+vUv.x*PI+Cd.g+Cd.b)) ) )-.5)*.025;\n      \n      vec2 bUv=vUv+noiseCd.rg;\n      vec2 rUv=vUv+noiseCd.gb;\n      vec2 gUv=vUv+noiseCd.br;\n      vec4 rCd=texture2D( tDiffuse, rUv );\n      vec4 gCd=texture2D( tDiffuse, gUv );\n      vec4 bCd=texture2D( tDiffuse, bUv );\n      \n      Cd.rgb=vec3( rCd.r, gCd.g, bCd.b );\n      Cd.a=1.0;\n      gl_FragColor = Cd;\n    }"}function iZoomPostProcess(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform sampler2D tDiffusePrev;\n    uniform sampler2D noiseTexture;\n    uniform vec2 time;\n    uniform vec2 ratio;\n    varying vec2 vUv;\n\n        #define PI 3.14159265358979\n        \n    void main() {\n      vec4 Cd=texture2D( tDiffuse, vUv );\n            vec4 pCd=texture2D( tDiffusePrev, vUv );\n            vec3 dCd=Cd.rgb-pCd.rgb;\n            vec3 b1Cd= texture2D( tDiffuse, vUv-vec2( dCd.rg*.1 ) ).rgb;\n            vec3 b2Cd= texture2D( tDiffusePrev, vUv+vec2( dCd.rg*.1 ) ).rgb;\n            b1Cd=mix( b1Cd, b2Cd, step( length(b1Cd), length(b2Cd) ) );\n            \n            vec4 outCd=vec4(1.0);\n            outCd.rgb= mix(  Cd.rgb, b1Cd, length(dCd) );\n            \n      vec3 noiseCd=texture2D( noiseTexture, fract( vUv*50.0+dCd.rg*.1 + length(Cd.rgb*30.0) + time.x) ).rgb;\n\n            outCd.rgb= mix( vec3(length(outCd.rgb)*.333-length(noiseCd)*.1), outCd.rgb, min(1.0,length(dCd))*.5+.5 );\n            outCd.rgb+= dCd.gbr;\n            \n            \n            \n      outCd.a=1.0;\n      gl_FragColor = outCd;\n    }"}function sFieldPostProcessVert(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform vec2 time;\n    varying vec2 vUv;\n    varying vec2 vUvShift;\n    varying vec2 starUv;\n    varying float vTimer;\n\n    void main(){\n        vUv=uv;\n        vUvShift=uv-.5;\n        \n        vec2 rUv=vUvShift*0.7071067811865476;\n        vec2 tmpUv=rUv;\n        float rot=time.x*.1;\n        vec2 sinCos=vec2( sin(rot), cos(rot) );\n        rUv.x=sinCos.x*tmpUv.x + sinCos.y*tmpUv.y;\n        rUv.y=sinCos.y*tmpUv.x - sinCos.x*tmpUv.y;\n        rUv=(rUv+.5);\n        \n        float starTimer=sin(time.x*.2)*.1+.1;\n        starUv=mix( vUv, rUv, starTimer);\n        \n        vTimer=time.x*.5;\n        \n        vec4 modelViewPosition=modelViewMatrix * vec4(position, 1.0);\n        gl_Position = projectionMatrix*modelViewPosition;\n    }"}function sFieldPostProcessFrag(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        uniform sampler2D tDiffuse;\n        uniform sampler2D starTexture;\n        varying vec2 vUv;\n        varying vec2 vUvShift;\n        varying vec2 starUv;\n        varying float vTimer;\n\n        #define PI 3.14159265358979\n        \n        void main() {\n            float uvDist=length(vUvShift);\n            \n            vec3 starCd=texture2D( starTexture, starUv ).rgb*uvDist;\n            \n            float blender=uvDist*starCd.b * abs((fract(starCd.b*PI+vTimer))*2.0-1.0)*.5;\n            vec2 starBlendUV=starCd.rg*blender;\n            \n            vec2 cdUv = vUv+starBlendUV;\n            vec4 Cd=texture2D( tDiffuse, cdUv );\n            \n            vec3 negCd= mix( Cd.brg, Cd.gbr, length(Cd.rgb-Cd.rgb) );\n            float cdBlender=step(.015,starBlendUV.x*uvDist)+starCd.b;\n            Cd.rgb= mix( Cd.rgb, negCd, cdBlender );\n            \n            gl_FragColor = Cd;\n        }"}function warpPostProcess(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D tDiffuse;\n    uniform sampler2D noiseTexture;\n    uniform sampler2D animTexture;\n    uniform vec2 time;\n    uniform vec2 fader;\n    varying vec2 vUv;\n\n    void main() {\n      vec4 Cd=texture2D( tDiffuse, vUv );\n      vec4 animCd=texture2D( animTexture, vUv );\n      float timer=time.x*.2;\n      vec2 animUV=vec2( mod(animCd.r+Cd.r+Cd.g+timer, 1.0), mod(animCd.g+Cd.g+Cd.b+timer, 1.0) );\n      animCd=texture2D( animTexture, animUV );\n      \n      vec2 noiseUV=animUV+animCd.rg;\n      vec4 noiseCd=texture2D(noiseTexture,noiseUV);\n      noiseCd.rgb=vec3( length( noiseCd.rgb )*.5-.25 );\n      \n      float blend=fader.x*fader.y;\n      Cd=mix( Cd, noiseCd, blend);\n      \n      Cd.a=1.0;\n      Cd.r=1.0;\n      gl_FragColor = Cd;\n    }"}function finalOverlayHeavyShader(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        uniform sampler2D tDiffuse;\n        uniform sampler2D rDiffuse;\n        uniform sampler2D bloomTexture;\n        uniform sampler2D sceneDepth;\n        uniform sampler2D scenePos;\n        uniform sampler2D noiseTexture;\n        uniform vec3 camPos;\n        uniform vec2 time;\n        uniform vec2 fogMult;\n        uniform vec2 proximityMult;\n        uniform float ratio;\n        uniform float exposure;\n        varying vec2 vUv;\n\n        vec3 fogValue( vec3 worldPos, float time ){\n            float wpDist = worldPos.x+worldPos.z*2.0;\n            vec2 noiseUV = vec2( ((time*.5+wpDist*.60)), (worldPos.y*.7+time*.25 ));\n            vec3 noiseCd = texture2D(noiseTexture,noiseUV).rgb;\n            noiseUV=vec2( ((time*.3+wpDist*.55)), (worldPos.x*.5+time*.35 ));\n            noiseCd.g=texture2D(noiseTexture,noiseUV+vec2(0.0,time)).g;\n            noiseUV=vec2( ((time*1.2+wpDist*.83)), (worldPos.y+time*.15  ));\n            noiseCd.b=texture2D(noiseTexture,noiseUV).b;\n            \n            return noiseCd;\n        }\n\n        #define PROX_WARP 3.14159265358979*.45\n        \n        void main() {\n            vec4 Cd=texture2D(rDiffuse,vUv);\n            float depth=texture2D(sceneDepth,vUv).r;\n            \n            vec3 worldPos = texture2D(scenePos,vUv).rgb;\n            float t = -time.x*.003;\n            vec3 baseNoiseCd=fogValue( worldPos, t );\n            \n            float mult=0.0;\n            vec3 noiseCd;\n            vec3 curNoiseCd;\n            vec3 samplePos;\n            float samples=4.3;//+sin(time.x*.001);\n            float blender;\n            float blenderMax=0.0;\n            for( int x=0; x<=3; ++x){\n                blender=( float(x+1) / samples );\n                samplePos=worldPos*blender;\n                curNoiseCd=fogValue( samplePos, t );\n                noiseCd=max(noiseCd, curNoiseCd * blender );\n                blenderMax+=blender;\n            }\n            noiseCd += baseNoiseCd*.2;\n            mult= noiseCd.x*noiseCd.y*noiseCd.z*1.2;\n            //mult*=mult;\n            \n            // Distance Mapping\n            float proxWarp= cos(( vUv.x-.5 ) * PROX_WARP*ratio );\n            float mDepth= pow( depth, 28.*proxWarp );\n            \n            float fogDap= max(0.0, 1.0-mDepth);\n            fogDap=1.0-fogDap*fogDap;\n            mult*=max(0.0, (worldPos.y-0.04)*1.65) * fogMult.x * fogDap ;\n            \n            \n            Cd.rgb= mix( Cd.rgb, vec3(mult*.7), mult)-mult*.35;\n \n            vec3 bloomCd=texture2D(bloomTexture,vUv).rgb;\n            Cd.rgb+= bloomCd;\n            Cd.rgb*=exposure;\n            \n            // Proximity Draw Over\n            float dProx=  ((mDepth-.5)*-10.);\n            dProx= max(0.0, (1.0-dProx)*step( 0., dProx));\n            float yProxMult= 1.0-min(1.0, max(0.0, (worldPos.y-.5 )*1000.));\n            dProx*= dProx* yProxMult * proximityMult.x;\n            vec3 proxCd = (vec3(.5,.5,.2)*dProx)*.5;\n            Cd.rgb+=proxCd*mult;\n            \n            Cd.a=1.0;\n            gl_FragColor = Cd;\n    }"}function finalOverlayShader(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        uniform sampler2D tDiffuse;\n        uniform sampler2D rDiffuse;\n        uniform sampler2D bloomTexture;\n        uniform sampler2D sceneDepth;\n        uniform sampler2D scenePos;\n        uniform sampler2D noiseTexture;\n        uniform vec2 time;\n        uniform vec2 fogMult;\n        uniform vec2 proximityMult;\n        uniform vec2 lookAtPerc;\n        uniform vec2 resUV;\n        uniform float ratio;\n        uniform float exposure;\n        varying vec2 vUv;\n\n        #define PROX_WARP 3.14159265358979*.45\n\n        void main() {\n            vec4 Cd=texture2D(rDiffuse,vUv);\n            float depth=texture2D(sceneDepth,vUv).r;\n            \n            vec3 worldPos = texture2D(scenePos,vUv).rgb;\n            float wpDist = worldPos.x+worldPos.z*2.0;\n            float t = -time.x*.003;\n            \n            vec2 noiseUV = vec2( ((t*.5+wpDist*.60)), (worldPos.y*.7+t*.25 ));\n            vec3 noiseCd = texture2D(noiseTexture,noiseUV).rgb;\n            noiseUV=vec2( ((t*.3+wpDist*.55)), (worldPos.x*.5+t*.35 ));\n            noiseCd.g=texture2D(noiseTexture,noiseUV+vec2(0.0,t)).g;\n            noiseUV=vec2( ((t*1.2+wpDist*.83)), (worldPos.y+t*.15  ));\n            noiseCd.b=texture2D(noiseTexture,noiseUV).b;\n            \n            \n            // Distance Mapping\n            float proxWarp= cos(( vUv.x-.5 ) * PROX_WARP*ratio );\n            float mDepth= pow( depth, 28.*proxWarp );\n            \n            float fogDap= max(0.0, 1.0-mDepth);\n            fogDap=1.0-fogDap*fogDap;\n            float mult=noiseCd.x*noiseCd.y*noiseCd.z*1.3;\n            mult*=max(0.0, (worldPos.y-0.04)*1.65) * fogMult.x * fogDap;\n            \n            \n            Cd.rgb= mix( Cd.rgb, vec3(mult), mult)-mult*.4;\n \n            vec3 bloomCd=texture2D(bloomTexture,vUv).rgb;\n            Cd.rgb+= bloomCd;\n            Cd.rgb*=exposure;\n            \n            // Proximity Draw Over\n            float dProx=  ((mDepth-.5)*-10.);\n            dProx= max(0.0, (1.0-dProx)*step( 0., dProx));\n            float yProxMult= 1.0-min(1.0, max(0.0, (worldPos.y-.5 )*1000.));\n            dProx*= dProx* yProxMult * proximityMult.x;\n            vec3 proxCd = (vec3(.5,.5,.2)*dProx)*.5;\n            Cd.rgb+=proxCd*mult;\n            \n            Cd.a=1.0;\n            gl_FragColor = Cd;\n        }"}function finalOverlaySlimShader(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        uniform sampler2D tDiffuse;\n        uniform sampler2D rDiffuse;\n        uniform sampler2D bloomTexture;\n        uniform sampler2D sceneDepth;\n        uniform vec2 time;\n        uniform vec2 proximityMult;\n        uniform vec2 lookAtPerc;\n        uniform vec2 resUV;\n        uniform float ratio;\n        uniform float exposure;\n        varying vec2 vUv;\n\n        #define PROX_WARP 3.14159265358979*.4\n        #define PI 3.14159265358979\n        \n        vec3 boostHighs( vec3 Cd ){\n            float sat=max(max(Cd.r,Cd.g),Cd.b) - min(min(Cd.r,Cd.g),Cd.b);\n            sat=(1.0-sat);\n            sat=1.0-sat*sat;\n            Cd+=Cd*sat;\n            return Cd;\n        }\n        \n        vec3 boostMids( vec3 Cd ){\n            float sat=max(max(Cd.r,Cd.g),Cd.b) - min(min(Cd.r,Cd.g),Cd.b);\n            sat=sin( sat*PI );\n            Cd+=Cd*sat;\n            return Cd;\n        }\n        \n        void main() {\n            vec4 Cd=texture2D(rDiffuse,vUv);\n            vec2 uv=vUv;\n            \n            vec3 bloomCd=texture2D(bloomTexture,uv).rgb;\n            bloomCd= mix( boostHighs(Cd.rgb), bloomCd,  step( 0.01, length( bloomCd )) );\n            \n            Cd.rgb+= bloomCd;\n\n            // Proximity Draw Over\n            float depth=texture2D(sceneDepth,vUv).r;\n            \n            // Distance Mapping\n            float proxWarp= cos(( vUv.x-.5 ) * PROX_WARP*ratio );\n            float mDepth= pow( depth, 28.*proxWarp );\n            \n            // Proximity Draw Over\n            float dProx=  ((mDepth-.5)*-10.);\n            dProx= max(0.0, (1.0-dProx)*step( 0., dProx));\n            dProx*= dProx * proximityMult.x;\n            vec3 proxCd = (vec3(.5,.5,.2)*dProx)*.5;\n            Cd.rgb+=proxCd;\n            Cd.r=1.0;\n            Cd.a=1.0;\n            gl_FragColor = Cd;\n        }"}function bgScreenVert(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform vec2 time;\n    \n    varying vec2 vUv;\n    varying vec3 vCamNormal;\n    varying vec3 vWorldNormal;\n    varying vec3 vWorldCross;\n    varying vec3 vSunPos;\n    \n    void main(){\n        vUv=uv;\n        \n        mat4 pvMat=projectionMatrix * viewMatrix;\n        pvMat[3] = vec4(.0, .0, .0, 1.0);\n        mat3 pvRot = inverse( mat3( pvMat ) );\n        vCamNormal= pvRot * vec3( position*.2 + vec3(.0, .0, 1.0));\n        vWorldNormal= normalize( pvRot[2] *vec3(1.,0.,1.));\n        vWorldCross= normalize( pvRot[0]*vec3(1.,0.,1.));\n        \n        float timeRate = time.x * .1;\n        vec3 sunPos = normalize( vec3(.3, 1.0, 1.0) );\n        vec3 sunRef = sunPos;\n        sunPos.y= sin(timeRate) * sunRef.y + cos(timeRate)*sunRef.z;\n        sunPos.z= sin(timeRate) * sunRef.z - cos(timeRate)*sunRef.y;\n        sunPos.x = sin( timeRate ) * .1;\n        \n        vSunPos = normalize( sunPos );\n        \n        vec4 modelViewPosition= vec4(position*2.0 + vec3(.0, .0, 1.0), 1.0);\n        gl_Position = modelViewPosition;\n    }"}function bgScreenFrag(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D noiseTexture;\n    varying vec2 vUv;\n    varying vec3 vCamNormal;\n    varying vec3 vWorldNormal;\n    varying vec3 vWorldCross;\n    varying vec3 vSunPos;\n    \n    void main(){\n        vec4 Cd=vec4( vec3(1.0, .10, .10), 1.0);\n        \n        float sunDot = dot( vSunPos, vCamNormal )*.5 +.5;\n        sunDot *= max(0.0, dot( vSunPos, vec3(.0, 1.0, .0)) );\n        \n        vec2 xOffset = vec2( .0, .0);\n        vec3 nCd=texture2D(noiseTexture,vUv*.1+vSunPos.zy*vec2(.15,.22) + xOffset ).rgb;\n        nCd*=texture2D(noiseTexture,vUv*.1+vSunPos.yx*.2).rgb;\n        sunDot *= nCd.x*nCd.y*nCd.z;\n        nCd= vec3( length( nCd ) );\n        \n        float mixVal= min(1.0, sunDot+(1.-(vWorldNormal.y*.5+.5)));\n        Cd.rgb= mix(vec3(0.0, .20, 1.0)+nCd*vWorldNormal.y, vec3(.0, .0, .0), mixVal);\n        Cd.rgb=mix( vec3(.0), Cd.rgb, vWorldNormal.y );\n        Cd.rgb=vec3(mix( vWorldNormal, vWorldCross, step(.4, vUv.x)));\n        Cd.rgb=vec3(mix( vWorldCross, Cd.rgb, step(vUv.y,.9)));\n        gl_FragColor=Cd;\n    }"}function skyObjectVert(){return "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform float camFar;\n    uniform vec2 resUV;\n    \n    varying vec2 vUv;\n    varying vec3 vLocalPos;\n    varying vec4 vWorldPos;\n    \n    void main(){\n        vUv=uv;\n        vLocalPos=position;\n        \n        vec3 pos = position;\n        vec4 modelViewPosition=projectionMatrix * vec4(mat3(viewMatrix)*normalize(pos)*camFar, 1.0);\n        gl_Position = modelViewPosition;\n        \n        vWorldPos = modelViewPosition;\n        \n    }"}function skyObjectFrag(){var e="\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        ";return e+="     \n    uniform sampler2D diffuse;\n    uniform sampler2D envDiffuse;\n    uniform sampler2D noiseTexture;\n    uniform vec2 time;\n    uniform float camNear;\n    uniform float camFar;\n    uniform vec2 resUV;\n\n    uniform float rate;\n    uniform vec3 fogColor;\n    \n    varying vec2 vUv;\n    varying vec3 vLocalPos;\n    varying vec4 vWorldPos;\n    \n    #define PI 3.14159265358979323\n\n    float fitDepth( float zDepth ){\n        float viewZ = ( camNear * camFar ) / ( ( camFar - camNear ) * zDepth - camFar );\n        return ( viewZ + camNear ) / ( camNear - camFar );\n    }\n    \n    void main(){\n        vec2 uv=vUv;\n        vec2 screenUV=(vec2(vWorldPos.xy/vWorldPos.w))*.5+.5;\n        vec4 Cd=texture2D(diffuse,uv);\n  ",(arguments.length>0&&void 0!==arguments[0]?arguments[0]:w.OFF)==w.VAPOR&&(e+="\n\n        \n        vec3 lPos = vLocalPos;\n        lPos.y = abs(lPos.y)*0.05;\n\n        float t = time.x*.6;\n\n        vec2 nUv =  vec2(vUv.x*0.20, vUv.y - t*.0065  - lPos.y );\n        vec3 noiseCd = texture2D( noiseTexture, nUv ).rgb;\n        nUv = ( nUv+noiseCd.rg*(noiseCd.b) + t*.02);\n        noiseCd = texture2D( noiseTexture, nUv ).rgb;\n        noiseCd.rg = noiseCd.rg*2.0-1.0;\n        \n        float zFrag = texture2D( envDiffuse, screenUV ).x;\n        float depth = fitDepth( zFrag );\n        float stencil = zFrag==1.0 ? 1.0 : 0.0;\n        \n        float reachDepth = 0.0 ;\n        \n\n        vec2 baseUV=screenUV;\n        vec2 curUV=vec2(0.0);\n        float curDepth=0.0;\n        float curPerc = 0.0;\n        float dist = 11.0;\n        float blendStep = .4;\n        float blend = 0.0;\n        float uvShift=0.0;\n        for(int s=0; s<5; ++s){\n            uvShift = mix(noiseCd.r, noiseCd.g, (noiseCd.b+float(s)*193.5247))*15.0;\n            curUV = baseUV+vec2(0.0,resUV.y*-(dist+uvShift)  - t*.005 );\n            curDepth = texture2D(envDiffuse,curUV).x ;\n            curDepth = fitDepth( curDepth );\n            curPerc = step( .3, (1.0-curDepth)*7.00 );\n            reachDepth += min(1.0,curDepth)*curPerc;\n            blend += blendStep;\n            dist+=dist*dot(noiseCd.rgb, vec3(0.0,0.0,1.0));\n        }\n        reachDepth *= blend*stencil*3.0;\n\n        vec3 normPos = normalize(vLocalPos);\n        normPos.y = 1.0-min(1.0,(normPos.y)*2.0);\n        normPos.y = normPos.y*normPos.y*normPos.y;\n        depth = clamp(reachDepth+normPos.y, 0.0, 1.0)*.1;\n        \n        float fogMixer = (Cd.r+Cd.g+Cd.b) - (fogColor.r+fogColor.g+fogColor.b) ;\n        vec3 toFogColor = mix( fogColor, Cd.rgb, step(0.0, fogMixer) );\n        float blender = (sin(noiseCd.r*PI+t+uv.x))*max(0.0,1.0-(depth+fogMixer))*.1 ;\n        vec3 baseColor = (toFogColor-min(1.0,blender+ depth*10.0)) ;\n        \n        \n        Cd.rgb = mix(Cd.rgb, baseColor, depth);\n\n    "),e+="\n\n        gl_FragColor=Cd;\n    }"}var R={animated:v,core:m,objects:g,particles:f,rendering:x,scene:y};class ParticleBase{constructor(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"particles";this.name=t,this.room=e,this.geometry=null,this.material=null,this.points=null,this.count=-1,this.pscale=new b.Vector2(0,0),this.position=new b.Vector3(0,0,0),this.atlasPath="sprite_dustLiquid.png",this.atlasPath="sprite_dustAtlas.png";}build(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:6,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:4,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;s||(s=this.elementDuplicator([[0,.75],[0,.5],[.25,.75],[.25,.5]],4)),this.addToScene(e,t,i,s);}setPosition(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];1===t.length?this.position=t[0]:this.position=new b.Vector3(...t),this.points&&this.points.position.copy(this.position);}addToScene(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:6,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:4,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[[0,0]],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5];this.count=e,this.pscale.x=t*this.room.pxlEnv.pxlQuality.screenResPerc,this.isInternalTexture=!1;var n=null;r?(n=this.atlasRandomGen,a=s):n=this.atlasArrayPicker,i||(i=this.newMaterial());for(var o=[],l=[],h=[],d=0;d<e;++d)o.push(0,0,0),l.push(Math.random(),Math.random(),2*Math.random()-1,2*Math.random()-1),h.push(...n(a));var c=new b.Float32BufferAttribute(o,3),u=new b.Float32BufferAttribute(l,4),p=new b.Float32BufferAttribute(h,2),m=new b.BufferGeometry;m.setAttribute("position",c),m.setAttribute("seeds",u),m.setAttribute("atlas",p);var v=new b.Points(m,i);return v.sortParticles=!1,v.frustumCulled=!1,this.room.scene.add(v),v.layers.set(1),v.pBaseScale=t,this.room.geoList[this.name]=v,this.geometry=m,this.material=i,this.points=v,v.position.copy(this.position),v}setUserHeight(e){this.pxlEnv.pxlCamera.userScale=e;}atlasRandomGen(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:4,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2,i=1/e;return Array.from({length:t}).map((()=>Math.floor(648405.71*Math.random()%e)*i))}atlasRandomList(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:4,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:4,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2;return Array.from({length:e}).map((e=>this.atlasRandomGen(t,i)))}atlasArrayPicker(e){return e[Math.floor(92314.75*Math.random()%e.length)]}dupeArray(e,t){return Array.from({length:t}).fill(e)}elementDuplicator(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:4;return e.map((e=>this.dupeArray(e,t))).flat(1)}findLightPositions(){var e=[];return this.room.lightList.hasOwnProperty("PointLight")&&(this.room.lightList.PointLight.length,this.room.lightList.PointLight.forEach((t=>{e.push(t.position.clone());}))),e}setAtlasPath(e){this.atlasPath=e,this.isInternalTexture=!1;}useInternalAsset(e){this.atlasPath=e,this.isInternalTexture=!0;}newMaterial(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=this.findLightPositions(),i={atlasTexture:{type:"t",value:null},noiseTexture:{type:"t",value:null},time:{type:"f",value:this.room.msRunner},pointScale:{type:"f",value:this.pscale},intensity:{type:"f",value:1},rate:{type:"f",value:.035},lightPos:{value:t}},s=this.room.pxlFile.pxlShaderBuilder(i,dustVert(t.length),"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D atlasTexture;\n    uniform vec2 time;\n    uniform float rate;\n    \n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vScalar;\n    varying float vAlpha;\n    \n    void main(){\n        vec2 uv=gl_PointCoord;\n\n        vec2 pos = (uv-.5)*.85;\n\n        vec2 rotUV;\n        rotUV.x = vRot.y * pos.x - vRot.x * pos.y;\n        rotUV.y = vRot.x * pos.x + vRot.y * pos.y;\n        rotUV=(rotUV+.5)*.25+vAtlas;\n        \n        vec4 dustCd=texture2D(atlasTexture,rotUV);\n        float alpha=dustCd.a*vAlpha; // *vScalar;\n        vec4 Cd=vec4( dustCd.rgb, alpha );\n\n        gl_FragColor=Cd;\n    }");return s.side=b.DoubleSide,s.transparent=!0,this.isInternalTexture?s.uniforms.atlasTexture.value=this.room.pxlEnv.getAssetTexture(this.atlasPath,4,{magFilter:b.NearestFilter,minFilter:b.NearestMipmapNearestFilter}):s.uniforms.atlasTexture.value=this.room.pxlUtils.loadTexture(this.atlasPath,4,{magFilter:b.NearestFilter,minFilter:b.NearestMipmapNearestFilter}),s.uniforms.noiseTexture.value=this.room.softNoiseTexture,s.depthTest=!0,s.depthWrite=!1,e&&(this.room.materialList[this.name]=s),s}}var I={pxlParticles:{BillowSmoke:class BillowSmoke extends ParticleBase{constructor(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"billowSmoke";super(e,t),this.name=t,this.room=e;}build(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:50,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:56,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:4,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;s||(s=[...super.dupeArray([0,0],4),...super.dupeArray([.25,0],4),...super.dupeArray([.5,0],2),...super.dupeArray([.5,.25],2),...super.dupeArray([.5,.5],2),...super.dupeArray([.5,.75],2),...super.dupeArray([.75,.75],4),...super.dupeArray([.75,.25],3),...super.dupeArray([.75,.25],3)]);var a={atlasTexture:{type:"t",value:null},noiseTexture:{type:"t",value:null},time:{type:"f",value:this.room.msRunner},pointScale:{type:"f",value:this.pscale},intensity:{type:"f",value:.8},rate:{type:"f",value:2.85}},r=this.room.pxlFile.pxlShaderBuilder(a,smokeVert(),"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n        \n    uniform sampler2D atlasTexture;\n    uniform vec2 time;\n    uniform float rate;\n    \n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vAlpha;\n    varying float vBrightness;\n    \n    void main(){\n        vec2 uv=gl_PointCoord;\n\n        vec2 pos = (uv-.5)*.85;\n\n        vec2 rotUV;\n        rotUV.x = vRot.y * pos.x - vRot.x * pos.y;\n        rotUV.y = vRot.x * pos.x + vRot.y * pos.y;\n        rotUV=(rotUV+.5)*.25+vAtlas;\n        \n        vec4 dustCd=texture2D(atlasTexture,rotUV);\n        float alpha=dustCd.a*vAlpha;\n        vec4 Cd=vec4( dustCd.rgb, alpha );\n\n        Cd.rgb *= vec3(vBrightness);\n        \n        gl_FragColor=Cd;\n    }");r.side=b.DoubleSide,r.transparent=!0,r.uniforms.atlasTexture.value=this.room.pxlUtils.loadTexture(this.atlasPath,4,{magFilter:b.NearestFilter,minFilter:b.NearestMipmapNearestFilter}),r.uniforms.noiseTexture.value=this.room.softNoiseTexture,r.depthTest=!0,r.depthWrite=!1,this.room.materialList[this.name]=r,super.addToScene(e,t,r,i,s);}},EmberWisps:class EmberWisps extends ParticleBase{constructor(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"emberWisps";super(e,t),this.name=t,this.room=e;}build(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:6,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:4,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;s||(s=super.elementDuplicator([[0,.75],[0,.5],[.25,.75],[.25,.5]],4));var a={atlasTexture:{type:"t",value:null},noiseTexture:{type:"t",value:null},time:{type:"f",value:this.room.msRunner},pointScale:{type:"f",value:this.pscale},intensity:{type:"f",value:1},rate:{type:"f",value:5.5}},r=this.room.pxlFile.pxlShaderBuilder(a,emberWispsVert(),"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n                \n    uniform sampler2D atlasTexture;\n    uniform vec2 time;\n    uniform float rate;\n    \n    varying vec3 vCd;\n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vAlpha;\n    varying float vBrightness;\n    \n    void main(){\n        vec2 uv=gl_PointCoord;\n\n        vec2 pos = (uv-.5)*.85;\n\n        vec2 rotUV;\n        rotUV.x = vRot.y * pos.x - vRot.x * pos.y;\n        rotUV.y = vRot.x * pos.x + vRot.y * pos.y;\n        rotUV=(rotUV+.5)*.25+vAtlas;\n        \n        vec4 dustCd=texture2D(atlasTexture,rotUV);\n        float alpha=dustCd.a*vAlpha;\n        \n        //dustCd.rgb = 1.0 - (1.0 - dustCd.rgb ) * vBrightness;\n        dustCd.rgb *= vBrightness;\n        \n        vec4 Cd=vec4( dustCd.rgb * vCd * vBrightness, alpha );\n        gl_FragColor=Cd;\n    }");r.side=b.DoubleSide,r.transparent=!0,r.uniforms.atlasTexture.value=this.room.pxlUtils.loadTexture(this.atlasPath,4,{magFilter:b.NearestFilter,minFilter:b.NearestMipmapNearestFilter}),r.uniforms.noiseTexture.value=this.room.softNoiseTexture,r.depthTest=!0,r.depthWrite=!1,this.room.materialList[this.name]=r,super.addToScene(e,t,r,i,s);}},FloatingDust:class FloatingDust extends ParticleBase{constructor(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"floatingDust";super(e,t),this.name=t,this.room=e;}build(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1e3,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:7,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:120,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[0,0,0],a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[0,1],r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:null,n=!(arguments.length>6&&void 0!==arguments[6])||arguments[6];r||(r=[...super.dupeArray([0,0],4),...super.dupeArray([.25,0],4),...super.dupeArray([.5,0],2),...super.dupeArray([.5,.25],2),...super.dupeArray([.5,.5],2),...super.dupeArray([.5,.75],2),...super.dupeArray([.75,.75],4),...super.dupeArray([.75,.25],3),...super.dupeArray([.75,.25],3)]);var o=super.findLightPositions();a=new b.Vector2(a[0],a[1]),s=new b.Vector3(s[0],s[1],s[2]);var l={atlasTexture:{type:"t",value:null},noiseTexture:{type:"t",value:null},time:{type:"f",value:this.room.msRunner},pointScale:{type:"f",value:this.pscale},intensity:{type:"f",value:1},rate:{type:"f",value:.035},positionOffset:{type:"v",value:s},windDir:{type:"v",value:a},lightPos:{value:o}},h=this.room.pxlFile.pxlShaderBuilder(l,dustVert(o.length,i),"\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n    #else\n      precision mediump float;\n    #endif\n        \n    uniform sampler2D atlasTexture;\n    uniform vec2 time;\n    uniform float rate;\n    \n    varying vec2 vAtlas;\n    varying vec2 vRot;\n    varying float vScalar;\n    varying float vAlpha;\n    \n    void main(){\n        vec2 uv=gl_PointCoord;\n\n        vec2 pos = (uv-.5)*.85;\n\n        vec2 rotUV;\n        rotUV.x = vRot.y * pos.x - vRot.x * pos.y;\n        rotUV.y = vRot.x * pos.x + vRot.y * pos.y;\n        rotUV=(rotUV+.5)*.25+vAtlas;\n        \n        vec4 dustCd=texture2D(atlasTexture,rotUV);\n        float alpha=dustCd.a*vAlpha; // *vScalar;\n        vec4 Cd=vec4( dustCd.rgb, alpha );\n\n        gl_FragColor=Cd;\n    }");h.side=b.DoubleSide,h.transparent=!0,this.isInternalTexture?h.uniforms.atlasTexture.value=this.room.pxlEnv.getAssetTexture(this.atlasPath,4,{magFilter:b.NearestFilter,minFilter:b.NearestMipmapNearestFilter}):h.uniforms.atlasTexture.value=this.room.pxlUtils.loadTexture(this.atlasPath,4,{magFilter:b.NearestFilter,minFilter:b.NearestMipmapNearestFilter}),h.uniforms.noiseTexture.value=this.room.softNoiseTexture,h.depthTest=!0,h.depthWrite=!1,this.room.materialList[this.name]=h,super.addToScene(e,t,h,4,r,n);}}}};class RoomEnvironment{constructor(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"CampfireEnvironment",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:null,n=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null,o=arguments.length>7&&void 0!==arguments[7]?arguments[7]:null,l=arguments.length>8&&void 0!==arguments[8]?arguments[8]:null,h=arguments.length>9&&void 0!==arguments[9]?arguments[9]:null;this.roomName=e,this.pxlFile=i,this.pxlUtils=a,this.pxlAnim=s,this.pxlDevice=r,this.pxlEnv=n,this.booted=!1,this.initScene=!0,this.active=!0,this.assetPath=t+"Assets/",this.mobile=r.mobile,this.sceneFile=this.assetPath+"CampfireEnvironment.fbx",this.animFile=this.assetPath+"Campfire_RabbitDruidA_anim.fbx",this.animClips={},this.animMixer=null,this.spiralizerUniforms={},this.materialList={},this.camInitPos=null,this.camInitLookAt=null,this.camThumbPos=new b.Vector3(0,0,-30),this.camThumbLookAt=new b.Vector3(0,35,-1e3),this.cameraBooted=!1,this.cameraPrevPos=new b.Vector3(0,0,0),this.cameraAimTarget=new b.Object3D(0,0,0),this.camHoldWarpPos=!0,this.camLocation={},this.pxlCamFOV=this.mobile?80:60,this.pxlCamZoom=1,this.pxlCamAspect=1,this.pxlCamNearClipping=5,this.pxlCamFarClipping=1e4,this.fogColor=new b.Color(.01,.02,.05),this.fogExp=7e-4,this.fog=new b.FogExp2(this.fogColor,this.fogExp),this.userAvatarGroup=new b.Group,this.packedTextureMaterial=null,this.coreTextureMaterial=null,this.projectedMaterial=null,this.voidMaterial=null,this.holoMaterial=null,this.aspectRatio=null,this.flag=null,this.initPos=[],this.finalPos=[],this.midPos=new b.Vector3(0,30,-50),this.perspectiveInstances=160,this.startTime=0,this.runTime=new b.Vector2(0,0),this.msRunner=o,this.camera=l,this.autoCamPaths={},this.scene=h,this.lightList={},this.geoList={},this.glassGroup=null,this.glassList=[],this.particleList={},this.portalList={},this.enableRaycast=!1,this.hoverableExists=!1,this.hoverableList=[],this.hoverableObj=null,this.clickableExists=!1,this.clickableList=[],this.clickableObj=null,this.collidersExist=!1,this.colliderActive=!1,this.colliderList={noAxis:[],11:[],"01":[],10:[],"00":[]},this.antiColliderActive=!1,this.antiColliderList={noAxis:[],11:[],"01":[],10:[],"00":[]},this.antiColliderTopActive=!1,this.antiColliderTopList={noAxis:[],11:[],"01":[],10:[],"00":[]},this.roomWarp=[],this.warpPortalTexture=null,this.warpZoneRenderTarget=null,this.worldPosMaterial=null,this.worldPosRenderTarget=null,this.spiralizerPass=null,this.bloomPreState=!1,this.cloud3dTexture=null,this.smoothNoiseTexture=null,this.currentShader=null;}init(){this.scene.fog=this.fog,this.scene.background=this.fogColor,this.cloud3dTexture=this.pxlEnv.cloud3dTexture,this.cloud3dTexture.wrapS=b.RepeatWrapping,this.cloud3dTexture.wrapT=b.RepeatWrapping,this.smoothNoiseTexture=this.pxlEnv.softNoiseTexture,this.smoothNoiseTexture.wrapS=b.RepeatWrapping,this.smoothNoiseTexture.wrapT=b.RepeatWrapping;}start(){this.booted&&this.resetCamera();}step(){this.runTime.x=this.msRunner.x;}stop(){}resize(e,t){}setUserHeight(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;this.pxlEnv.pxlCamera.userScale=e;}resetCamera(){this.pxlEnv.pxlCamera.setTransform(this.camInitPos,this.camInitLookAt);}prepPortalRender(){this.geoList.intro.visible=!1,this.geoList.MainRoomWarp.visible=!1;}cleanupPortalRender(){this.geoList.intro.visible=!0,this.geoList.MainRoomWarp.visible=!0;}setPortalTexture(e){this.geoList.MainRoomWarp.material.map=e;}applyRoomPass(){}getArtistInfo(){return null}setFog(e){}getShaderList(){var e={};return Object.keys(this.materialList).forEach((t=>{e[t]=t;})),e}getCurrentShader(){return this.currentShader||Object.keys(this.materialList)[0]}readShader(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return null!=this.currentShader&&this.materialList[this.currentShader].hasOwnProperty("uniforms")&&(t||(t=new b.Vector3),this.materialList[this.currentShader].uniforms.sliders.value=t,this.materialList[this.currentShader].needsUpdate=!0),this.currentShader=e,this.materialList[this.currentShader]}setShader(e,t,i){this.emitterList&&this.emitterList[this.currentShader]&&this.emitterList[this.currentShader].Particles.length>0&&this.emitterList[this.currentShader].Particles.forEach((e=>{var s=e.material;s.vertexShader=t,s.fragmentShader=i,s.needsUpdate=!0;})),this.materialList[this.currentShader].vertexShader=t,this.materialList[this.currentShader].fragmentShader=i,this.materialList[this.currentShader].needsUpdate=!0;}castRay(e,t){if(this.enableRaycast)if(!e&&!this.hoverableExists||e&&!this.clickableExists)this.mouseRayHits=[];else {var i=[];!e&&this.hoverableExists?i=this.hoverableList:e&&this.clickableExists&&(i=this.clickableList);var s=[];if(i.length>0){var a=new b.Vector2(this.pxlDevice.mouseX/this.pxlDevice.sW*2-1,-this.pxlDevice.mouseY/this.pxlDevice.sH*2+1);this.pxlEnv.pxlCamera.objRaycast.setFromCamera(a,this.pxlEnv.pxlCamera.camera),s=this.pxlEnv.pxlCamera.objRaycast.intersectObjects(i);}this.mouseRayHits=s;}}toCameraPos(e){if(this.cameraBooted&&this.camLocation.hasOwnProperty(e)){var t=this.mobile?"PositionMobile":"Position",i=this.mobile?"LookAtMobile":"LookAt",s=this.camLocation[e][t],a=this.camLocation[e][i];a||(a=new b.Vector3(0,0,1)).addVectors(s,a),this.pxlEnv.pxlCamera.setTransform(this.camLocation[e][t],this.camLocation[e][i]),this.setUserHeight(this.camInitPos.y);}}fbxPostLoad(){this.toCameraPos("Default");var e=0;if(this.lightList.hasOwnProperty("PointLight")&&(e=this.lightList.PointLight.length),this.geoList.hasOwnProperty("GlowPass")&&this.geoList.GlowPass.length>0&&this.geoList.GlowPass.forEach((e=>{e.layers.set(this.pxlEnv.renderLayerEnum.GLOW);})),this.geoList.Sky_EqRect_Mesh){var t=this.geoList.Sky_EqRect_Mesh.material;t.uniforms&&t.uniforms.envDiffuse&&(t.uniforms.envDiffuse.value=this.scene.renderTarget.depthTexture);}var i=new b.AmbientLight(3158064);this.scene.add(i);var s=Object.keys(this.lightList);if(s.length>0&&s.forEach((e=>{this.lightList[e].forEach((t=>{"DirectionalLight"==e?t.castShadow=!1:"PointLight"==e&&(t.shadow.radius=5,t.shadow.receiveShadow=!0,t.shadow.mapSize.width=512,t.shadow.mapSize.height=512,t.shadow.camera.near=.5,t.shadow.camera.far=35,t.shadow.bias=.025,t.shadow.radius=5);}));})),this.shaderGeoList)for(var a in this.shaderGeoList){var r=this.shaderGeoList[a];if(r.userData&&"pxlPrincipled"==r.userData.Shader){var n=b.UniformsUtils.merge([b.UniformsLib.common,b.UniformsLib.lights,b.UniformsLib.shadowmap,{dTexture:{type:"t",value:null},noiseTexture:{type:"t",value:null},detailTexture:{type:"t",value:null},cdMult:{type:"f",value:1},fogColor:{type:"c",value:this.scene.fog.color}}]),o={USE_MAP:""},l={},h=1==r.userData.castShadow||1==r.userData.receiveShadow,d=!1;r.material.map||(d=r.material.color.clone()),r.userData.ShaderParms&&""!=r.userData.ShaderParms&&(l=JSON.parse(r.userData.ShaderParms));var c=this.pxlFile.pxlShaderBuilder(n,pxlPrincipledVert(h),pxlPrincipledFrag(l,d,!0,!0,h,e),o);c.transparent=!1,c.lights=!0,d||(c.uniforms.dTexture.value=r.material.map),c.uniforms.noiseTexture.value=this.cloud3dTexture,c.uniforms.detailTexture.value=this.pxlEnv.detailNoiseTexture,r.material=c,this.materialList[r.name]=c;}}}animPostLoad(e,t){if(this.pxlAnim.hasClip(e,this.animInitCycle)){var i=this.pxlAnim.getMixer(e);this.animMixer=i,this.pxlAnim.playClip(e,this.animInitCycle);}else this.animInitCycle=fallback,this.log("No animation cycle '"+this.animInitCycle+"' found; Using '"+fallback+"' instead");}build(){}onMessage(e,t){if(console.log("Room : "+this.roomName+" - Message Received: "+e),console.log("Message : "+t),"roomwarp"===(e=e.toLowerCase()))this.roomWarp=t;else console.log("-- Message Type Not Recognized -- "),console.log("Room : "+this.roomName),console.log("Message Received: "+e),console.log("Message : "+t);}}var U,j,pxlNavVersion="0.0.17",G="pxlNav-coreCanvas",O=window.innerWidth,B=window.innerHeight;class pxlNav{constructor(e,t,i,s){this._active=!1;e.hasOwnProperty("pxlRoomRoot")&&e.pxlRoomRoot,this.options={loadList:["Cloud3d","SoftNoise","SmoothNoise","WarpAnimTexture"]},this.options=Object.assign(this.options,e);var a=Object.keys(this.options);Object.keys(pxlOptions).forEach((e=>{a.includes(e)||(this.options[e]=pxlOptions[e]);})),this.verbose=this.options.verbose,this.projectTitle=t,this.startingRoom=i,s.includes(i)||s.push(i),this.roomBootList=s,this.callbacks={},this.uriHashParms=this.findHashParms(),this.mobile=this.isMobile(),this.autoCam=this.getHashParm("autoCam",!1),this.loadPercent=0,this.folderDict={assetRoot:"assets/",guiRoot:"assets/GUI/",roomRoot:"assets/rooms/",vidRoot:"assets/screenContent/"},this.validEvents={booted:"Emitted after the engine has fully booted and is ready to be addressed.",shaderEditorVis:"Returns a [bool]; Emitted when the shader editor is toggled on or off.","roomChange-Start":"Emitted when the room change transition begins.","roomChange-Middle":"Emitted when the room change process occurs mid transition.","roomChange-End":"Returns a [bool]; Emitted when the room change transition ends.",fromRoom:"Returns a custom object; Emitted from your Room code you choose to emit during run time.","device-keydown":"Returns an [int]; The just pressed key.","device-keyup":"Returns an [int]; The just released key.","device-resize":"Returns an [{height:#,width:#}]; Height Width object of the new window size.",pxlNavEventNameHere:"Never emitted; You did some copy'pasta.","":"** NOTE : callbacks get an event object shaped -  **","":"** { 'type' : *eventName*, 'value' : *data* } **","":"",help:"Hello! I'm here to help you!",pingPong:"Send 'ping', Get 'pong'! - pxlNav.trigger('ping');"},this.validEventsKeys=Object.keys(this.validEvents),this.loadEnvAssetFile=!0,this.pxlTimer=new k.Timer,this.pxlShaders=R,this.pxlCookie=new k.CookieManager(t,"/"),this.pxlCookie.hasCookie("forceMobile")&&(this.mobile=pxlCookie.parseCookie("forceMobile")),this.pxlQuality=new k.QualityController(this.verbose,this.mobile,this.uriHashParms),this.pxlUtils=new k.Utils(this.folderDict.assetRoot,this.mobile),this.pxlFile=new k.FileIO(this.folderDict),this.pxlExtensions=new k.Extensions,this.pxlAudio=new k.Audio(this.pxlTimer),this.pxlAutoCam=new k.AutoCamera(this.autoCam,this.mobile),this.pxlAutoCam.active=!1,this.pxlUser=new k.User,this.pxlEnv=new k.Environment(this.options,this.startingRoom,this.mobile),this.pxlDevice=new k.Device(t,G,this.mobile,this.autoCam),this.pxlCamera=new k.Camera,this.options.staticCamera&&this.pxlCamera.toggleMovement(!1),this.pxlAnim=new k.Animation(this.folderDict.assetRoot,this.pxlTimer),this.pxlGuiDraws=new k.GUI(this.verbose,t,this.folderDict.assetRoot,this.folderDict.guiRoot),this.pxlQuality.setDependencies(this),this.pxlUtils.setDependencies(this),this.pxlFile.setDependencies(this),this.pxlAudio.setDependencies(this),this.pxlAutoCam.setDependencies(this),this.pxlEnv.setDependencies(this),this.pxlAnim.setDependencies(this),this.pxlDevice.setDependencies(this),this.pxlCamera.setDependencies(this),this.pxlGuiDraws.setDependencies(this),this.pxlGuiDraws.prepLoader(),this.options.hasOwnProperty("loaderPhrases")||(this.options.loaderPhrases=["...loading the pixels..."]),this.pxlGuiDraws.setLoaderPhrases(this.options.loaderPhrases),this.pxlQuality.init();}set active(e){void 0===e&&(e=null),null==e&&(e=!this.pxlTimer.active),1==e?(this.pxlTimer.play(),this.step(!1)):this.pxlTimer.stop();}get active(){return this.pxlTimer.active}start(){this.active=!0;}stop(){this.active=!1;}init(){this.pxlTimer.init(),this.pxlEnv.boot(),this.pxlQuality.startBenchmark(),this.buildGui().then((()=>{this.tickLoader(),this.bootEnvironment();})).then((()=>{this.tickLoader(),this.bootEngine();})).then((()=>{this.tickLoader(),this.pxlEnv.buildComposers(),this.cameraRunAnimatorMobile(this),this.pxlGuiDraws.stepLoader("postBoot"),this.pxlEnv.mapRender(),this.pxlDevice.setCursor("grab");})).catch((e=>{this.verbose>pxlEnums.VERBOSE_LEVEL.NONE&&(console.error("Error in pxlNavCore.init(); Load level - ",e),console.error(e));})).finally((()=>{this.verbose>pxlEnums.VERBOSE_LEVEL.ERROR&&(console.log("'pxlNavCore' Room Build Promise-Chain Completed; ",this.loadPercent),console.log("-- Starting pxlNav in Room `"+this.pxlEnv.bootRoom+"`")),this.start();}));}buildGui(){return new Promise(((e,t)=>{this.pxlGuiDraws.booted(),this.pxlGuiDraws.pxlNavCanvas=document.getElementById(G),U=window.innerWidth*this.pxlQuality.screenResPerc,this.pxlGuiDraws.pxlNavCanvas.width=window.innerWidth,j=window.innerHeight*this.pxlQuality.screenResPerc,this.pxlGuiDraws.pxlNavCanvas.height=window.innerHeight,this.pxlDevice.canCursorLock&&(this.pxlGuiDraws.pxlNavCanvas.requestPointerLock=this.pxlGuiDraws.pxlNavCanvas.requestPointerLock||this.pxlGuiDraws.pxlNavCanvas.mozRequestPointerLock||this.pxlGuiDraws.pxlNavCanvas.webkitRequestPointerLock,document.requestPointerLock=this.pxlGuiDraws.pxlNavCanvas.exitPointerLock||this.pxlGuiDraws.pxlNavCanvas.mozExitPointerLock||this.pxlGuiDraws.pxlNavCanvas.webkitExitPointerLock),this.pxlGuiDraws.mapPrepPrompts(),e(!0);}))}isMobile(){var e=!1;return e=/\b(BlackBerry|webOS|iPhone|IEMobile|Android|Windows Phone|iPad|iPod)\b/i.test(navigator.userAgent),e=this.getHashParm("m",e)}findHashParms(){var e={},t=window.location.hash;if(t.length>1)for(var i=(t=t.substring(1)).split("&"),s=0;s<i.length;s++){var a=i[s].split("=");e[a[0]]=a[1];}return e}getHashParm(e,t){return Object.keys(this.uriHashParms).includes(e)?this.uriHashParms[e]:t}tickLoader(){this.loadPercent+=1;}bootEngine(){return new Promise(((e,t)=>{for(var i=[],s=0;s<this.roomBootList.length;++s)i.push(this.pxlEnv.loadRoom(this.roomBootList[s]));Promise.all(i).then((()=>{e(!0);}));}))}bootEnvironment(){return new Promise(((e,t)=>{this.pxlEnv.engine=new b.WebGLRenderer({canvas:this.pxlGuiDraws.pxlNavCanvas,powerPreference:"low-power",alpha:!0,antialias:!1,sortObjects:!0,depth:!0});var i={format:b.RGBAFormat,antialias:!1,sortObjects:!0,alpha:!0,type:/(iPad|iPhone|iPod)/g.test(navigator.userAgent)?b.HalfFloatType:b.FloatType};this.pxlEnv.engine.autoClear=!0,b.ColorManagement.enabled=!1,this.pxlEnv.engine.outputColorSpace=b.SRGBColorSpace,this.pxlEnv.engine.debug.checkShaderErrors=!1,this.pxlEnv.engine.debug.checkShaderErrors=!0;this.pxlEnv.engine.setClearColor(this.pxlEnv.fogColor,0),this.pxlEnv.engine.setSize(U/this.pxlQuality.screenResPerc,j/this.pxlQuality.screenResPerc),this.pxlEnv.engine.setPixelRatio(1),this.options.shadowMapBiasing==pxlEnums.SHADOW_MAP.OFF?this.pxlEnv.engine.shadowMap.enabled=!1:(this.pxlEnv.engine.shadowMap.enabled=!0,this.pxlEnv.engine.shadowMap.type=b.BasicShadowMap),this.pxlEnv.scene=new b.Scene,this.pxlEnv.scene.fog=this.pxlEnv.fog,this.pxlEnv.scene.background=new b.Color("#000000"),this.pxlEnv.scene.renderTarget=new b.WebGLRenderTarget(O*this.pxlQuality.screenResPerc,B*this.pxlQuality.screenResPerc,i),this.pxlEnv.scene.renderTarget.texture.format=b.RGBAFormat,this.pxlEnv.scene.renderTarget.texture.minFilter=b.LinearFilter,this.pxlEnv.scene.renderTarget.texture.magFilter=b.LinearFilter,this.pxlEnv.scene.renderTarget.texture.generateMipmaps=!1,this.pxlEnv.scene.renderTarget.depthBuffer=!0,this.pxlEnv.scene.renderTarget.depthTexture=new b.DepthTexture,this.pxlEnv.scene.renderTarget.depthTexture.format=b.DepthFormat,this.pxlEnv.scene.renderTarget.depthTexture.type=b.UnsignedIntType,this.pxlEnv.scene.renderWorldPos=new b.WebGLRenderTarget(O*this.pxlQuality.screenResPerc,B*this.pxlQuality.screenResPerc,i),this.pxlEnv.scene.renderWorldPos.texture.format=b.RGBAFormat,this.pxlEnv.scene.renderWorldPos.texture.minFilter=b.NearestFilter,this.pxlEnv.scene.renderWorldPos.texture.magFilter=b.NearestFilter,this.pxlEnv.scene.renderWorldPos.texture.generateMipmaps=!1,i.alpha=!0,this.pxlEnv.scene.renderGlowTarget=new b.WebGLRenderTarget(parseInt(O*this.pxlQuality.screenResPerc),parseInt(B*this.pxlQuality.screenResPerc),i),this.pxlEnv.scene.renderGlowTarget.texture.format=b.RGBAFormat,this.pxlEnv.scene.renderGlowTarget.texture.generateMipmaps=!1;var s;this.pxlGuiDraws.pxlNavCanvas.width,this.pxlGuiDraws.pxlNavCanvas.height;if(this.pxlCamera.camera=new b.PerspectiveCamera(this.pxlEnv.pxlCamFOV,1,this.pxlEnv.camNear,this.pxlEnv.camFar),this.pxlAutoCam.camera=this.pxlCamera.camera,this.pxlCamera.cameraAimTarget=new b.Object3D,this.pxlEnv.scene.add(this.pxlCamera.cameraAimTarget),this.pxlCamera.camera.target=this.pxlCamera.cameraAimTarget,this.pxlCamera.camera.layers.enable(1),this.pxlCamera.camera.layers.enable(2),this.pxlEnv.scene.add(this.pxlEnv.userAvatarGroup),this.options.loadList.includes("Cloud3d")&&(this.pxlEnv.cloud3dTexture=this.pxlUtils.loadTexture(this.folderDict.assetRoot+"Noise_Cloud3d.jpg",null,{encoding:b.LinearSRGBColorSpace}),this.pxlEnv.cloud3dTexture.wrapS=b.RepeatWrapping,this.pxlEnv.cloud3dTexture.wrapT=b.RepeatWrapping),this.options.loadList.includes("SoftNoise")&&(this.pxlEnv.softNoiseTexture=this.pxlUtils.loadTexture(this.folderDict.assetRoot+"Noise_Soft3d.jpg"),this.pxlEnv.softNoiseTexture.wrapS=b.RepeatWrapping,this.pxlEnv.softNoiseTexture.wrapT=b.RepeatWrapping),this.options.loadList.includes("SmoothNoise")&&(this.pxlEnv.detailNoiseTexture=this.pxlUtils.loadTexture(this.folderDict.assetRoot+"Noise_UniformSmooth.jpg"),this.pxlEnv.detailNoiseTexture.wrapS=b.RepeatWrapping,this.pxlEnv.detailNoiseTexture.wrapT=b.RepeatWrapping),this.options.loadList.includes("ChromaticAberration")){var a=this.pxlUtils.loadTexture(this.folderDict.assetRoot+"uv_ChromaticAberration.png");a.minFilter=b.LinearFilter,a.magFilter=b.LinearFilter,this.pxlEnv.chroAberUVTexture=a;}this.options.loadList.includes("WarpAnimTexture")&&(this.pxlEnv.blockAnimTexture=this.pxlUtils.loadTexture(this.folderDict.assetRoot+"uv_blockPortalWarp.jpg"),this.pxlEnv.blockAnimTexture.minFilter=b.LinearFilter,this.pxlEnv.blockAnimTexture.magFilter=b.LinearFilter),this.options.loadList.includes("MathFuncs")&&(this.pxlEnv.mathFuncsTexture=this.pxlUtils.loadTexture(this.folderDict.assetRoot+"MathFuncs.jpg"),this.pxlEnv.mathFuncsTexture.minFilter=b.LinearFilter,this.pxlEnv.mathFuncsTexture.magFilter=b.LinearFilter);s=function tListIdent(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t={t:[0,0,0],r:[0,0,0],s:[1,1,1]};return null!=e&&(t[e[0]]=e[1]),t}();if(this.mobile&&"_mobile",this.loadEnvAssetFile){var r=this.folderDict.assetRoot+"EnvironmentAssets.fbx";this.pxlFile.loadSceneFBX(r,undefined,s,this.verbose,"EnvironmentAssets",[this.pxlEnv.scene]);}this.options.shadowMapBiasing==pxlEnums.SHADOW_MAP.OFF?this.pxlEnv.engine.shadowMap.enabled=!1:(this.pxlEnv.engine.shadowMap.enabled=!0,this.options.shadowMapBiasing==pxlEnums.SHADOW_MAP.BASIC||this.mobile?this.pxlEnv.engine.shadowMap.type=b.BasicShadowMap:this.options.shadowMapBiasing==pxlEnums.SHADOW_MAP.SOFT&&(this.pxlEnv.engine.shadowMap.type=b.PCFSoftShadowMap));var n=new b.AmbientLight(16777215,.05);this.pxlEnv.lightList.push(n),this.pxlEnv.scene.add(n);var o=new b.DirectionalLight(16777215,.1);o.position.set(1e3,550,1200),this.pxlEnv.lightList.push(o),this.pxlEnv.scene.add(o),e(!0);}))}cameraRunAnimatorMobile(e){for(var t=!1,i=Object.keys(e.pxlEnv.geoLoadList),s=0;s<i.length;++s){var a;if(t=(t=0==e.pxlEnv.geoLoadList[i[s]])&&!(null!==(a=e.pxlEnv.roomSceneList[s])&&void 0!==a&&a.booted))break}t?setTimeout((()=>{e.cameraRunAnimatorMobile(e);}),300):e.initRoomList(e);}initRoomList(e){e.pxlGuiDraws.stepLoader("camAnim"),e.pxlCamera.setTransform(e.pxlEnv.camInitPos,e.pxlEnv.camInitLookAt),e.pxlCamera.updateCamera(),e.pxlEnv.buildRoomEnvironments(),e.monitorRoomLoad(e);}monitorRoomLoad(e){for(var t=!1,i=Object.keys(e.pxlEnv.geoLoadList),s=0;s<i.length;++s){var a;if(t=(t=0==e.pxlEnv.geoLoadList[i[s]])&&!(null!==(a=e.pxlEnv.roomSceneList[s])&&void 0!==a&&a.booted))break}t?setTimeout((()=>{e.monitorRoomLoad(e);}),300):(e.pxlQuality.mapAutoQualityUpdate(1,!0),e.runPrepDrawScenes(0,!0,[]));}runPrepDrawScenes(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];if(e++,i.length>0){if(t){t=!1;var s=i[i.length-1];this.pxlCamera.warpToRoom(s);}if(this.pxlCamera.colliderPrevObjHit=null,this.pxlEnv.mapRender(!1),e%10==0){var a=i.pop();t=!0,this.pxlGuiDraws.stepLoader(a);}requestAnimationFrame((()=>{this.runPrepDrawScenes(e,t,i);}));}else this.pxlGuiDraws.stepLoader("Post Room Prep"),this.pxlNavPrepSettings();}pxlNavPrepSettings(){this.pxlCamera.warpToRoom(this.pxlEnv.bootRoom,!0),this.pxlQuality.endBenchmark(),this.pxlGuiDraws.stepLoader("Nav Settings"),this.startPxlNav();}startPxlNav(){this.pxlTimer.init(),this.pxlTimer.play(),this.pxlGuiDraws.applyCookies(),this.pxlGuiDraws.pxlNavCanvas&&this.pxlGuiDraws.pxlNavCanvas.focus();var e=this.pxlEnv.roomSceneList[this.pxlEnv.currentRoom];e.active=!0,e.startTime=this.pxlTimer.msRunner.x,this.pxlEnv.roomPostGuiCalls.forEach((e=>{e.postGuiEvent();})),this.pxlEnv.roomPostGuiCalls=[],this.pxlAutoCam.enabled&&this.pxlGuiDraws.guiToggleVisibility(!1),this.pxlAutoCam.init(),this.pxlDevice.resizeRenderResolution(),this.pxlEnv.mapRender(),this.pxlQuality.setDependentSettings(),this.pxlGuiDraws.stepLoader("Starting...");var t=this;setTimeout((()=>{t.pxlEnv.postBoot(),t.pxlGuiDraws.mapPrompt&&t.pxlGuiDraws.promptFader(t.pxlGuiDraws.mapPrompt,!1,null,!0),t.pxlGuiDraws.mapPromptBG&&t.pxlGuiDraws.promptFader(t.pxlGuiDraws.mapPromptBG,!1,null,!1),t.emit("booted",!0);}),200);}step(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.pxlTimer.active&&(this.pxlTimer.step(),e&&requestAnimationFrame((()=>{this.step();})));}bootTimer(){this.pxlTimer.init(),this.pxlTimer.play();}stopTimer(){this.pxlTimer.stop();}pauseTimer(){this.pxlTimer.pause();}prepPromptFader(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=e;("string"!=typeof i||(i=document.getElementById(i)))&&(i.classList.add("fader"),i.classList.add(t?"visOn":"visOff"),i.style.display=t?"inline-block":"none");}promptFader(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if("string"!=typeof e||(e=document.getElementById(e)))if(e.classList.value.indexOf("fader")<0&&e.classList.add("fader"),t)e.style.display="inline-block",setTimeout((()=>{e.classList.contains("visOff")&&(e.classList.remove("visOff"),e.classList.add("visOn"),null!=i&&(e.setAttribute("fadeOut",clockTime+1e3*i),fadeOutList.push(e)));}),50);else if(e.classList.remove("visOn"),e.classList.add("visOff"),s){["webkitTransitionEnd","otransitionend","oTransitionEnd","msTransitionEnd","transitionend"].forEach((t=>{e.addEventListener(t,(()=>{var t=e.parentNode;t&&t.removeChild(e);}));}));}else setTimeout((()=>{e.classList.contains("visOff")&&(e.style.display="none");}),1e3);}addRooms(e){for(var t=0;t<e.length;++t)this.pxlEnv.roomNameList.includes(e[t])||this.booted||this.roomBootList.push(e[t]);}setBootRoom(e,t){console.log(e,t),this.pxlEnv.bootRoom=e,this.pxlEnv.bootLocation=t;}setLoaderPhrases(e){this.pxlGuiDraws.setLoaderPhrases(e);}initExtension(e,t,i){this.pxlExtensions.init(e,t,i);}startExtension(e,t,i){this.pxlExtensions.start(e,t,i);}stopExtension(e,t,i){this.pxlExtensions.stop(e,t,i);}extensionStatus(e){return this.pxlExtensions.status(e)}trigger(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;switch(e=e.toLowerCase()){case"warptoroom":this.pxlCamera.warpToRoom(t,!0,i);break;case"camera":var s=t.toLowerCase();"roam"==s?this.pxlCamera.toggleMovement(!0):"static"==s&&this.pxlCamera.toggleMovement(!1);break;case"ping":this.emit("pingPong","pong");break;case"roommessage":var a=i.type,r=i.value;null==t&&(t=this.pxlEnv.currentRoom),this.pxlEnv.sendRoomMessage(t,a,r);}}subscribe(e,t){if(this.validEventsKeys.includes(e))if("test"==e)console.log("Test Event : `pxlNav.subscribe( 'test', ... )` was used; subscription list -");else if("pxlNavEventNameHere"==e||"help"==e)"pxlNavEventNameHere"==e?console.warn("Warning : `pxlNav.subscribe( 'pxlNavEventNameHere', ... )` was used; need some help?"):"help"==e&&console.log("Help Requested : `pxlNav.subscribe( 'help', ... )` was used; Subscription items--"),console.log("Valid Event Types : "),this.validEventsKeys.forEach((e=>{console.log("  - ",e," : ",this.validEvents[e]);}));else {var i=e.split("-");"device"==i[0]?this.pxlDevice.subscribe(i[1],t):this.callbacks[e]=t;}else console.warn("Warning : `pxlNav.subscribe( '"+e+"', ... )` was used; use 'help' for a list of valid events.");}emit(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(this.callbacks[e]){var s={type:e,value:t};null!==i&&(s.status=i),this.callbacks[e](s);}}}var V=p.l$,F=p.eT,H=p.vi,N=p.Bn,W=p.IF,z=p.uU,Q=p.Z$,K=p.pL;

    exports.RoomEnvironment = V;
    exports.pxlBase = F;
    exports.pxlEffects = H;
    exports.pxlEnums = N;
    exports.pxlNav = W;
    exports.pxlNavVersion = z;
    exports.pxlOptions = Q;
    exports.pxlShaders = K;

}));
