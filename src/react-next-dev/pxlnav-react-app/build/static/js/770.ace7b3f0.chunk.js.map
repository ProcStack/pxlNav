{"version":3,"file":"static/js/770.ace7b3f0.chunk.js","mappings":"iKAeA,MAAMA,EACJC,WAAAA,CAAYC,EAAKC,GACfC,KAAKF,IAAMA,EACXE,KAAKD,QAAUA,CACjB,CAEAE,EAAAA,CAAGC,EAAOC,GACR,CAGFC,IAAAA,CAAKF,EAAOG,GACV,EAKW,MAAMC,UAAmBC,EAAAA,cACtCV,WAAAA,CAAaW,GACXR,KAAKS,QAAO,EAEZT,KAAKU,YAAc,GACnBV,KAAKW,SAAU,GAGfX,KAAKY,OAAShB,EAAG,sBAAuB,CACtCiB,WAAY,CAAC,cAEjB,CAEAC,IAAAA,GAIEd,KAAKY,OAAOX,GAAG,SAAUI,IACvBU,QAAQC,IAAIX,EAAK,IAwBnBL,KAAKY,OAAOX,GAAG,UAAWD,KAAKiB,WAE/BjB,KAAKY,OAAOX,GAAG,aAAcD,KAAKkB,cAElClB,KAAKY,OAAOX,GAAG,gBAAiBD,KAAKmB,iBAErCnB,KAAKY,OAAOX,GAAG,eAAgBc,QAAQK,MAEzC,CAEAH,SAAAA,GACEF,QAAQC,IAAI,2CAEZhB,KAAKY,OAAOR,KAAK,eAAgB,CAACiB,OAAQ,MAAOC,MAAOtB,KAAKW,UAC/D,CAEAO,YAAAA,GACEH,QAAQC,IAAI,+BACZhB,KAAKS,QAAS,EACdT,KAAKiB,WACP,CAEAE,eAAAA,CAAgBd,GACd,MAAM,UACJkB,GACElB,EACJU,QAAQC,IAAI,qCAAqCO,KACjDvB,KAAKS,QAAS,CAChB,E,oDCrGK,MAAMF,EACXV,WAAAA,GACEG,KAAKwB,QAAS,EACdxB,KAAKyB,SAAU,EACfzB,KAAK0B,UAAY,CAAC,CACpB,CAGAZ,IAAAA,GACE,CAKFa,KAAAA,GACE3B,KAAKwB,QAAS,CAChB,CACAI,KAAAA,GACE5B,KAAK6B,MACP,CACAA,IAAAA,GACE7B,KAAKwB,QAAS,CAChB,CAIAM,SAAAA,CAAW5B,EAAOC,GACXH,KAAK0B,UAAUxB,KAClBF,KAAK0B,UAAUxB,GAAS,IAE1BF,KAAK0B,UAAUxB,GAAO6B,KAAM5B,EAC9B,CACA6B,WAAAA,CAAa9B,EAAOC,GACdH,KAAK0B,UAAWxB,KAClBF,KAAK0B,UAAWxB,GAAUF,KAAK0B,UAAWxB,GAAQ+B,QAAQC,GAAMA,IAAO/B,IAE3E,CACAC,IAAAA,CAAMF,EAAOG,GACPL,KAAK0B,UAAUxB,IACjBF,KAAK0B,UAAWxB,GAAQiC,SAASD,GAAMA,EAAG7B,IAE9C,CAIA+B,OAAAA,GACEpC,KAAKqC,SAEP,E","sources":["components/pxlNav/extensions/Networking.js","components/pxlNav/extensions/ExtensionBase.js"],"sourcesContent":["// pxlNav Networking\r\n//   Written by Kevin Edzenga; 2024\r\n//\r\n// -- -- -- -- -- -- -- -- -- -- -- --\r\n//\r\n//  Since I ripped my networking implementation out of the main project,\r\n//    I was worried of network holes and other security concerns.\r\n//  So here is a barebones implementation of a networking class for Stream Elements.\r\n//    Encase you want to run pxlNav as your v-tuber engine.\r\n//\r\n//  This module needs to be connected to the pxlNav.trigger and pxlNav.emit system.\r\n\r\nimport { ExtensionBase } from \"./ExtensionBase.js\";\r\n\r\n// IO Dummy Class\r\nclass io {\r\n  constructor(url, options) {\r\n    this.url = url;\r\n    this.options = options;\r\n  }\r\n\r\n  on(event, callback) {\r\n    // Dummy implementation\r\n  }\r\n\r\n  emit(event, data) {\r\n    // Dummy implementation\r\n  }\r\n}\r\n\r\n\r\nexport default class Networking extends ExtensionBase {\r\n  constructor( socketio ){\r\n    this.status=false;\r\n    // AccessToken is grabbed from OAuth2 authentication of the account.\r\n    this.accessToken = \"\";\r\n    this.jwtToken =\"\";\r\n\r\n\r\n    this.socket = io('https://www.www.com', {\r\n      transports: ['websocket']\r\n    });\r\n  }\r\n\r\n  init(){\r\n\r\n    // Use this function to see what messages are recieved when running test events in OBS or Streamlabs or which ever streaming software you use.\r\n    //   Look in the console for the event:##### submessages that come in for specific levels of events.\r\n    this.socket.on('event', (data) => {\r\n      console.log(data);\r\n      // Structure as on https://github.com/StreamElements/widgets/blob/master/CustomCode.md#on-event\r\n    });\r\n\r\n    /*\r\n    this.socket.on('event:test', (data) => {\r\n      console.log(data);\r\n      // Structure as on https://github.com/StreamElements/widgets/blob/master/CustomCode.md#on-event\r\n    });\r\n    \r\n    this.socket.on('event:update', (data) => {\r\n      console.log(data);\r\n      // Structure as on https://github.com/StreamElements/widgets/blob/master/CustomCode.md#on-session-update\r\n    });\r\n\r\n    this.socket.on('event:reset', (data) => {\r\n      console.log(data);\r\n      // Structure as on https://github.com/StreamElements/widgets/blob/master/CustomCode.md#on-session-update\r\n    });\r\n    */\r\n\r\n\r\n    // Default events --\r\n    // Socket connected\r\n    this.socket.on('connect', this.onConnect);\r\n    // Socket unplugged\r\n    this.socket.on('disconnect', this.onDisconnect);\r\n    // Socket is the correct cat in the tubes\r\n    this.socket.on('authenticated', this.onAuthenticated);\r\n    // We don't accept dogs here sir\r\n    this.socket.on('unauthorized', console.error);\r\n\r\n  }\r\n\r\n  onConnect() {\r\n    console.log('Successfully connected to the websocket');\r\n    //this.socket.emit('authenticate', {method: 'oauth2', token: this.accessToken});\r\n    this.socket.emit('authenticate', {method: 'jwt', token: this.jwtToken});\r\n  }\r\n\r\n  onDisconnect() {\r\n    console.log('Disconnected from websocket');\r\n    this.status = false;\r\n    this.onConnect()\r\n  }\r\n\r\n  onAuthenticated(data) {\r\n    const {\r\n      channelId\r\n    } = data;\r\n    console.log(`Successfully connected to channel ${channelId}`);\r\n    this.status = true;\r\n  }\r\n}","export class ExtensionBase{\r\n  constructor() {\r\n    this.active = false;\r\n    this.verbose = false;\r\n    this.callbacks = {};\r\n  }\r\n  // -- -- --\r\n  \r\n  init(){\r\n    // Initialize --\r\n  }\r\n  \r\n  // -- -- --\r\n\r\n  start() {\r\n    this.active = true;\r\n  }\r\n  pause() {\r\n    this.stop();\r\n  }\r\n  stop() {\r\n    this.active = false;\r\n  }\r\n  \r\n  // -- -- --\r\n\r\n  subscribe( event, callback ){\r\n    if (!this.callbacks[event]) {\r\n      this.callbacks[event] = [];\r\n    }\r\n    this.callbacks[event].push( callback );\r\n  }\r\n  unsubscribe( event, callback ){\r\n    if( this.callbacks[ event ] ) {\r\n      this.callbacks[ event ] = this.callbacks[ event ].filter( fn => fn !== callback );\r\n    }\r\n  }\r\n  emit( event, data ) {\r\n    if( this.callbacks[event] ){\r\n      this.callbacks[ event ].forEach( fn => fn(data) );\r\n    }\r\n  }\r\n\r\n  // -- -- --\r\n\r\n  destroy(){\r\n    this.disable();\r\n    // Clean up --\r\n  }\r\n}"],"names":["io","constructor","url","options","this","on","event","callback","emit","data","Networking","ExtensionBase","socketio","status","accessToken","jwtToken","socket","transports","init","console","log","onConnect","onDisconnect","onAuthenticated","error","method","token","channelId","active","verbose","callbacks","start","pause","stop","subscribe","push","unsubscribe","filter","fn","forEach","destroy","disable"],"sourceRoot":""}