{"version":3,"file":"static/js/435.bb68704f.chunk.js","mappings":"8KAkBe,MAAMA,UAAmBC,EAAAA,cACtCC,WAAAA,CAAYC,GAMV,GALAC,QACAC,KAAKC,QAAS,EACdD,KAAKE,SAAU,EAIR,cADCJ,EAKJ,MAAM,IAAIK,MAAM,4BAA4BL,EAAU,WAHtDE,KAAKI,MAAQ,IAAIC,EAAAA,mBAKvB,CAEA,kBAAMC,CAAaC,GACjB,aAAaP,KAAKI,MAAMI,SAASD,EACnC,E,0DCpCK,MAAMF,EACXR,WAAAA,GACEG,KAAKS,gBAAkB,yBACvBT,KAAKU,OAAS,KACdV,KAAKW,QAAS,CAChB,CAOA,mCAAaC,CAAuBC,EAAKC,GACvC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAOP,GAAK,GACrBK,EAAIG,aAAe,OAEnBH,EAAII,WAAcC,IAChB,GAAIA,EAAMC,kBAA0C,oBAAfV,EAA2B,CAC9D,MAAMW,EAAWC,KAAKC,MAAOJ,EAAMK,OAASL,EAAMM,MAAS,KAC3Df,EAAWW,EACb,GAGFP,EAAIY,OAAS,KACX,GAAmB,MAAfZ,EAAIa,OAAgB,CACtB,MAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,YAAcjB,EAAIkB,aACzBH,SAASI,KAAKC,YAAYN,GAC1BhB,GACF,MACEC,EAAO,IAAId,MAAM,0BAA0BU,KAC7C,EAGFK,EAAIqB,QAAU,IAAMtB,EAAO,IAAId,MAAM,gCAAgCU,MACrEK,EAAIsB,MAAM,GAEd,CAMA,UAAMC,CAAK3B,GAGT,IAEE4B,QAAQC,IAAI,8BACNtC,EAAoBO,uBALP,iEAK4CE,GAG/Dd,KAAKU,OAAS,IAAIkC,OAAO5C,KAAKS,iBAC9BT,KAAKW,QAAS,EACd+B,QAAQC,IAAI,oCACd,CAAE,MAAOE,GACPH,QAAQG,MAAM,0CAA2CA,EAC3D,CACF,CAKAC,WAAAA,CAAYC,GACL/C,KAAKW,OAIVX,KAAKU,OAAOsC,YAAYD,GAHtBL,QAAQO,KAAK,0CAIjB,CAEAC,SAAAA,CAAUC,GACHnD,KAAKU,OAIVV,KAAKU,OAAO0C,UAAa7B,GAAU4B,EAAS5B,EAAM8B,MAHhDX,QAAQO,KAAK,6BAIjB,CAEAK,eAAAA,GACMtD,KAAKU,SACPV,KAAKU,OAAO6C,YACZvD,KAAKU,OAAS,KACdgC,QAAQC,IAAI,yBAEhB,E,oDCvFK,MAAM/C,EACXC,WAAAA,GACEG,KAAKC,QAAS,EACdD,KAAKE,SAAU,EACfF,KAAKwD,UAAY,CAAC,CACpB,CAGAf,IAAAA,GACE,CAKFgB,KAAAA,GACEzD,KAAKC,QAAS,CAChB,CACAyD,KAAAA,GACE1D,KAAK2D,MACP,CACAA,IAAAA,GACE3D,KAAKC,QAAS,CAChB,CAIA2D,SAAAA,CAAWrC,EAAO4B,GACXnD,KAAKwD,UAAUjC,KAClBvB,KAAKwD,UAAUjC,GAAS,IAE1BvB,KAAKwD,UAAUjC,GAAOsC,KAAMV,EAC9B,CACAW,WAAAA,CAAavC,EAAO4B,GACdnD,KAAKwD,UAAWjC,KAClBvB,KAAKwD,UAAWjC,GAAUvB,KAAKwD,UAAWjC,GAAQwC,QAAQC,GAAMA,IAAOb,IAE3E,CACAc,IAAAA,CAAM1C,EAAO8B,GACPrD,KAAKwD,UAAUjC,IACjBvB,KAAKwD,UAAWjC,GAAQ2C,SAASF,GAAMA,EAAGX,IAE9C,CAIAc,OAAAA,GACEnE,KAAKoE,SAEP,E","sources":["components/pxlNav/extensions/PoseEngine.js","components/pxlNav/extensions/PoseEngine/MediaPipe.js","components/pxlNav/extensions/ExtensionBase.js"],"sourcesContent":["\r\nimport { ExtensionBase } from './ExtensionBase.js';\r\nimport { MediaPipePoseEngine } from './PoseEngine/MediaPipe.js';\r\n\r\nconst pxlPoseEngineList = [\r\n  'MediaPipe'\r\n  /*\r\n  'PoseNet',\r\n  'FaceEngine',\r\n  'FaceMesh',\r\n  'FaceNet',\r\n  'HandEngine',\r\n  'HandPose',\r\n  'HandNet',\r\n  'HandMesh'\r\n  */\r\n];\r\n\r\nexport default class PoseEngine extends ExtensionBase {\r\n  constructor(modelName) {\r\n    super();\r\n    this.active = false;\r\n    this.verbose = false;\r\n\r\n\r\n    switch (modelName) {\r\n      case 'MediaPipe':\r\n        this.model = new MediaPipePoseEngine(); // Google's model\r\n        break;\r\n      default:\r\n        throw new Error(\"Unknown pose estimation '\"+modelName+\"' model\");\r\n    }\r\n  }\r\n\r\n  async estimatePose(input) {\r\n    return await this.model.estimate(input);\r\n  }\r\n}","export class MediaPipePoseEngine {\r\n  constructor() {\r\n    this.workerScriptUrl = \"./PoseEngine_worker.js\";\r\n    this.worker = null;\r\n    this.booted = false;\r\n  }\r\n\r\n  /**\r\n   * Dynamically loads a script with progress tracking\r\n   * @param {string} src - The URL of the script\r\n   * @param {Function} onProgress - Callback for progress updates\r\n   */\r\n  static async loadScriptWithProgress(src, onProgress) {\r\n    return new Promise((resolve, reject) => {\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.open(\"GET\", src, true);\r\n      xhr.responseType = \"text\";\r\n\r\n      xhr.onprogress = (event) => {\r\n        if (event.lengthComputable && typeof onProgress === \"function\") {\r\n          const progress = Math.round((event.loaded / event.total) * 100);\r\n          onProgress(progress);\r\n        }\r\n      };\r\n\r\n      xhr.onload = () => {\r\n        if (xhr.status === 200) {\r\n          const script = document.createElement(\"script\");\r\n          script.textContent = xhr.responseText;\r\n          document.head.appendChild(script);\r\n          resolve();\r\n        } else {\r\n          reject(new Error(`Failed to load script: ${src}`));\r\n        }\r\n      };\r\n\r\n      xhr.onerror = () => reject(new Error(`Network error while loading: ${src}`));\r\n      xhr.send();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes the MediaPipe library and WebWorker\r\n   * @param {Function} onProgress - Callback for script loading progress\r\n   */\r\n  async init(onProgress) {\r\n    const mediaPipeUrl = \"https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/face_mesh.js\";\r\n\r\n    try {\r\n      // Load MediaPipe from CDN\r\n      console.log(\"Loading MediaPipe...\");\r\n      await MediaPipePoseEngine.loadScriptWithProgress(mediaPipeUrl, onProgress);\r\n\r\n      // Initialize WebWorker\r\n      this.worker = new Worker(this.workerScriptUrl);\r\n      this.booted = true;\r\n      console.log(\"MediaPipe Pose Engine Initialized\");\r\n    } catch (error) {\r\n      console.error(\"Error initializing MediaPipePoseEngine:\", error);\r\n    }\r\n  }\r\n\r\n  // -- -- --\r\n  // Worker Helper Functions\r\n\r\n  sendMessage(message) {\r\n    if (!this.booted) {\r\n      console.warn(\"MediaPipePoseEngine is not initialized.\");\r\n      return;\r\n    }\r\n    this.worker.postMessage(message);\r\n  }\r\n\r\n  onMessage(callback) {\r\n    if (!this.worker) {\r\n      console.warn(\"WebWorker not initialized.\");\r\n      return;\r\n    }\r\n    this.worker.onmessage = (event) => callback(event.data);\r\n  }\r\n\r\n  terminateWorker() {\r\n    if (this.worker) {\r\n      this.worker.terminate();\r\n      this.worker = null;\r\n      console.log(\"WebWorker terminated.\");\r\n    }\r\n  }\r\n}\r\n","export class ExtensionBase{\r\n  constructor() {\r\n    this.active = false;\r\n    this.verbose = false;\r\n    this.callbacks = {};\r\n  }\r\n  // -- -- --\r\n  \r\n  init(){\r\n    // Initialize --\r\n  }\r\n  \r\n  // -- -- --\r\n\r\n  start() {\r\n    this.active = true;\r\n  }\r\n  pause() {\r\n    this.stop();\r\n  }\r\n  stop() {\r\n    this.active = false;\r\n  }\r\n  \r\n  // -- -- --\r\n\r\n  subscribe( event, callback ){\r\n    if (!this.callbacks[event]) {\r\n      this.callbacks[event] = [];\r\n    }\r\n    this.callbacks[event].push( callback );\r\n  }\r\n  unsubscribe( event, callback ){\r\n    if( this.callbacks[ event ] ) {\r\n      this.callbacks[ event ] = this.callbacks[ event ].filter( fn => fn !== callback );\r\n    }\r\n  }\r\n  emit( event, data ) {\r\n    if( this.callbacks[event] ){\r\n      this.callbacks[ event ].forEach( fn => fn(data) );\r\n    }\r\n  }\r\n\r\n  // -- -- --\r\n\r\n  destroy(){\r\n    this.disable();\r\n    // Clean up --\r\n  }\r\n}"],"names":["PoseEngine","ExtensionBase","constructor","modelName","super","this","active","verbose","Error","model","MediaPipePoseEngine","estimatePose","input","estimate","workerScriptUrl","worker","booted","loadScriptWithProgress","src","onProgress","Promise","resolve","reject","xhr","XMLHttpRequest","open","responseType","onprogress","event","lengthComputable","progress","Math","round","loaded","total","onload","status","script","document","createElement","textContent","responseText","head","appendChild","onerror","send","init","console","log","Worker","error","sendMessage","message","postMessage","warn","onMessage","callback","onmessage","data","terminateWorker","terminate","callbacks","start","pause","stop","subscribe","push","unsubscribe","filter","fn","emit","forEach","destroy","disable"],"sourceRoot":""}