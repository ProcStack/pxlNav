{"version":3,"file":"static/js/800.4cbf5f8a.chunk.js","mappings":"4JAAO,MAAMA,EACXC,WAAAA,GACEC,KAAKC,gBAAkB,yBACvBD,KAAKE,OAAS,KACdF,KAAKG,QAAS,CAChB,CAOA,mCAAaC,CAAuBC,EAAKC,GACvC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAOP,GAAK,GACrBK,EAAIG,aAAe,OAEnBH,EAAII,WAAcC,IAChB,GAAIA,EAAMC,kBAA0C,oBAAfV,EAA2B,CAC9D,MAAMW,EAAWC,KAAKC,MAAOJ,EAAMK,OAASL,EAAMM,MAAS,KAC3Df,EAAWW,EACb,GAGFP,EAAIY,OAAS,KACX,GAAmB,MAAfZ,EAAIa,OAAgB,CACtB,MAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,YAAcjB,EAAIkB,aACzBH,SAASI,KAAKC,YAAYN,GAC1BhB,GACF,MACEC,EAAO,IAAIsB,MAAM,0BAA0B1B,KAC7C,EAGFK,EAAIsB,QAAU,IAAMvB,EAAO,IAAIsB,MAAM,gCAAgC1B,MACrEK,EAAIuB,MAAM,GAEd,CAMA,UAAMC,CAAK5B,GAGT,IAEE6B,QAAQC,IAAI,8BACNtC,EAAoBM,uBALP,iEAK4CE,GAG/DN,KAAKE,OAAS,IAAImC,OAAOrC,KAAKC,iBAC9BD,KAAKG,QAAS,EACdgC,QAAQC,IAAI,oCACd,CAAE,MAAOE,GACPH,QAAQG,MAAM,0CAA2CA,EAC3D,CACF,CAKAC,WAAAA,CAAYC,GACLxC,KAAKG,OAIVH,KAAKE,OAAOuC,YAAYD,GAHtBL,QAAQO,KAAK,0CAIjB,CAEAC,SAAAA,CAAUC,GACH5C,KAAKE,OAIVF,KAAKE,OAAO2C,UAAa9B,GAAU6B,EAAS7B,EAAM+B,MAHhDX,QAAQO,KAAK,6BAIjB,CAEAK,eAAAA,GACM/C,KAAKE,SACPF,KAAKE,OAAO8C,YACZhD,KAAKE,OAAS,KACdiC,QAAQC,IAAI,yBAEhB,E","sources":["components/pxlNav/extensions/PoseEngine/MediaPipe.js"],"sourcesContent":["export class MediaPipePoseEngine {\r\n  constructor() {\r\n    this.workerScriptUrl = \"./PoseEngine_worker.js\";\r\n    this.worker = null;\r\n    this.booted = false;\r\n  }\r\n\r\n  /**\r\n   * Dynamically loads a script with progress tracking\r\n   * @param {string} src - The URL of the script\r\n   * @param {Function} onProgress - Callback for progress updates\r\n   */\r\n  static async loadScriptWithProgress(src, onProgress) {\r\n    return new Promise((resolve, reject) => {\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.open(\"GET\", src, true);\r\n      xhr.responseType = \"text\";\r\n\r\n      xhr.onprogress = (event) => {\r\n        if (event.lengthComputable && typeof onProgress === \"function\") {\r\n          const progress = Math.round((event.loaded / event.total) * 100);\r\n          onProgress(progress);\r\n        }\r\n      };\r\n\r\n      xhr.onload = () => {\r\n        if (xhr.status === 200) {\r\n          const script = document.createElement(\"script\");\r\n          script.textContent = xhr.responseText;\r\n          document.head.appendChild(script);\r\n          resolve();\r\n        } else {\r\n          reject(new Error(`Failed to load script: ${src}`));\r\n        }\r\n      };\r\n\r\n      xhr.onerror = () => reject(new Error(`Network error while loading: ${src}`));\r\n      xhr.send();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes the MediaPipe library and WebWorker\r\n   * @param {Function} onProgress - Callback for script loading progress\r\n   */\r\n  async init(onProgress) {\r\n    const mediaPipeUrl = \"https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/face_mesh.js\";\r\n\r\n    try {\r\n      // Load MediaPipe from CDN\r\n      console.log(\"Loading MediaPipe...\");\r\n      await MediaPipePoseEngine.loadScriptWithProgress(mediaPipeUrl, onProgress);\r\n\r\n      // Initialize WebWorker\r\n      this.worker = new Worker(this.workerScriptUrl);\r\n      this.booted = true;\r\n      console.log(\"MediaPipe Pose Engine Initialized\");\r\n    } catch (error) {\r\n      console.error(\"Error initializing MediaPipePoseEngine:\", error);\r\n    }\r\n  }\r\n\r\n  // -- -- --\r\n  // Worker Helper Functions\r\n\r\n  sendMessage(message) {\r\n    if (!this.booted) {\r\n      console.warn(\"MediaPipePoseEngine is not initialized.\");\r\n      return;\r\n    }\r\n    this.worker.postMessage(message);\r\n  }\r\n\r\n  onMessage(callback) {\r\n    if (!this.worker) {\r\n      console.warn(\"WebWorker not initialized.\");\r\n      return;\r\n    }\r\n    this.worker.onmessage = (event) => callback(event.data);\r\n  }\r\n\r\n  terminateWorker() {\r\n    if (this.worker) {\r\n      this.worker.terminate();\r\n      this.worker = null;\r\n      console.log(\"WebWorker terminated.\");\r\n    }\r\n  }\r\n}\r\n"],"names":["MediaPipePoseEngine","constructor","this","workerScriptUrl","worker","booted","loadScriptWithProgress","src","onProgress","Promise","resolve","reject","xhr","XMLHttpRequest","open","responseType","onprogress","event","lengthComputable","progress","Math","round","loaded","total","onload","status","script","document","createElement","textContent","responseText","head","appendChild","Error","onerror","send","init","console","log","Worker","error","sendMessage","message","postMessage","warn","onMessage","callback","onmessage","data","terminateWorker","terminate"],"sourceRoot":""}